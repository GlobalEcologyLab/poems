[{"path":[]},{"path":"https://globalecologylab.github.io/poems/CONTRIBUTING.html","id":"fixing-typos","dir":"","previous_headings":"","what":"Fixing typos","title":"Contributing to poems","text":"can fix typos, spelling mistakes, grammatical errors documentation directly using GitHub web interface, long changes made source file. generally means ’ll need edit roxygen2 comments .R, .Rd file. can find .R file generates .Rd reading comment first line.","code":""},{"path":"https://globalecologylab.github.io/poems/CONTRIBUTING.html","id":"bigger-changes","dir":"","previous_headings":"","what":"Bigger changes","title":"Contributing to poems","text":"want make bigger change, ’s good idea first file issue make sure someone team agrees ’s needed. ’ve found bug, please file issue illustrates bug minimal reprex (also help write unit test, needed). See guide create great issue advice.","code":""},{"path":"https://globalecologylab.github.io/poems/CONTRIBUTING.html","id":"pull-request-process","dir":"","previous_headings":"Bigger changes","what":"Pull request process","title":"Contributing to poems","text":"Fork package clone onto computer. haven’t done , recommend using usethis::create_from_github(\"GlobalEcologyLab/poems\", fork = TRUE). Install development dependencies devtools::install_dev_deps(), make sure package passes R CMD check running devtools::check(). R CMD check doesn’t pass cleanly, ’s good idea ask help continuing. Create Git branch pull request (PR). recommend using usethis::pr_init(\"brief-description--change\"). Make changes, commit git, create PR running usethis::pr_push(), following prompts browser. title PR briefly describe change. body PR contain Fixes #issue-number. PR addresses issue one reported yet, please create issue reference. user-facing changes, add bullet top NEWS.md (.e. just first header). Follow style described https://style.tidyverse.org/news.html.","code":""},{"path":"https://globalecologylab.github.io/poems/CONTRIBUTING.html","id":"code-style","dir":"","previous_headings":"Bigger changes","what":"Code style","title":"Contributing to poems","text":"New code follow tidyverse style guide. can use styler package apply styles, please don’t restyle code nothing PR. use roxygen2, Markdown syntax, documentation. use testthat unit tests. Contributions test cases included easier accept.","code":""},{"path":"https://globalecologylab.github.io/poems/CONTRIBUTING.html","id":"code-of-conduct","dir":"","previous_headings":"","what":"Code of Conduct","title":"Contributing to poems","text":"Please note poems project released Contributor Code Conduct. contributing project agree abide terms.","code":""},{"path":"https://globalecologylab.github.io/poems/CONTRIBUTING.html","id":"roadmap","dir":"","previous_headings":"","what":"Roadmap","title":"Contributing to poems","text":"poems development time mostly geared toward support compatibility extensions poems, currently include paleopop epizootic, may include future. much wish avoid changes break existing code, five published scientific articles based poems time writing, like code supports papers remain reproducible.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Simple workflow example for a population model","text":"begin loading poems package.","code":"library(poems)"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Simple workflow example for a population model","text":"poems workflow, implements pattern-oriented modeling (POM) approach (Grimm et al., 2005), achieved via framework interoperable components: workflow summarized following six steps: Build population model study region. Build generators dynamically generating model parameters. Sample model generator parameters simulation. Build simulation manager run simulation. Build results manager generate summary results (metrics). Build validator select model ensemble.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"step-1-build-the-population-model-for-the-study-region","dir":"Articles","previous_headings":"Workflow","what":"Step 1: Build the population model for the study region","title":"Simple workflow example for a population model","text":"Create model template using PopulationModel class. model spatially explicit, define study region via Region class. fixed model inputs, environmental correlations, well user-defined functions processes harvesting, set stage. create components order set model parameters separately, let’s setup study region, generate environmental correlations, define harvest function prior initializing template model fixed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"study-region","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Study region","title":"Simple workflow example for a population model","text":"First, ’ll define study region (denoted U Island) longitude-latitude coordinates.","code":"# Demonstration example region (U Island) coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (cell indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"environmental-correlation","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Environmental correlation","title":"Simple workflow example for a population model","text":"Next, ’ll define distance-based spatial correlation applying environmental stochasticity within model. generated correlation data compacted computational efficiency (large-scale models).","code":"# Distance-based environmental correlation (via a compacted Cholesky decomposition) env_corr <- SpatialCorrelation$new(region = region, amplitude = 0.4, breadth = 500) correlation <- env_corr$get_compact_decomposition(decimals = 2) correlation # examine #> $matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1 0.01 0.04 0.04 0.04 0.02 0.04 #> [2,]    0 1.00 1.00 0.01 1.00 0.02 0.01 #> [3,]    0 0.00 0.00 1.00 0.00 0.05 0.05 #> [4,]    0 0.00 0.00 0.00 0.00 1.00 1.00 #>  #> $map #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    1    1    2    3    3    4 #> [2,]   NA    2    3    3    5    4    5 #> [3,]   NA   NA   NA    4   NA    5    6 #> [4,]   NA   NA   NA   NA   NA    6    7"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"harvest-function","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Harvest function","title":"Simple workflow example for a population model","text":"Let’s now define simple harvest function, optionally list-nested harvest rate parameter. ’ll also define alias harvest rate can sample parameter later.","code":"# User-defined harvest function (list-nested) and alias harvest <- list(   rate = NA, # sample later   function(params) round(params$stage_abundance * (1 - params$rate)) ) harvest_rate_alias <- list(harvest_rate = \"harvest$rate\")"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"template-model","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Template model","title":"Simple workflow example for a population model","text":"Finally, can build template model fixed parameters.","code":"# Population (simulation) model template for fixed parameters stage_matrix <- matrix(   c(     0, 2.5, # Leslie/Lefkovitch matrix     0.8, 0.5   ),   nrow = 2, ncol = 2, byrow = TRUE,   dimnames = list(c(\"juv\", \"adult\"), c(\"juv\", \"adult\")) ) stage_matrix # examine #>       juv adult #> juv   0.0   2.5 #> adult 0.8   0.5 model_template <- PopulationModel$new(   region = region,   time_steps = 10, # years   populations = region$region_cells, # 7   stages = 2,   stage_matrix = stage_matrix,   demographic_stochasticity = TRUE,   standard_deviation = 0.05,   correlation = correlation,   density_dependence = \"logistic\",   harvest = harvest,   results_selection = c(\"abundance\", \"harvested\"),   attribute_aliases = harvest_rate_alias )"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"step-2-build-generators-for-dynamically-generating-model-parameters","dir":"Articles","previous_headings":"Workflow","what":"Step 2: Build generators for dynamically generating model parameters","title":"Simple workflow example for a population model","text":"model parameters single values, whilst others represented arrays multi-value data structures. Usually, don’t wish sample individual value within multi-value parameters (step 3), generate dynamically via one intermediate sampled parameters. build generators model initial abundance, carrying capacity, dispersal.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"habitat-suitability","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Habitat suitability","title":"Simple workflow example for a population model","text":"Firstly, initial abundance carrying capacity generator utilizes example (mock) habitat suitability defined study region.","code":"# Example habitat suitability example_hs <- c(0.8, 1, 0.7, 0.9, 0.6, 0.7, 0.8) example_hs_raster <- region$region_raster example_hs_raster[region$region_indices] <- example_hs raster::plot(example_hs_raster,   main = \"Example habitat suitability\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"initial-abundance-and-carrying-capacity-generator","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Initial abundance and carrying capacity generator","title":"Simple workflow example for a population model","text":"generator utilizes generic template functionality user-defined custom functions. uses sampled input parameters (initial total abundance maximum cell density), along habitat suitability, generate desired output model parameters (initial abundance carrying capacity) via user-defined functions. Generators can also configured read values files generate values via probabilistic distributions.","code":"# Initial abundance and carrying capacity generated via example habitat suitability capacity_gen <- Generator$new(   description = \"Capacity generator\",   example_hs = example_hs, # template attached   inputs = c(\"initial_n\", \"density_max\"),   outputs = c(\"initial_abundance\", \"carrying_capacity\") ) capacity_gen$add_generative_requirements(list(   initial_abundance = \"function\",   carrying_capacity = \"function\" )) capacity_gen$add_function_template(\"initial_abundance\",   function_def = function(params) {     stats::rmultinom(1,       size = params$initial_n,       prob = params$example_hs     )[, 1]   },   call_params = c(\"initial_n\", \"example_hs\") ) capacity_gen$add_function_template(\"carrying_capacity\",   function_def = function(params) {     round(params$density_max * params$example_hs)   },   call_params = c(\"density_max\", \"example_hs\") ) capacity_gen$generate(input_values = list(initial_n = 500, density_max = 100)) # test #> $initial_abundance #> [1] 63 83 61 97 39 70 87 #>  #> $carrying_capacity #> [1]  80 100  70  90  60  70  80"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"dispersal-generator","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Dispersal generator","title":"Simple workflow example for a population model","text":"dispersal generator uses default functionality generating dispersal rates cells. sampled inputs parameterize distance-based dispersal function (proportion dispersing breadth dispersal). generator can configured dispersal friction helper class object, calculates equivalent dispersal distances frictional landscapes coastlines. used ensure dispersal performed directly across “water” example U-shaped island. generated dispersal data calculated via pre-calculated distance data compacted computational efficiency (large-scale models). Note dispersal rate cells 1 2 “water” cells, consequently dispersal cells must travel around U-shaped island, can’t achieved one simulation time-step since “round” distance cells greater 3000 m.","code":"# Distance-based dispersal generator dispersal_gen <- DispersalGenerator$new(   region = region,   dispersal_max_distance = 3000, # in m   dispersal_friction = DispersalFriction$new(),   inputs = c(\"dispersal_p\", \"dispersal_b\"),   decimals = 5 ) dispersal_gen$calculate_distance_data() # pre-calculate test_dispersal <- dispersal_gen$generate(input_values = list(   dispersal_p = 0.5,   dispersal_b = 700 )) head(test_dispersal$dispersal_data[[1]]) #>   target_pop source_pop emigrant_row immigrant_row dispersal_rate #> 1          3          1            1             1        0.10284 #> 2          5          1            2             1        0.02115 #> 3          6          1            3             1        0.01501 #> 4          4          2            1             1        0.10284 #> 5          6          2            2             2        0.01501 #> 6          7          2            3             1        0.02115"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"step-3-sample-model-and-generator-parameters-for-each-simulation","dir":"Articles","previous_headings":"Workflow","what":"Step 3: Sample model and generator parameters for each simulation","title":"Simple workflow example for a population model","text":"order explore model parameter space find best models, generate Latin hypercube samples model generator parameters simulated, using LatinHypercubeSampler class. class functionality generating sample parameters via Uniform, Normal, Lognormal, Beta, Triangular distributions. example generate 12 samples. encourage user generate hundreds, thousands, samples.","code":"# Generate sampled values for variable model parameters via LHS lhs_gen <- LatinHypercubeSampler$new() lhs_gen$set_uniform_parameter(\"growth_rate_max\", lower = 0.4, upper = 0.6, decimals = 2) lhs_gen$set_uniform_parameter(\"harvest_rate\", lower = 0.05, upper = 0.15, decimals = 2) lhs_gen$set_uniform_parameter(\"initial_n\", lower = 400, upper = 600, decimals = 0) lhs_gen$set_uniform_parameter(\"density_max\", lower = 80, upper = 120, decimals = 0) lhs_gen$set_uniform_parameter(\"dispersal_p\", lower = 0.2, upper = 0.5, decimals = 2) lhs_gen$set_uniform_parameter(\"dispersal_b\", lower = 400, upper = 1000, decimals = 0) sample_data <- lhs_gen$generate_samples(number = 12, random_seed = 123) sample_data # examine #>    growth_rate_max harvest_rate initial_n density_max dispersal_p dispersal_b #> 1             0.50         0.09       575         111        0.26         481 #> 2             0.41         0.07       487          96        0.34         589 #> 3             0.44         0.09       483         110        0.42         509 #> 4             0.59         0.11       589          86        0.38         859 #> 5             0.56         0.06       441          92        0.21         667 #> 6             0.51         0.14       458         116        0.50         980 #> 7             0.54         0.05       416          88        0.28         447 #> 8             0.43         0.13       542         107        0.36         920 #> 9             0.46         0.12       422         101        0.43         849 #> 10            0.52         0.08       552          99        0.32         745 #> 11            0.48         0.11       525         119        0.25         789 #> 12            0.58         0.15       505          81        0.45         609"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"step-4-build-a-simulation-manager-to-run-each-simulation","dir":"Articles","previous_headings":"Workflow","what":"Step 4: Build a simulation manager to run each simulation","title":"Simple workflow example for a population model","text":"now wish run simulation set (row) sampled parameters. SimulationManager class manages generation parameters (via generators), running model simulations, writing simulation results disk. also maintains log simulation’s success errors warnings encountered. Note output directory contains R-data result files sample simulation simulation log file.","code":"# Create a simulation manager and run the sampled model simulations OUTPUT_DIR <- tempdir() sim_manager <- SimulationManager$new(   sample_data = sample_data,   model_template = model_template,   generators = list(capacity_gen, dispersal_gen),   parallel_cores = 2,   results_dir = OUTPUT_DIR ) run_output <- sim_manager$run() run_output$summary #> [1] \"12 of 12 sample models ran and saved results successfully\" dir(OUTPUT_DIR, \"*.RData\") # includes 12 result files #>  [1] \"sample_1_results.RData\"  \"sample_10_results.RData\" #>  [3] \"sample_11_results.RData\" \"sample_12_results.RData\" #>  [5] \"sample_2_results.RData\"  \"sample_3_results.RData\"  #>  [7] \"sample_4_results.RData\"  \"sample_5_results.RData\"  #>  [9] \"sample_6_results.RData\"  \"sample_7_results.RData\"  #> [11] \"sample_8_results.RData\"  \"sample_9_results.RData\" dir(OUTPUT_DIR, \"*.txt\") # plus simulation log #> [1] \"simulation_log.txt\""},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"step-5-build-a-results-manager-to-generate-summary-results-metrics","dir":"Articles","previous_headings":"Workflow","what":"Step 5: Build a results manager to generate summary results (metrics)","title":"Simple workflow example for a population model","text":"now wish collate summary results simulations via ResultsManager class. manager loads results sample simulation intermediate PopulationResults class object, dynamically generates results. need define functions calculating summary metrics, well matrices (one row values per simulation) may interested examining. metric (matrix) associated user-defined function utilizes results object attributes, alternatively direct access attribute may defined via string. generated, result metrics (data frame) /matrices (list) can accessed via manager. may utilize collated results variety ways. However, objective selecting best models, wish compare (validate) result metrics () known desired target patterns (step 6).","code":"results_manager <- ResultsManager$new(   simulation_manager = sim_manager,   simulation_results = PopulationResults$new(),   summary_metrics = c(\"trend_n\", \"total_h\"),   summary_matrices = c(\"n\", \"h\"),   summary_functions = list(     trend_n = function(results) {       round(results$all$abundance_trend, 2)     },     total_h = function(results) {       sum(results$harvested)     },     n = \"all$abundance\", # string     h = \"all$harvested\"   ),   parallel_cores = 2 ) gen_output <- results_manager$generate() gen_output$summary #> [1] \"12 of 12 summary metrics/matrices generated from sample results successfully\" dir(OUTPUT_DIR, \"*.txt\") # plus generation log #> [1] \"generation_log.txt\" \"simulation_log.txt\" results_manager$summary_metric_data #>    index trend_n total_h #> 1      1   -5.40     483 #> 2      2    1.67     311 #> 3      3   -0.50     464 #> 4      4   -8.33     509 #> 5      5   -1.00     289 #> 6      6    1.43     710 #> 7      7    2.00     230 #> 8      8  -10.20     617 #> 9      9   -4.50     561 #> 10    10  -10.38     406 #> 11    11   -5.56     616 #> 12    12   -7.75     611 results_manager$summary_matrix_list #> $n #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]  545  521  489  471  490  497  494  470  492   472 #>  [2,]  424  427  405  381  390  410  396  440  411   417 #>  [3,]  477  453  473  454  492  439  491  433  476   472 #>  [4,]  477  449  437  388  413  393  407  374  414   402 #>  [5,]  454  431  476  496  452  468  441  440  447   459 #>  [6,]  445  454  458  455  382  405  407  455  444   496 #>  [7,]  428  443  428  435  464  426  474  468  457   413 #>  [8,]  482  454  429  420  383  385  378  378  382   392 #>  [9,]  416  409  458  421  426  422  407  403  370   400 #> [10,]  515  479  454  500  493  492  458  436  432   397 #> [11,]  513  483  517  508  509  487  465  477  476   463 #> [12,]  389  365  365  368  343  353  360  295  329   303 #>  #> $h #>       [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #>  [1,]   53   52   47   44   50   50   47   46   48    46 #>  [2,]   32   32   30   30   28   30   30   33   33    33 #>  [3,]   48   46   47   45   50   44   49   44   44    47 #>  [4,]   60   52   55   50   49   48   50   47   48    50 #>  [5,]   26   28   29   29   29   31   29   29   29    30 #>  [6,]   71   71   74   73   63   68   65   72   72    81 #>  [7,]   22   23   22   23   24   22   24   25   22    23 #>  [8,]   72   68   64   62   58   59   58   56   60    60 #>  [9,]   56   57   65   58   56   58   54   54   50    53 #> [10,]   44   41   39   44   44   44   42   37   36    35 #> [11,]   64   61   67   64   62   61   59   61   61    56 #> [12,]   71   64   66   63   58   63   62   53   58    53"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"step-6-build-a-validator-to-select-a-model-ensemble","dir":"Articles","previous_headings":"Workflow","what":"Step 6: Build a validator to select a model ensemble","title":"Simple workflow example for a population model","text":"now select analyze ‘best’ models via Validator class object, default utilizes approximate Bayesian computation (ABC) approach (Beaumont, Zhang, & Balding, 2002) provided abc library (Csillery et al., 2015). validator can configured appropriately problem domain (see abc documentation). use default configuration select best 3 models, along weight value, indicative congruence model’s summary metrics corresponding target patterns. Also provided (default settings) diagnostic output (PDF) file, containing statistical information analyzing contribution model parameters selection/validation process (see abc documentation). simple demonstration metrics corresponding targets relatively trivial, aim producing stable population abundances high harvest. However, package facilitates use complex spatio-temporal metrics targets (demonstrated advanced vignettes). encourage user examine generated diagnostics (PDF) output file, become acquainted analysis information facilitates (see abc documentation). simple example uses two metrics/targets, can visualize congruence selected models targets via simple plot.","code":"# Create a validator for selecting the 'best' example models validator <- Validator$new(   simulation_parameters = sample_data,   simulation_summary_metrics =     results_manager$summary_metric_data[-1],   observed_metric_targets = c(trend_n = 0, total_h = 600),   output_dir = OUTPUT_DIR ) suppressWarnings(validator$run(tolerance = 0.25, output_diagnostics = TRUE)) #> 12345678910 #> 12345678910 dir(OUTPUT_DIR, \"*.pdf\") # plus validation diagnostics (see abc library documentation) #> [1] \"validation_diagnostics.pdf\" validator$selected_simulations # top 3 models (stable abundance and high harvest) #>   index     weight #> 1     3 0.00000000 #> 2     6 0.26702758 #> 3     9 0.07070826 # Plot the simulation, targets, and selected metrics graphics::plot(   x = results_manager$summary_metric_data$total_h,   y = results_manager$summary_metric_data$trend_n,   main = \"Example model validation\",   xlab = \"Total harvested\", ylab = \"Abundance trend\" ) graphics::points(x = 600, y = 0, col = \"red\", pch = 4) selected_indices <- validator$selected_simulations$index graphics::points(   x = results_manager$summary_metric_data$total_h[selected_indices],   y = results_manager$summary_metric_data$trend_n[selected_indices],   col = \"blue\", pch = 3 ) graphics::legend(\"bottomleft\",   legend = c(\"Summary metrics\", \"Targets\", \"Selected\"),   col = c(1, \"red\", \"blue\"), pch = c(1, 4, 3), cex = 0.8 )"},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Simple workflow example for a population model","text":"demonstration provided overview poems workflow modules via simple population model example. hope given foundation progress advanced Tasmanian Thylacine vignette, towards utilizing package modeling projects. Thank :-)","code":""},{"path":"https://globalecologylab.github.io/poems/articles/simple_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Simple workflow example for a population model","text":"Beaumont, M. ., Zhang, W., & Balding, D. J. (2002). ‘Approximate Bayesian computation population genetics’. Genetics, vol. 162, . 4, pp, 2025–2035. Csillery, K., Lemaire L., Francois O., & Blum M. (2015). ‘abc: Tools Approximate Bayesian Computation (ABC)’. R package version 2.1. Retrieved https://CRAN.R-project.org/package=abc Grimm, V., Revilla, E., Berger, U., Jeltsch, F., Mooij, W. M., Railsback, S. F., Thulke, H. H., Weiner, J., Wiegand, T., DeAngelis, D. L., (2005). ‘Pattern-Oriented Modeling Agent-Based Complex Systems: Lessons Ecology’. Science vol. 310, . 5750, pp. 987–991.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Workflow example for the Tasmanian thylacine","text":"begin loading poems package. set flag running vignette demonstration mode (default). set TRUE, pre-run simulation results loaded rather waiting (potentially hours) run full sample model set. Feel free set flag FALSE run simulations. may also change number samples generated, set number parallel cores available system, set simulation output directory.","code":"library(poems) DEMONSTRATION <- TRUE # load pre-run data rather than running simulations SAMPLES <- 20000 PARALLEL_CORES <- 2"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"workflow","dir":"Articles","previous_headings":"","what":"Workflow","title":"Workflow example for the Tasmanian thylacine","text":"poems workflow implements pattern-oriented modeling (POM) approach (Grimm et al., 2005), can broken six steps: Build population model study region. Generate dynamic model parameters. Sample model generator parameters simulation. Build simulation manager run simulation. Build results manager generate summary results (metrics). Build validator select model ensemble based POM.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"step-1-build-the-population-model-for-the-study-region","dir":"Articles","previous_headings":"Workflow","what":"Step 1: Build the population model for the study region","title":"Workflow example for the Tasmanian thylacine","text":"start building model template (using PopulationModel class) fixed model parameters user-defined functions, including bio-economic harvest function. Since model spatially explicit, also need define study region (via Region class).","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"tasmanian-study-region","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Tasmanian study region","title":"Workflow example for the Tasmanian thylacine","text":"First, ’ll define study region via raster 0.1 degree grid-cells majority Tasmania, inhabited thylacine. raster Tasmania accompanies poems package, may loaded via variable name. plot chunk unnamed-chunk-2 grid-cell size selected reasonable approximation thylacine territorial range (Guiler & Godard, 1998). define region, use raster Tasmania template Region object, set occupiable cell indices order stored raster. plot chunk unnamed-chunk-3","code":"# Raster of Tasmania (note: islands removed where there was no evidence of thylacine occupancy). data(tasmania_raster) raster::plot(tasmania_raster,   main = \"Tasmania raster\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" ) # Tasmania study region (795 cells stored in the order shown) region <- Region$new(template_raster = tasmania_raster) raster::plot(region$region_raster,   main = \"Tasmanian study region (cell indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"ibra-bioregions","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"IBRA bioregions","title":"Workflow example for the Tasmanian thylacine","text":"partition study region Interim Bioregionalisation Australia (IBRA) bioregions several purposes. harvest function distribute simulated harvest across IBRA bioregions. also use IBRA bioregions approximate spatial differences habitat suitability decline. step 6, use estimated extirpation dates IBRA bioregion selecting model ensemble. raster approximate distribution study region cells across IBRA bioregions, well data frame containing information IBRA bioregion, included poems package. also collate lists indices number cells bioregion. plot chunk unnamed-chunk-4","code":"# Tasmania study Interim Bioregionalisation of Australia (IBRA) bioregion cell distribution data(tasmania_ibra_raster) raster::plot(tasmania_ibra_raster,   main = \"Tasmania study IBRA bioregions\", colNA = \"blue\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\" ) data(tasmania_ibra_data) tasmania_ibra_data # examine #>   index key abbr                        name #> 1     1   A  FUR                    Furneaux #> 2     2   B  BEN                  Ben Lomond #> 3     3   C  TNM Tasmanian Northern Midlands #> 4     4   D  TSE        Tasmanian South East #> 5     5   E   TW              Tasmanian West #> 6     6   F  TNS   Tasmanian Northern Slopes #> 7     7   G  TSR   Tasmanian Southern Ranges #> 8     8   H  TCH Tasmanian Central Highlands #> 9     9   I  KIN                        King  # Calculate cell indices and counts for IBRA bioregions ibra_indices <- lapply(   as.list(tasmania_ibra_data$index),   function(i) {     which(tasmania_ibra_raster[region$region_indices] == i)   } ) ibra_indices[1:2] # examine #> [[1]] #>  [1]  13  14  15  25  26  27  28  29  30  31  44  45  46  47  48  50  52  53  54 #> [20]  55  71  72  73  74  75  76  77  78  79  85  86  87 105 106 107 108 109 110 #> [39] 124 143 161 197 198 233 234 270 #>  #> [[2]] #>  [1]  49  51  80  81  82  83  84 111 112 113 114 115 116 117 118 119 120 121 122 #> [20] 123 148 149 150 151 152 153 154 155 156 157 158 159 160 187 188 189 190 191 #> [39] 192 193 194 195 196 225 226 227 228 229 230 231 232 261 262 263 264 265 266 #> [58] 267 268 269 296 297 298 299 300 301 302 303 304 305 332 333 334 335 336 337 ibra_cells <- unlist(lapply(ibra_indices, length)) ibra_cells # examine #> [1]  46  76  40 147 188  72  93  86  47"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"density-dependence-function","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Density dependence function","title":"Workflow example for the Tasmanian thylacine","text":"create user-defined function density dependence utilizing logistic approach (Ricker, 1954). Although poems package Ricker logistic function predefined function operating population grid-cell level (via density_dependence = “logistic”), found inadequate thylacine model due low densities thylacine grid-cell level. overcome density dependence function operates neighborhood level, cell’s neighborhood include adjacent cells (thus 9 cells total). approach considers mobility thylacine calculating annual reproduction survival rates, whereby individuals ability search mates suitable habitat neighboring cells. order first define neighborhoods density dependence function, convenient partially skip ahead step 2 (building generators) build dispersal generator. use generator dispersal functionality later, now use calculate distance data order define neighborhoods adjacent cells grid-cell. defined spatial resolution, adjacent cells within 14 km cell. can now define density dependence function, list-nested neighborhoods Allee effect (Allee, 1931) parameter. apply Tasmania-wide Allee effect suppress sustained low, non-viable population. Additional functionality also included prevent reproduction neighborhood single thylacine. also define alias Allee parameter can sample later. Note calculating modified growth rate via neighborhood abundance carrying capacity cell, utilize lookup table (calculated time simulation) apply multiplier stage matrix corresponding cell, thus modifying equivalent growth rate appropriately.","code":"# Build the dispersal generator and calculate distance data dispersal_gen <- DispersalGenerator$new(   region = region,   dispersal_max_distance = 50,   distance_scale = 1000, # in km   dispersal_friction = DispersalFriction$new(), # modify coastline distances   inputs = c(\"dispersal_p\", \"dispersal_b\"),   decimals = 5 ) dispersal_gen$calculate_distance_data() head(dispersal_gen$distance_data$base) # examine #>   target_pop source_pop compact_row distance_class #> 1          2          1           1              9 #> 2          3          1           2             17 #> 3          4          1           3             26 #> 4          5          1           4             14 #> 5          6          1           5             12 #> 6          7          1           6             14 # Define neighborhoods (of up to 9 adjacent cells) based on a 14 km range from each # grid cell for density dependence calculations (using a dispersal generator) distance_data <- dispersal_gen$distance_data[[1]] nh_data <- distance_data[which(distance_data$distance_class <= 14), 2:1] neighborhoods <- as.list(1:795) for (i in 1:nrow(nh_data)) {   neighborhoods[[nh_data$source_pop[i]]] <- c(     neighborhoods[[nh_data$source_pop[i]]],     nh_data$target_pop[i]   ) } neighborhoods[1:3] # examine #> [[1]] #> [1] 1 2 5 6 7 #>  #> [[2]] #> [1] 2 1 3 6 7 8 #>  #> [[3]] #> [1] 3 2 4 7 8 9 # User-defined function for Ricker logistic density dependence via neighborhoods, with # Allee effects; also remove fecundities if single thylacine in a neighborhood density_dependence <- list(   neighborhoods = neighborhoods,   allee = 25, # Tasmania-wide Allee effect parameter   function(params) {     # Apply logistic density dependence using neighborhoods     growth_rate_max <- params$growth_rate_max     nh_density_abundance <- unlist(lapply(       params$neighborhoods,       function(nh_indices) {         sum(params$density_abundance[nh_indices])       }     ))     nh_carrying_capacity <- unlist(lapply(       params$neighborhoods,       function(nh_indices) {         sum(params$carrying_capacity[nh_indices])       }     ))     occupied_indices <- params$occupied_indices     growth_rate <- growth_rate_max * (1 - (nh_density_abundance[occupied_indices] /       nh_carrying_capacity[occupied_indices]))     params$transition_array[, , occupied_indices] <-       params$apply_multipliers(         params$transition_array[, , occupied_indices],         params$calculate_multipliers(growth_rate)       )      # Apply Tasmania-wide allee effect     total_abundance <- sum(params$density_abundance)     params$transition_array <-       params$transition_array * total_abundance / (params$allee + total_abundance)      # Remove fecundities for single thylacines     single_indices <- which(nh_density_abundance == 1)     params$transition_array[, , single_indices] <-       (params$transition_array[, , single_indices] * as.vector(+(!params$fecundity_mask)))      return(params$transition_array)   } ) density_aliases <- list(density_allee = \"density_dependence$allee\")"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"harvest-function","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Harvest function","title":"Workflow example for the Tasmanian thylacine","text":"Let’s now define bio-economic harvest function, optionally list-nested harvest parameters. total (Tasmania-wide) number thylacines harvested model simulation time step calculated via combination constant opportunistic harvest rate plus bio-economic component adapted Bulte et al.  (2003). bio-economic component simulates hunting effort based economic return (profit), relative economic alternatives. Economic hunting rewards include bounty applied bounty period (1888-1909), plus ongoing reward pelts. estimated half thylacines killed submitted bounty (Guiler & Godard, 1998). therefore include additional parameter harvest model calculate fraction harvest submitted bounty. calculate simulated yearly total harvest bounty, distribute across IBRA bioregions based thylacine bioregion densities. define aliases harvest/bounty parameters can sample later.","code":"# Harvest bounty (economic) model user-defined function adapted from Bulte et al. (2003). harvest <- list(    # Function parameters (passed to function in params list)   ohr = 0.05, # opportunistic harvest rate   t1 = 1888, # first year of bounty   tb = 1909, # last year of bounty   fb = 0.75, # harvest fraction submitted for bounty   B = c(1.6, 0.6), # bounty/skin price in pounds, pre/post bounty   w = 3.5, # opportunity cost in pounds per year   E0 = 25, # effort in 1888 (no. hunters)   q = 0.0025, # catchability coefficient   v1 = 0.02, # entry rate   v2 = 0.5, # exit rate   ibra_indices = ibra_indices, # bioregion cell (row) indices   ibra_cells = ibra_cells, # number of cells in bioregions    # Function definition   bounty_function = function(params) {     # Unpack parameters (used at every time step)     ohr <- params$ohr     t1 <- params$t1     tb <- params$tb     fb <- params$fb     B <- params$B     w <- params$w     q <- params$q     v1 <- params$v1     v2 <- params$v2     ibra_indices <- params$ibra_indices     ibra_cells <- params$ibra_cells     ibra_number <- length(ibra_cells)     stages <- params$stages     populations <- params$populations     simulator <- params$simulator     tm <- params$tm     x <- params$stage_abundance      # Initialise (first time step only)     if (tm == 1) { # attach variables and access results via simulator reference object       simulator$attached$E <- params$E0 # current bounty effort       simulator$attached$vi <- v1 # current bounty rate       simulator$results$bounty <- array(0, c(ibra_number, params$time_steps))     }      # Access persistent parameters via simulator reference object     E <- simulator$attached$E     vi <- simulator$attached$vi      # Next year's hunting effort and entry/exit rates based on this year's profit     h <- max(0, round((ohr + q * E) * sum(x))) # harvest     b <- round(h * fb * ((tm + t1 - 1) <= tb)) # bounty submitted     profit <- round(B[((tm + t1 - 1) > tb) + 1] * b + B[2] * (h - b) - w * E, 1)     simulator$attached$E <- max(0, round(E + vi * profit))     simulator$attached$vi <- c(v1, v2)[(profit < 0) + 1]      # Distribute harvest and bounty across bioregions based on each IBRA density     staged_indices <- array(1:(stages * populations), c(stages, populations))     rep_indices <- unlist(apply(       matrix(staged_indices[, unlist(ibra_indices)]), 1,       function(i) rep(i, x[i])     ))     distributed_h <- array(0, c(stages, populations))     if (length(rep_indices) && h > 0) {       ibra_x <- unlist(lapply(ibra_indices, function(indices) sum(x[, indices])))       rep_ibra <- unlist(apply(matrix(1:ibra_number), 1, function(i) rep(i, ibra_x[i])))       rep_prob <- 1 / ibra_cells[rep_ibra]       h_indices <- sample(1:length(rep_indices), min(h, sum(x)), prob = rep_prob)       if (b > 0) {         b_indices <- h_indices[sample(1:length(h_indices), b)]         simulator$results$bounty[, tm] <- tabulate(rep_ibra[b_indices],           nbins = ibra_number         )       }       for (i in rep_indices[h_indices]) distributed_h[i] <- distributed_h[i] + 1     }      # Return abundance     return(x - distributed_h)   } ) harvest_aliases <- list(   harvest_ohr = \"harvest$ohr\", harvest_fb = \"harvest$fb\",   harvest_w = \"harvest$w\", harvest_E0 = \"harvest$E0\",   harvest_q = \"harvest$q\", harvest_v1 = \"harvest$v1\",   harvest_v2 = \"harvest$v2\" )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"template-model","dir":"Articles","previous_headings":"Workflow > Step 1: Build the population model for the study region","what":"Template model","title":"Workflow example for the Tasmanian thylacine","text":"Finally, can build template model user-defined functions associated parameters, well fixed model parameters. Note use thresholds/cutoffs dispersal target carrying capacities abundances. former suppress dispersal cells near-zero suitability, whereas latter prevent model thylacines overcrowding cells. overridden, simulation order may allow initial abundance included results. Also note commented placeholders model parameters sampled generated.","code":"# Population (simulation) model template for fixed parameters model_template <- PopulationModel$new(   region = region,   time_steps = 80, # years (1888-1967)   populations = region$region_cells, # 795   # initial_abundance : generated   # stage_matrix: generated   fecundity_max = 2,   demographic_stochasticity = TRUE,   # carrying_capacity : generated   density_dependence = density_dependence, # user-defined   harvest = harvest, # user-defined   # dispersal : generated   dispersal_target_k = 0.5,   dispersal_target_n = list(threshold = 4, cutoff = 8),   simulation_order = c(\"results\", \"harvest\", \"transition\", \"dispersal\"),   results_selection = c(\"abundance\", \"harvested\"),   attribute_aliases = c(density_aliases, harvest_aliases) )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"step-2-build-generators-for-dynamically-generating-model-parameters","dir":"Articles","previous_headings":"Workflow","what":"Step 2: Build generators for dynamically generating model parameters","title":"Workflow example for the Tasmanian thylacine","text":"build generator combined model initial abundance carrying capacity, well generator generating stage matrix sampled model based sampled growth rate. test generators, including pre-built dispersal generator (part 1), generating example outputs.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"initial-habitat-suitability","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Initial habitat suitability","title":"Workflow example for the Tasmanian thylacine","text":"Firstly, initial abundance carrying capacity generator utilizes habitat suitability study region. initial habitat suitability derived species distribution model (SDM) thylacine. initial habitat suitability raster also included poems package. plot chunk unnamed-chunk-10","code":"# Initial thylacine habitat suitability data(thylacine_hs_raster) raster::plot(thylacine_hs_raster,   main = \"Initial thylacine habitat suitability\", colNA = \"blue\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\" )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"habitat-decline","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Habitat decline","title":"Workflow example for the Tasmanian thylacine","text":"Bulte et al. (2003) estimated 3% per annum Tasmania-wide decline thylacine habitat suitability due human land use. approximate spatial differences decline, approximate decline thylacine habitat suitability applying constant annual decline IBRA bioregions except Tasmanian West (5) Central Highlands (8), mostly retained natural ecosystems.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"initial-abundance-and-carrying-capacity-generator","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Initial abundance and carrying capacity generator","title":"Workflow example for the Tasmanian thylacine","text":"utilize Generator class functionality creating user-defined (template) functions generate initial abundance carrying capacity (outputs). functions use initial habitat suitability spatial distribution habitat decline, along sampled values (inputs) initial carrying capacity, percentage decline (7/9 IBRA bioregions), fraction capacity initial abundance (phi). can test generator example (mid-value) sample inputs examine plots output initial abundance carrying capacity (final). plot chunk unnamed-chunk-12 plot chunk unnamed-chunk-12","code":"# Build a carrying capacity generator model based on habitat suitability and sampled # initial capacity, initial fraction (phi), & decline rate per year in selected bioregions. capacity_gen <- Generator$new(   description = \"capacity\",   time_steps = 80, # years (1888-1967)   initial_hs = thylacine_hs_raster[region$region_indices],   decline_indices = which(!tasmania_ibra_raster[region$region_indices] %in% c(5, 8)),   inputs = c(\"k_init\", \"k_decline\", \"k_phi\"),   outputs = c(\"initial_abundance\", \"carrying_capacity\"),   generative_requirements = list(     initial_abundance = \"function\",     carrying_capacity = \"function\"   ) ) capacity_gen$add_function_template(   \"initial_abundance\",   function_def = function(params) {     distr_k <- round(params$initial_hs / sum(params$initial_hs) * params$k_init)     a_init <- round(params$k_init * params$k_phi) # total initial     distr_a <- array(0, length(distr_k))     rep_indices <- unlist(apply(       matrix(1:length(distr_k)), 1,       function(i) rep(i, distr_k[i])     ))     sample_indices <- rep_indices[sample(       1:length(rep_indices),       min(a_init, length(rep_indices))     )]     for (i in sample_indices) distr_a[i] <- distr_a[i] + 1     return(distr_a)   },   call_params = c(\"initial_hs\", \"k_init\", \"k_phi\") ) capacity_gen$add_function_template(   \"carrying_capacity\",   function_def = function(params) {     distr_k <- params$initial_hs / sum(params$initial_hs) * params$k_init     decline_matrix <- array(1, c(length(distr_k), params$time_steps))     decline_matrix[params$decline_indices, ] <-       matrix((1 - params$k_decline)^(0:(params$time_steps - 1)),         nrow = length(params$decline_indices), ncol = params$time_steps,         byrow = TRUE       )     return(distr_k * decline_matrix)   },   call_params = c(     \"initial_hs\", \"time_steps\", \"decline_indices\",     \"k_init\", \"k_decline\"   ) ) # Generate example initial abundance and declining carrying capacity time-series generated_k <- capacity_gen$generate(input_values = list(   k_init = 2800,   k_decline = 0.04,   k_phi = 0.8 )) example_initial_abundance <- generated_k$initial_abundance example_carrying_capacity <- generated_k$carrying_capacity  # Plot the example initial abundance example_initial_n_raster <- region$region_raster example_initial_n_raster[region$region_indices] <- example_initial_abundance raster::plot(example_initial_n_raster,   main = \"Example initial thylacines\",   colNA = \"blue\", xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\" ) # Plot the example final carrying capacity example_final_raster <- region$region_raster example_final_raster[region$region_indices] <- example_carrying_capacity[, 80] raster::plot(example_final_raster,   main = \"Final thylacine carrying capacity\",   colNA = \"blue\", xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   zlim = c(0, 8) )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"stage-matrix-generator","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Stage matrix generator","title":"Workflow example for the Tasmanian thylacine","text":"stage matrix generator adjusts original stage matrix equivalent (simple) growth rate (lambda - 1) sampled input rate. can test generator example (mid-value) sample input growth rate 0.25 (lambda = 1.25).","code":"# Build a stage matrix generator based on sampled growth rate stage_matrix_gen <- Generator$new(   description = \"stage matrix\",   base_matrix = matrix(c(     0.00, 0.57, 1.17,     0.50, 0.00, 0.00,     0.00, 0.80, 0.80   ), nrow = 3, ncol = 3, byrow = TRUE),   inputs = c(\"growth_r\"),   outputs = c(\"stage_matrix\"),   generative_requirements = list(stage_matrix = \"function\") ) stage_matrix_gen$add_function_template(   \"stage_matrix\",   function_def = function(params) {     return(params$base_matrix * (1 + params$growth_r) /       Re((eigen(params$base_matrix)$values)[1]))   },   call_params = c(\"base_matrix\", \"growth_r\") ) # Generate sampled stage matrix for growth rate: lambda = 1.25 gen_stage_m <- stage_matrix_gen$generate(input_values = list(growth_r = 0.25)) gen_stage_m # examine #> $stage_matrix #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 0.5923549 1.2158863 #> [2,] 0.5196095 0.0000000 0.0000000 #> [3,] 0.0000000 0.8313752 0.8313752"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"dispersal-generator","dir":"Articles","previous_headings":"Workflow > Step 2: Build generators for dynamically generating model parameters","what":"Dispersal generator","title":"Workflow example for the Tasmanian thylacine","text":"already built dispersal generator step 1, use calculate neighborhood distances density dependence. distance-based dispersal generator use sampled values dispersal proportion (p) breadth (b) parameters, described generator’s help documentation (?DispersalGenerator). now use generate example dispersal data, based best estimates p b parameters.","code":"# Generate sampled dispersals for p = 0.5, b = 7 (km) sample_dispersal_data <- dispersal_gen$generate(   input_values = list(dispersal_p = 0.5, dispersal_b = 7) )$dispersal_data head(sample_dispersal_data[[1]]) # examine #>   target_pop source_pop emigrant_row immigrant_row dispersal_rate #> 1          2          1            1             1        0.13164 #> 2          3          1            2             1        0.04198 #> 3          4          1            3             1        0.01161 #> 4          5          1            4             1        0.06444 #> 5          6          1            5             1        0.08576 #> 6          7          1            6             1        0.06444"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"example-model-run","dir":"Articles","previous_headings":"Workflow","what":"Example model run","title":"Workflow example for the Tasmanian thylacine","text":"proceeding step 3 setup multiple model simulations, let’s run model fixed parameter values, initially set user-defined density dependence harvest functions, along generated example initial abundance, carrying capacity, stage matrix, dispersal data. cloning model template setting example parameters running population simulator. plot chunk unnamed-chunk-16","code":"# Run the model with example parameters model <- model_template$clone() model$set_attributes(   initial_abundance = example_initial_abundance,   carrying_capacity = example_carrying_capacity,   stage_matrix = gen_stage_m$stage_matrix,   dispersal = sample_dispersal_data ) results <- population_simulator(model) # run poems simulator  # Plot the total abundance and number harvested plot(   x = 1888:1967, y = results$all$abundance, xlab = \"Year\",   ylab = \"Number of thylacines\", main = \"Thylacine example model run\",   ylim = c(0, 2500), type = \"l\", col = \"green\", lwd = 2 ) lines(x = 1888:1967, y = results$all$harvested, lty = 1, col = \"blue\", lwd = 2) legend(\"topright\",   legend = c(\"Population size\", \"Simulated harvest\"),   col = c(\"green\", \"blue\"), lty = c(1, 1), lwd = 2, cex = 0.8 )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"step-3-sample-model-and-generator-parameters-for-each-simulation","dir":"Articles","previous_headings":"Workflow","what":"Step 3: Sample model and generator parameters for each simulation","title":"Workflow example for the Tasmanian thylacine","text":"order explore model parameter space find best models, now generate 20,000 Latin hypercube samples model generator parameters using LatinHypercubeSampler class. ’ll sample parameter uniform distributions across parameter ranges derived Bulte et al. (2003), via model trial runs.","code":"# Create a LHS object lhs_gen <- LatinHypercubeSampler$new()  # Set capacity and growth parameters (as per Bulte et al., 2003) lhs_gen$set_uniform_parameter(\"k_init\", lower = 2100, upper = 3500, decimals = 0) lhs_gen$set_uniform_parameter(\"k_decline\", lower = 0.03, upper = 0.05, decimals = 3) lhs_gen$set_uniform_parameter(\"k_phi\", lower = 0.6, upper = 1.0, decimals = 2) lhs_gen$set_uniform_parameter(\"growth_r\", lower = 0.1875, upper = 0.3125, decimals = 2)  # Set density dependence allee effect parameter lhs_gen$set_uniform_parameter(\"density_allee\", lower = 0, upper = 50, decimals = 1)  # Set bio-economic harvest parameters (as per Bulte et al., 2003) lhs_gen$set_uniform_parameter(\"harvest_ohr\", lower = 0, upper = 0.1, decimals = 3) lhs_gen$set_uniform_parameter(\"harvest_fb\", lower = 0.5, upper = 1.0, decimals = 2) lhs_gen$set_uniform_parameter(\"harvest_w\", lower = 2.625, upper = 4.375, decimals = 1) lhs_gen$set_uniform_parameter(\"harvest_E0\", lower = 18.75, upper = 31.25, decimals = 0) lhs_gen$set_uniform_parameter(\"harvest_q\", lower = 0, upper = 0.005, decimals = 4) lhs_gen$set_uniform_parameter(\"harvest_v1\", lower = 0.015, upper = 0.025, decimals = 3) lhs_gen$set_uniform_parameter(\"harvest_v2\", lower = 0.375, upper = 0.625, decimals = 3)  # Set new spatial parameters for dispersal lhs_gen$set_uniform_parameter(\"dispersal_p\", lower = 0.3, upper = 0.7, decimals = 2) lhs_gen$set_uniform_parameter(\"dispersal_b\", lower = 4, upper = 10, decimals = 1)  # Generate samples sample_data <- lhs_gen$generate_samples(number = SAMPLES, random_seed = 123) head(sample_data) # examine #>   k_init k_decline k_phi growth_r density_allee harvest_ohr harvest_fb #> 1   3451     0.050  0.67     0.27          46.1       0.016       0.64 #> 2   3208     0.048  0.80     0.28           1.0       0.052       0.50 #> 3   2375     0.033  0.96     0.29          30.9       0.072       0.76 #> 4   2733     0.042  0.87     0.25          23.5       0.057       0.63 #> 5   3048     0.040  0.64     0.19          46.4       0.074       0.74 #> 6   3250     0.031  0.76     0.21          38.5       0.081       0.99 #>   harvest_w harvest_E0 harvest_q harvest_v1 harvest_v2 dispersal_p dispersal_b #> 1       3.3         30    0.0025      0.020      0.555        0.59         5.5 #> 2       2.9         23    0.0009      0.017      0.534        0.33         5.1 #> 3       3.8         29    0.0023      0.019      0.406        0.68         8.1 #> 4       4.0         26    0.0008      0.017      0.510        0.54         4.8 #> 5       3.1         21    0.0049      0.019      0.444        0.54         5.0 #> 6       2.9         24    0.0021      0.016      0.463        0.57         6.7 dim(sample_data) # dimensions #> [1] 20000    14"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"step-4-build-a-simulation-manager-to-run-each-simulation","dir":"Articles","previous_headings":"Workflow","what":"Step 4: Build a simulation manager to run each simulation","title":"Workflow example for the Tasmanian thylacine","text":"now setup SimulationManager class manage simulation set (row) sampled parameters. demonstration mode run simulations first two samples. poems package provides example simulation summary data 20,000 samples (used model ensemble selection validation). Note output directory contains R-data result files sample simulation simulation log file.","code":"OUTPUT_DIR <- tempdir() # Build the simulation manager sim_manager <- SimulationManager$new(   sample_data = sample_data,   model_template = model_template,   generators = list(capacity_gen, stage_matrix_gen, dispersal_gen),   parallel_cores = PARALLEL_CORES,   results_dir = OUTPUT_DIR )  # Run the simulations if (DEMONSTRATION) {   sim_manager$sample_data <- sample_data[1:2, ] } run_output <- sim_manager$run() run_output$summary #> [1] \"2 of 2 sample models ran and saved results successfully\" if (DEMONSTRATION) {   dir(OUTPUT_DIR, \"*.RData\") # includes 2 result files } #> [1] \"sample_1_results.RData\"          \"sample_2_results.RData\"          #> [3] \"sample_93_rerun_1_results.RData\" \"sample_93_rerun_2_results.RData\" dir(OUTPUT_DIR, \"*.txt\") # plus simulation log #> [1] \"generation_log.txt\" \"simulation_log.txt\""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"step-5-build-a-results-manager-to-generate-summary-results-metrics","dir":"Articles","previous_headings":"Workflow","what":"Step 5: Build a results manager to generate summary results (metrics)","title":"Workflow example for the Tasmanian thylacine","text":"now collate summary result metrics simulations using ResultsManager class. generate three metrics: 1. Regression slopes total bounty submitted three time intervals. 1. Estimated IBRA bioregion extirpation dates. 1. Estimated Tasmania-wide extinction date. metrics (desired summary matrices) calculated via user-defined functions operating , direct attributes , PopulationResults class objects.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"using-the-populationresults-class","dir":"Articles","previous_headings":"Workflow > Step 5: Build a results manager to generate summary results (metrics)","what":"Using the PopulationResults class","title":"Workflow example for the Tasmanian thylacine","text":"setup test summary metric functions, can load results example simulation run PopulationResults class object. time-series IBRA bioregion bounty values attached results via harvest function. can used calculate regression slopes specified intervals. obtain time-series bioregion abundance values, can include bioregion cell indices result class object (attachment). can use calculate time-series abundance bioregion, thus calculate extirpation times bioregion. use PopulationResults functionality calculating population (cell) abundance slopes (trends) extirpations via result object cloning. clones instead initialized bounty bioregion abundance values. Tasmania-wide extinction time directly available results object.","code":"# Load our results (list) into a PopulationResults object p_results <- PopulationResults$new(   results = results,   ibra_indices = ibra_indices )  # Summary metrics for IBRA bioregions and Tasmania-wide extinction ibra_bounty <- p_results$get_attribute(\"bounty\") # saved in harvest function ibra_bounty_clone <- p_results$new_clone(   results = list(abundance = ibra_bounty),   trend_interval = (1888:1894) - 1887 ) ibra_bounty_clone$all$abundance_trend # 1888-1894 total bounty slope #> [1] -5 ibra_abundance <- t(array(unlist(lapply(   p_results$get_attribute(\"ibra_indices\"),   function(indices) {     colSums(p_results$abundance[indices, ])   } )), c(80, 9))) ibra_abundance_clone <- p_results$new_clone(results = list(abundance = ibra_abundance)) (1888:1967)[ibra_abundance_clone$extirpation] # IBRA extirpation #> [1] 1935 1930 1938 1937 1942 1939 1941 1941 1939 (1888:1967)[p_results$all$extirpation] # total extinction #> [1] 1942"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"generating-summary-metrics-and-matrices","dir":"Articles","previous_headings":"Workflow > Step 5: Build a results manager to generate summary results (metrics)","what":"Generating summary metrics and matrices","title":"Workflow example for the Tasmanian thylacine","text":"’re happy derive summary metrics (matrices) via PopulationResults class, can setup results manager generate metrics matrix (rows) sample simulation results (file). Note passing simulation manager initializing results manager copies previous setup (sample data, output directory, etc.). bounty regression slope IBRA bioregion extirpation metrics can combined single metrics calculating square root mean square error (RMSE) simulated metrics known derived target values, confidence intervals (CI), time interval bioregion. Thus targets RMSE metrics (step 6) zero. can calculate combined (RMSE) metrics using results manager including (attaching) target values/CI results object. However, wish retain flexibility combine individual metrics, deal NA values (e.g. extirpation) step 6, can alternatively store metrics slope interval bioregion generated matrix rows calculate difference targets later. demonstrate approaches, although matrix approach requires disk space. demonstration mode, generate metrics first two samples. load pre-generated example summaries 20,000 sample simulations, provided poems package prior validation ensemble selection (step 6). Note summary matrix list collates specified result simulation single row matrix. Thus columns extirpation matrix represent extirpation time population cell, columns total bounty IBRA bounty matrices represent total bounty 80 simulation time steps, IBRA bioregion respectively. Similarly, columns bounty slope matrix represent regression slopes three time intervals, IBRA extirpation matrix column nine bioregions.","code":"# Set targets for our summary metrics (used to calculate combined metric errors) slope_intervals <- c(\"1888-1894\", \"1895-1901\", \"1902-1909\") targets <- list(   bounty_slope = array(c(2.36, 3.25, -17.71), dimnames = list(slope_intervals)),   ibra_extirpation = array(     c(       c(NA, NA), c(1934, 1934), c(1912, 1919), c(1921, 1940),       c(1936, 1938), c(1935, 1935), c(1934, 1942),       c(1934, 1934), c(1932, 1932)     ), c(2, 9),     dimnames = list(c(\"lower\", \"upper\"), tasmania_ibra_data$abbr)   ),   total_extinction = c(lower = 1936, upper = 1942) # CI )  # Create a results manager for summary metrics and matrices results_manager <- ResultsManager$new(   simulation_manager = sim_manager,   simulation_results = PopulationResults$new(     ibra_indices = ibra_indices, # attachments     targets = targets,     extirp_NA_replace = 1968   ),   result_attachment_functions = list( # attached for multiple use     bounty_slope = function(results) { # via results object cloning       bounty_slope <- array(NA, 3)       ibra_bounty <- results$get_attribute(\"bounty\") # saved in harvest function       ibra_bounty_clone <- results$new_clone(         results = list(abundance = ibra_bounty),         trend_interval = (1888:1894) - 1887       )       bounty_slope[1] <- ibra_bounty_clone$all$abundance_trend       ibra_bounty_clone <- results$new_clone(         results = list(abundance = ibra_bounty),         trend_interval = (1895:1901) - 1887       )       bounty_slope[2] <- ibra_bounty_clone$all$abundance_trend       ibra_bounty_clone <- results$new_clone(         results = list(abundance = ibra_bounty),         trend_interval = (1902:1909) - 1887       )       bounty_slope[3] <- ibra_bounty_clone$all$abundance_trend       bounty_slope     },     ibra_extirpation = function(results) { # via results object cloning       ibra_abundance_clone <- results$new_clone(results = list(         abundance = t(array(unlist(lapply(           results$get_attribute(\"ibra_indices\"),           function(indices) {             colSums(results$abundance[indices, ])           }         )), c(80, 9)))       ))       (1888:1967)[ibra_abundance_clone$extirpation]     }   ),   summary_metrics = c(     \"bounty_slope_error\", \"ibra_extirpation_error\",     \"total_extinction\"   ),   summary_matrices = c(     \"extirpation\", \"total_bounty\", \"ibra_bounty\",     \"bounty_slope\", \"ibra_extirpation\"   ),   summary_functions = list(     # Summary metrics     bounty_slope_error = function(results) { # RMSE       sqrt(mean((results$get_attribute(\"targets\")$bounty_slope -         results$get_attribute(\"bounty_slope\"))^2))     },     ibra_extirpation_error = function(results) { # RMSE with NAs replaced       ibra_extirpation <- results$get_attribute(\"ibra_extirpation\")       ibra_extirpation[is.na(ibra_extirpation)] <-         results$get_attribute(\"extirp_NA_replace\")       target_CI <- results$get_attribute(\"targets\")$ibra_extirpation       sqrt(mean(         ((ibra_extirpation < target_CI[1, ]) * (ibra_extirpation - target_CI[1, ]) +           (ibra_extirpation > target_CI[2, ]) * (ibra_extirpation - target_CI[2, ]))^2,         na.rm = TRUE       ))     },     total_extinction = function(results) {       (1888:1967)[results$all$extirpation]     },     # Summary matrices     extirpation = function(results) { # for later use       (1888:1967)[results$extirpation]     },     total_bounty = function(results) { # for later use       colSums(results$get_attribute(\"bounty\"))     },     ibra_bounty = function(results) { # for later use       rowSums(results$get_attribute(\"bounty\"))     },     bounty_slope = function(results) { # calculate RMSE later       results$get_attribute(\"bounty_slope\")     },     ibra_extirpation = function(results) { # calculate RMSE later       results$get_attribute(\"ibra_extirpation\")     }   ),   parallel_cores = PARALLEL_CORES )  # Generate the summary metrics and matrices gen_output <- results_manager$generate() gen_output$summary #> [1] \"2 of 2 summary metrics/matrices generated from sample results successfully\" dir(OUTPUT_DIR, \"*.txt\") # plus generation log #> [1] \"generation_log.txt\" \"simulation_log.txt\" summary_metric_data <- results_manager$summary_metric_data summary_matrix_list <- results_manager$summary_matrix_list head(summary_metric_data) # examine #>   index bounty_slope_error ibra_extirpation_error total_extinction #> 1     1          11.271672               12.03121             1950 #> 2     2           9.343379               32.79672               NA lapply(summary_matrix_list, dim) # dimensions #> $extirpation #> [1]   2 795 #>  #> $total_bounty #> [1]  2 80 #>  #> $ibra_bounty #> [1] 2 9 #>  #> $bounty_slope #> [1] 2 3 #>  #> $ibra_extirpation #> [1] 2 9 head(summary_matrix_list$bounty_slope) # examine #>       [,1]      [,2]      [,3] #> [1,]  1.75 -9.666667 -3.083333 #> [2,] -1.00 -2.600000 -3.000000 head(summary_matrix_list$ibra_extirpation) # examine #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] #> [1,] 1939 1941 1941 1939 1950 1945 1946 1948 1945 #> [2,] 1952 1954 1967   NA   NA   NA   NA   NA   NA"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"summary-metric-refinement","dir":"Articles","previous_headings":"Workflow > Step 5: Build a results manager to generate summary results (metrics)","what":"Summary metric refinement","title":"Workflow example for the Tasmanian thylacine","text":"can now collate refine summary metrics wish utilize validation ensemble model selection (step 6). Although already calculated RMSE metrics bounty regression slopes IBRA extirpation dates, refine utilizing uncombined values corresponding matrices. reproduce metrics two samples demonstration purposes (demonstration mode), loading full pre-generated example metrics summary set. also calculate error target confidence interval (CI) simulated total extinction dates full metrics set. also replaced NA values, indicating population persisted, calculating error total extinction date (target CI), however defer demonstrate NA replacement functionality validator next step.","code":"# Demonstrate calculating RMSE metrics from matrices if (DEMONSTRATION) { # Calculate RMSE for bounty slopes   bounty_slope_error2 <- sqrt(rowMeans((summary_matrix_list$bounty_slope -     matrix(targets$bounty_slope,       nrow = 2,       ncol = 3, byrow = TRUE     ))^2))    cbind(     bounty_slope_error = summary_metric_data$bounty_slope_error,     bounty_slope_error2   ) # examine } #>      bounty_slope_error bounty_slope_error2 #> [1,]          11.271672           11.271672 #> [2,]           9.343379            9.343379 if (DEMONSTRATION) { # Calculate RMSE for IBRA extirpation   ibra_extirpation <- summary_matrix_list$ibra_extirpation   ibra_extirpation[is.na(ibra_extirpation)] <- 1968   target_CI <- array(targets$ibra_extirpation, c(dim(targets$ibra_extirpation), 2))   ibra_extirpation_error2 <- sqrt(rowMeans(     ((ibra_extirpation < t(target_CI[1, , ])) * (ibra_extirpation - t(target_CI[1, , ])) +       (ibra_extirpation > t(target_CI[2, , ])) * (ibra_extirpation - t(target_CI[2, , ])))^2,     na.rm = TRUE   ))   cbind(     ibra_extirpation_error = summary_metric_data$ibra_extirpation_error,     ibra_extirpation_error2   ) # examine } #>      ibra_extirpation_error ibra_extirpation_error2 #> [1,]               12.03121                12.03121 #> [2,]               32.79672                32.79672  # Load full example metrics if (DEMONSTRATION) {   data(thylacine_example_metrics)   dim(thylacine_example_metrics) # dimensions   summary_metric_data <- thylacine_example_metrics }  # Calculate the error from the CI of total extinction extinct <- summary_metric_data$total_extinction target_CI <- targets$total_extinction summary_metric_data$total_extinction_error <-   ((extinct < target_CI[1]) * (extinct - target_CI[1]) +     (extinct > target_CI[2]) * (extinct - target_CI[2])) head(summary_metric_data) # examine #>   index bounty_slope_error ibra_extirpation_error total_extinction #> 1     1           11.66632              22.597013             1961 #> 2     2           10.00490              31.334885               NA #> 3     3           17.04603               9.480243             1925 #> 4     4           10.35301              25.763346               NA #> 5     5           20.13609              31.040296             1902 #> 6     6           21.62111              22.605309             1913 #>   total_extinction_error #> 1                     19 #> 2                     NA #> 3                    -11 #> 4                     NA #> 5                    -34 #> 6                    -23"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"step-6-build-a-validator-to-select-a-model-ensemble","dir":"Articles","previous_headings":"Workflow","what":"Step 6: Build a validator to select a model ensemble","title":"Workflow example for the Tasmanian thylacine","text":"now validate select model ensemble via Validator class, default utilizes approximate Bayesian computation (ABC) approach (Beaumont, Zhang, & Balding, 2002) provided abc library (Csillery et al., 2015). use default configuration select best 200 models (via tolerance 0.01). targets selecting best models zero RMSE metrics bounty slope, IBRA extirpation, total extinction. Note models simulated thylacine persist end simulation (1967), total extinction value NA. Since abc function requires finite values , use non_finite_replacements attribute validator replace NA values RMSE (based target CI) corresponding 1968. Stronger penalties applied desired. Note validator generates diagnostics (per abc documentation) PDF file configured output directory. can configure directory, locating default output directory generated via tempdir() can tedious. Note selected model (via index sample data frame) corresponding weight value, indicative congruence model’s summary metrics corresponding target patterns.","code":"# Create a validator for selecting the 'best' example models validator <- Validator$new(   simulation_parameters = sample_data,   simulation_summary_metrics = summary_metric_data[c(     \"bounty_slope_error\",     \"ibra_extirpation_error\",     \"total_extinction_error\"   )],   observed_metric_targets = c(     bounty_slope_error = 0,     ibra_extirpation_error = 0,     total_extinction_error = 0   ),   non_finite_replacements = list(total_extinction_error = function(x) {     (1968 - targets$total_extinction[2])   }),   output_dir = OUTPUT_DIR ) suppressWarnings(validator$run(   tolerance = 0.01, sizenet = 1, lambda = 0.0001,   output_diagnostics = TRUE )) #> 12345678910 #> 12345678910 dir(OUTPUT_DIR, \"*.pdf\") # plus validation diagnostics (see abc library documentation) #> [1] \"validation_diagnostics.pdf\" head(validator$selected_simulations) # examine #>   index     weight #> 1    93 0.02871514 #> 2    99 0.08332668 #> 3   164 0.21062364 #> 4   248 0.11186737 #> 5   309 0.43248925 #> 6   337 0.15984413 dim(validator$selected_simulations) # dimensions #> [1] 200   2 selected_indices <- validator$selected_simulations$index selected_weights <- validator$selected_simulations$weight"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"selected-model-ensemble","dir":"Articles","previous_headings":"Workflow","what":"Selected model ensemble","title":"Workflow example for the Tasmanian thylacine","text":"Now selected model ensemble can examine: well simulations hitting validation targets; model parameters influential ensemble selection; impact model stochasticity ensemble selection. can also verify model via historic bounty record data explicitly utilized validation model selection. Lastly, can use model ensemble examine spatio-temporal extirpation pattern simulated thylacine decline.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"model-ensemble-summary-metrics","dir":"Articles","previous_headings":"Workflow > Selected model ensemble","what":"Model ensemble summary metrics","title":"Workflow example for the Tasmanian thylacine","text":"examine well individual (uncombined) metric targets matched, let’s now plot distributions summary metrics selected model ensemble, well full 20,000 model simulations. demonstration mode, load pre-generated example matrices, provided poems package, containing bounty slope IBRA bioregion extirpations 20,000 sample simulations. example matrices also include cell extirpation dates, time-series IBRA distribution total bounty, use later. plot chunk unnamed-chunk-23 plot see bounty slopes 20,000 sample models align well bounty slope targets, however, bounty slopes models reasonably well matching targets. models selected. Generally, distribution full sample set facilitate model congruence targets, suggesting harvest function may inadequate generating expected temporal contour total thylacine bounty. inadequacy becomes clearer later, plot total bounty across time model ensemble. plot chunk unnamed-chunk-24 see simulated extirpation dates individual IBRA bioregions vary congruence target values, strong matches, including total Tasmania-wide extirpation date. results may contribute insight degree sampled model harvest parameters can influence spatial dynamics simulated thylacine decline.","code":"# Load pre-generated example matrices if (DEMONSTRATION) {   data(thylacine_example_matrices)   summary_matrix_list <- thylacine_example_matrices } else { # cell extirpation and total/ibra bounty for selected samples only   summary_matrix_list$extirpation <- summary_matrix_list$extirpation[selected_indices, ]   summary_matrix_list$total_bounty <- summary_matrix_list$total_bounty[selected_indices, ]   summary_matrix_list$ibra_bounty <- summary_matrix_list$ibra_bounty[selected_indices, ] } lapply(summary_matrix_list, dim) # dimensions #> $extirpation #> [1] 200 795 #>  #> $total_bounty #> [1] 200  80 #>  #> $ibra_bounty #> [1] 200   9 #>  #> $bounty_slope #> [1] 20000     3 #>  #> $ibra_extirpation #> [1] 20000     9  # Plot the simulation, targets, and selected metrics for bounty slopes bounty_slope <- summary_matrix_list$bounty_slope colnames(bounty_slope) <- slope_intervals graphics::boxplot(bounty_slope,   border = rep(\"gray\", 3), outline = FALSE, range = 0,   col = NULL, ylim = c(-35, 20), main = \"Thylacine bounty slope\",   xlab = \"Slope interval (years)\", ylab = \"Bounty regression slope\" ) graphics::boxplot(cbind(bounty_slope[selected_indices, ], NA), # NA for relative width   border = rep(\"blue\", 3), width = c(rep(0.5, 3), 1), outline = FALSE,   range = 0, add = TRUE, col = NULL ) graphics::points(x = 1:3, y = targets$bounty_slope, col = \"red\", pch = 15) legend(\"topright\", c(\"All\", \"Target\", \"Selected\"),   fill = c(\"gray\", \"red\", \"blue\"),   border = NA, cex = 0.8 ) # Plot the simulation, targets, and selected metrics for extirpation extirpation <- cbind(   summary_matrix_list$ibra_extirpation,   summary_metric_data$total_extinction ) colnames(extirpation) <- c(as.character(tasmania_ibra_data$abbr), \"Total\") graphics::boxplot(extirpation[, 10:1],   border = rep(\"gray\", 3), horizontal = TRUE,   outline = FALSE, range = 0, col = NULL, ylim = c(1888, 1968),   main = \"Thylacine model IBRA extirpation and total extinction\",   xlim = c(0.5, 11), xlab = \"Extirpation/extinction time (year)\",   ylab = \"IBRA bioregion/Tasmania-wide total\" ) graphics::boxplot(cbind(extirpation[selected_indices, 10:1], NA),   horizontal = TRUE,   ylim = c(1888, 1968), border = rep(\"blue\", 10),   width = c(rep(0.5, 10), 1), outline = FALSE, range = 0,   add = TRUE, col = NULL ) for (i in 1:9) {   graphics::points(     x = targets$ibra_extirpation[, i], y = rep(11 - i, 2),     col = \"red\", pch = 15   )   graphics::lines(     x = targets$ibra_extirpation[, i], y = rep(11 - i, 2),     col = \"red\", lwd = 2   ) } graphics::points(x = targets$total_extinction, y = c(1, 1), col = \"red\", pch = 15) graphics::lines(x = targets$total_extinction, y = c(1, 1), col = \"red\", lwd = 2) legend(\"topright\", c(\"All\", \"Target (CI)\", \"Selected\"),   fill = c(\"gray\", \"red\", \"blue\"),   border = NA, cex = 0.8 )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"model-ensemble-parameters","dir":"Articles","previous_headings":"Workflow > Selected model ensemble","what":"Model ensemble parameters","title":"Workflow example for the Tasmanian thylacine","text":"can now examine features selected model ensemble analyze properties adequacy. can plot distribution 200 selected model parameters comparison (uniform) distribution full 20,000 simulated models. examine two notable example parameters: density Allee effect harvest catchability. plot chunk unnamed-chunk-25 plot chunk unnamed-chunk-25 first plot note general reliance model Allee effect matching extirpation/extinction targets (non-persistence general). second plot illustrates validation/selection process “tuned” harvest catchability parameter. can also explore relationships selected model parameters, thus identifying parameter combinations contributed selected model ensemble’s congruence metric targets. examine one notable correlation selected model opportunistic harvest rate catchability parameter. plot chunk unnamed-chunk-26 diagnostic output (PDF file output directory), can also examine posterior distributions 200 selected model parameters relative prior distributions. can give us insight influence model parameter model selection. diagnostics plots can analyze assess adequacy model /summary metrics. may choose refine model parameter ranges summary metrics. can also choose simulate extensive parameter space, select fewer models via validator’s tolerance parameter, revisit model structure. may also wish examine role (demographic) stochasticity played model selection.","code":"# Allee effect hist(sample_data$density_allee,   breaks = 30, main = \"Model ensemble Allee effect\",   xlab = \"Allee effect\", ylim = c(0, 1000), col = \"gray\", yaxt = \"n\" ) hist(rep(sample_data$density_allee[selected_indices], 20), breaks = 20, col = \"blue\", add = TRUE) legend(\"topright\", c(\"All\", \"Selected\"), fill = c(\"gray\", \"blue\"), cex = 0.8) # Harvest catchability hist(sample_data$harvest_q,   breaks = 30, main = \"Model ensemble harvest catchability\",   xlab = \"Harvest catchability (q)\", col = \"gray\" ) # , yaxt = \"n\") hist(rep(sample_data$harvest_q[selected_indices], 20), breaks = 20, col = \"blue\", add = TRUE) legend(\"topright\", c(\"All\", \"Selected\"), fill = c(\"gray\", \"blue\"), cex = 0.8) plot(   x = sample_data$harvest_ohr, y = sample_data$harvest_q, ylim = c(0, 0.0055),   xlab = \"Opportunistic harvest rate\", ylab = \"Bio-economic harvest catchability\",   main = \"Opportunistic harvest vs. catchability\", col = \"gray\" ) points(   x = sample_data$harvest_ohr[selected_indices],   y = sample_data$harvest_q[selected_indices], col = \"blue\", pch = 3 ) graphics::legend(\"topright\",   legend = c(\"All samples\", \"Selected\"),   col = c(\"gray\", \"blue\"), pch = c(1, 3), cex = 0.8 )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"model-ensemble-stochasticity","dir":"Articles","previous_headings":"Workflow > Selected model ensemble","what":"Model ensemble stochasticity","title":"Workflow example for the Tasmanian thylacine","text":"now re-run selected 200 models ten times, examine impact demographic stochasticity summary metrics. , demonstration mode, run first two re-run simulations, load example re-run summary metrics matrices provided poems package. Note order override existing results files can either change output directory, alternatively, , change naming output files via results_filename_attributes attribute simulation results managers. Note output directory contains new R-data result files sample rerun simulation, named via unique combination sample data frame attributes. Now can compare distributions metrics , selected, re-run models better assess impact stochasticity. Note simulations persist represented via extirpation date 1968. plot chunk unnamed-chunk-28 plot chunk unnamed-chunk-28 plot chunk unnamed-chunk-28 plots can observe stochastic processes operating model impact model validation ensemble selection, since distributions metrics slightly widened model ensemble replicate re-runs. However, retained proximity targets well. analyze effects stochasticity exploring approaches identifying selected models congruent target metrics frequently.","code":"# Run replicates of 10 for each selected model sample_data_rerun <- cbind(sample = 1:nrow(sample_data), sample_data) sample_data_rerun <- cbind(sample_data_rerun[rep(selected_indices, each = 10), ],   rerun = rep(1:10, length(selected_indices)) ) head(sample_data_rerun) # examine #>      sample k_init k_decline k_phi growth_r density_allee harvest_ohr #> 93       93   3153     0.042  0.73     0.29          43.2       0.072 #> 93.1     93   3153     0.042  0.73     0.29          43.2       0.072 #> 93.2     93   3153     0.042  0.73     0.29          43.2       0.072 #> 93.3     93   3153     0.042  0.73     0.29          43.2       0.072 #> 93.4     93   3153     0.042  0.73     0.29          43.2       0.072 #> 93.5     93   3153     0.042  0.73     0.29          43.2       0.072 #>      harvest_fb harvest_w harvest_E0 harvest_q harvest_v1 harvest_v2 #> 93         0.66       3.7         28    0.0014      0.016      0.414 #> 93.1       0.66       3.7         28    0.0014      0.016      0.414 #> 93.2       0.66       3.7         28    0.0014      0.016      0.414 #> 93.3       0.66       3.7         28    0.0014      0.016      0.414 #> 93.4       0.66       3.7         28    0.0014      0.016      0.414 #> 93.5       0.66       3.7         28    0.0014      0.016      0.414 #>      dispersal_p dispersal_b rerun #> 93          0.39         8.4     1 #> 93.1        0.39         8.4     2 #> 93.2        0.39         8.4     3 #> 93.3        0.39         8.4     4 #> 93.4        0.39         8.4     5 #> 93.5        0.39         8.4     6 if (DEMONSTRATION) {   sim_manager$sample_data <- sample_data_rerun[1:2, ] } else {   sim_manager$sample_data <- sample_data_rerun } sim_manager$results_filename_attributes <- c(\"sample\", \"rerun\") run_output <- sim_manager$run() run_output$summary #> [1] \"2 of 2 sample models ran and saved results successfully\" if (DEMONSTRATION) {   dir(OUTPUT_DIR, \"*.RData\") # includes 2 new result files } #> [1] \"sample_1_results.RData\"          \"sample_2_results.RData\"          #> [3] \"sample_93_rerun_1_results.RData\" \"sample_93_rerun_2_results.RData\"  # Collate summary metrics for re-runs if (DEMONSTRATION) {   results_manager$sample_data <- sample_data_rerun[1:2, ] } else {   results_manager$sample_data <- sample_data_rerun } results_manager$summary_matrices <- c(\"bounty_slope\", \"ibra_extirpation\") results_manager$results_filename_attributes <- c(\"sample\", \"rerun\") gen_output <- results_manager$generate() gen_output$summary #> [1] \"2 of 2 summary metrics/matrices generated from sample results successfully\" if (DEMONSTRATION) {   results_manager$summary_metric_data # examine demo } #>   index bounty_slope_error ibra_extirpation_error total_extinction #> 1     1           11.61502               5.000000             1933 #> 2     2           10.30186               4.168333             1933 if (DEMONSTRATION) { # load full example metrics and (some) matrices   data(thylacine_example_metrics_rerun)   summary_metric_data_rerun <- thylacine_example_metrics_rerun   data(thylacine_example_matrices_rerun)   summary_matrix_list_rerun <- thylacine_example_matrices_rerun } else {   summary_metric_data_rerun <- results_manager$summary_metric_data   summary_matrix_list_rerun <- results_manager$summary_matrix_list } head(summary_metric_data_rerun) # examine #>   index bounty_slope_error ibra_extirpation_error total_extinction #> 1     1           10.51599               7.516648             1929 #> 2     2           11.47151               4.227884             1934 #> 3     3           11.57192               4.358899             1934 #> 4     4           11.42602               5.809475             1938 #> 5     5           11.36964               6.304760             1930 #> 6     6           12.07262               5.937171             1933 dim(summary_metric_data_rerun) # dimensions #> [1] 2000    4 lapply(summary_matrix_list_rerun, dim) # dimensions #> $bounty_slope #> [1] 2000    3 #>  #> $ibra_extirpation #> [1] 2000    9 # Bounty slope error bounty_slope_error <- summary_metric_data$bounty_slope_error hist(bounty_slope_error,   breaks = 140, main = \"Thylacine bounty slope error\",   xlim = c(0, 50), xlab = \"Bounty slope RMSE\", col = \"gray\", yaxt = \"n\" ) bounty_slope_error_r <- summary_metric_data_rerun$bounty_slope_error hist(rep(bounty_slope_error_r, 2), breaks = 20, col = \"gold3\", add = TRUE) hist(rep(bounty_slope_error[selected_indices], 5),   breaks = 12,   col = \"blue\", add = TRUE ) lines(x = rep(0, 2), y = c(0, 10000), col = \"red\", lwd = 2) legend(\"topright\", c(\"All\", \"Target\", \"Selected\", \"Replicates\"),   fill = c(\"gray\", \"red\", \"blue\", \"gold3\"), cex = 0.8 ) # IBRA extirpation error ibra_extirpation_error <- summary_metric_data$ibra_extirpation_error hist(bounty_slope_error,   breaks = 140, main = \"Thylacine IBRA extirpation error\",   xlim = c(0, 50), xlab = \"IBRA extirpation RMSE\", col = \"grey\", yaxt = \"n\" ) ibra_extirpation_error_r <- summary_metric_data_rerun$ibra_extirpation_error hist(rep(ibra_extirpation_error_r, 2), breaks = 50, col = \"gold3\", add = TRUE) hist(rep(ibra_extirpation_error[selected_indices], 5),   breaks = 20, col = \"blue\",   add = TRUE ) lines(x = rep(0, 2), y = c(0, 10000), col = \"red\", lwd = 2) legend(\"topright\", c(\"All\", \"Target\", \"Selected\", \"Replicates\"),   fill = c(\"grey\", \"red\", \"blue\", \"gold3\"), cex = 0.8 ) # Extinction time extinction_time <- summary_metric_data$total_extinction persistent_number <- length(which(is.na(extinction_time))) extinction_time_finite <- extinction_time[!is.na(extinction_time)] extinction_time_modified <-   hist(c(extinction_time_finite, rep(1968, round(persistent_number / 10))),     breaks = 81,     main = \"Thylacine extinction\", xlim = c(1888, 1968),     xlab = \"Extinction time (year)\", col = \"gray40\", yaxt = \"n\"   ) hist(extinction_time_finite, breaks = 81, col = \"gray\", add = TRUE) extinction_time_rerun <- summary_metric_data_rerun$total_extinction extinction_time_rerun[which(is.na(extinction_time_rerun))] <- 1968 hist(rep(extinction_time_rerun, 2), breaks = 50, col = \"gold3\", add = TRUE) hist(rep(extinction_time[selected_indices], 5), breaks = 28, col = \"blue\", add = TRUE) lines(x = rep(1931, 2), y = c(0, 10000), col = \"red\", lwd = 2) lines(x = rep(1937, 2), y = c(0, 10000), col = \"red\", lwd = 2) legend(\"topleft\", c(\"All\", \"(persistent/10)\", \"Target (CI)\", \"Selected\", \"Replicates\"),   fill = c(\"gray\", \"gray40\", \"red\", \"blue\", \"gold3\"), cex = 0.8 )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"model-ensemble-verification","dir":"Articles","previous_headings":"Workflow > Selected model ensemble","what":"Model ensemble verification","title":"Workflow example for the Tasmanian thylacine","text":"can verify adequacy model examining well produces observed data patterns (explicitly) utilized model calibration, validation selection stages. slopes bounty used validating selecting model ensemble, actual bounty magnitudes . Let’s now use model ensemble compare simulated total bounty total historical (time-series) records across time (provided poems package). use selected model weights calculate weighted average simulated bounty submitted selected ensemble replicates. plot chunk unnamed-chunk-29 can also compare simulated total bounty submitted, across IBRA bioregions Tasmania-wide, historical bounty record. plot chunk unnamed-chunk-30 thorough statistical analyzes verify model ensemble. However, comparative plots thylacine bounty harvests gained insight well ensemble model matches bounty record temporally spatially. thus devise ways improve future versions model, including developing harvest function mechanisms parameterization better model spatio-temporal responses bounty reward. advances possibly gain better insights spatio-temporal dynamics thylacine decline.","code":"# Compare weighted ensemble model to actual historical bounty time-series data(thylacine_bounty_record) selected_bounty <- summary_matrix_list$total_bounty weighted_bounty <- colSums(selected_bounty * selected_weights / sum(selected_weights))  # Plot the simulated and actual bounty plot(   x = 1888:1909, y = weighted_bounty[1:22], xlab = \"Year\",   ylab = \"Number of thylacines\", main = \"Thylacine bounty submitted\",   ylim = c(0, 200), type = \"l\", col = \"blue\", lwd = 2 ) lines(x = 1888:1909, y = thylacine_bounty_record$Total, lty = 1, col = \"red\", lwd = 2) legend(\"topright\",   legend = c(\"Model ensemble bounty\", \"Actual bounty\"),   col = c(\"blue\", \"red\"), lty = c(1, 1), lwd = 2, cex = 0.8 ) # Compare weighted ensemble model to actual historical bioregion bounty values selected_bounty <- cbind(   summary_matrix_list$ibra_bounty,   rowSums(summary_matrix_list$ibra_bounty) ) weighted_bounty <- colSums(selected_bounty * selected_weights / sum(selected_weights)) combined_bounty <- rbind(   weighted_bounty,   actual_bounty <- colSums(thylacine_bounty_record[, c(3:11, 2)]) ) combined_bounty[, 10] <- combined_bounty[, 10] / 2  # Comparative plot of simulated and historic IBRA/total bounty barplot(combined_bounty,   xlab = \"IBRA bioregion/Tasmania-wide total\", beside = TRUE,   ylab = \"Number of thylacines\", col = c(\"blue\", \"red\"),   main = \"Thylacine bounty submitted by region\", border = NA ) legend(\"topleft\", c(\"Model ensemble bounty\", \"Actual bounty\", \"Note: Total/2\"),   fill = c(\"blue\", \"red\", NA), border = NA, cex = 0.8 )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"model-ensemble-usage","dir":"Articles","previous_headings":"Workflow > Selected model ensemble","what":"Model ensemble usage","title":"Workflow example for the Tasmanian thylacine","text":"final demonstration let’s see can use ensemble examine simulated spatio-temporal extirpation pattern. plot chunk unnamed-chunk-31","code":"# Calculate the weighted cell extirpation dates selected_extirp <- summary_matrix_list$extirpation weighted_extirpation <- colSums(selected_extirp * selected_weights / sum(selected_weights))  # Plot the weighted cell extirpation dates extirpation_raster <- region$raster_from_values(weighted_extirpation) raster::plot(extirpation_raster,   main = \"Thylacine model ensemble extirpation\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   zlim = c(1888, 1940), col = grDevices::heat.colors(100), colNA = \"blue\" )"},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"summary","dir":"Articles","previous_headings":"","what":"Summary","title":"Workflow example for the Tasmanian thylacine","text":"Building utilizing model ensemble thylacine provided relatively advanced demonstration poems 6-step workflow modules. First constructed customized model user-defined density dependence harvest functions. used functionality dynamically generating stage matrices, initial abundances, carrying capacities, dispersal rates. generated sample model parameters via Latin hypercube sampling. ran sampled models via poems simulation manager. collated calculated summary metrics, based functions defined within results manager. , fed sample model parameters, summary metrics, target values metrics (derived historical bounty sighting records), ABC validator, ran select model ensemble. examined well model ensemble matched target metrics, analyzed influence model parameters stochasticity ensemble selection. also verified model via bounty records see well matched patterns explicitly used model calibration, validation ensemble selection. Applying poems workflow thylacine resulted selection models best reconstructed range extinction dynamics species, given validation targets accessible model structure. Simulations bounty harvest matched historical records well, particularly Tasmania-wide level. Simulated extirpation pattern time extinction matched known estimates thylacine fair--good accuracy. model developments include changes way harvesters respond bounty reward, better match historical bounty changed time space. running steps vignette’s workflow, explored much functionality offered poems. aim feature-rich example provide guide building customized models poems, can explore spatio-temporal population dynamics species interest research practice. Thank :-)","code":""},{"path":"https://globalecologylab.github.io/poems/articles/thylacine_example.html","id":"references","dir":"Articles","previous_headings":"","what":"References","title":"Workflow example for the Tasmanian thylacine","text":"Allee, W. C. (1931). Animal Aggregations: Study General Sociology. University Chicago Press. Beaumont, M. ., Zhang, W., & Balding, D. J. (2002). ‘Approximate Bayesian computation population genetics’. Genetics, vol. 162, . 4, pp, 2025–2035. Bulte, E. H., Horan, R. D., & Shogren, J. F. (2003). ‘Tasmanian tiger extinct? biological–economic re-evaluation’, Ecological Economics, vol. 45, . 2, pp. 271–279. Csillery, K., Lemaire L., Francois O., & Blum M. (2015). ‘abc: Tools Approximate Bayesian Computation (ABC)’. R package version 2.1. Retrieved https://CRAN.R-project.org/package=abc Grimm, V., Revilla, E., Berger, U., Jeltsch, F., Mooij, W. M., Railsback, S. F., Thulke, H. H., Weiner, J., Wiegand, T., DeAngelis, D. L., (2005). ‘Pattern-Oriented Modeling Agent-Based Complex Systems: Lessons Ecology’. Science vol. 310, . 5750, pp. 987–991. Guiler, E. (1985). Thylacine: Tragedy Tasmanian Tiger. Oxford University Press, Melbourne. Guiler E. R. & Godard P. (1998). Tasmanian tiger: lesson learnt. Abrolhos Publishing, Perth, Western Australia. Ricker, W. E. (1954). ‘Stock recruitment’. Journal Fisheries Research Board Canada, vol. 11, . 5, pp. 559-623.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"setup","dir":"Articles","previous_headings":"","what":"Setup","title":"Population introduction via translocation functions","text":", begin loading necessary packages.","code":"library(poems) library(raster) library(sf) library(scales) library(stringi) # for randomly generating file names.  # function to round to any arbitrary value round_any <- function(x, accuracy, f = round) {   f(x / accuracy) * accuracy }"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"step-1-build-the-population-model-for-the-study-region","dir":"Articles","previous_headings":"","what":"Step 1: Build the population model for the study region","title":"Population introduction via translocation functions","text":"Create model template using PopulationModel class. model spatially explicit, defined using Region class. addition make model temporally explicit can introduce populations defined time steps.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"study-region","dir":"Articles","previous_headings":"Step 1: Build the population model for the study region","what":"Study region","title":"Population introduction via translocation functions","text":"First, ’ll define study region. example, utilise raster::RasterLayer() Thylacine habitat suitability. plot chunk unnamed-chunk-2 Now can define poems::Region: plot chunk unnamed-chunk-3","code":"# Region raster data(tasmania_raster) tasmania_raster #> class      : RasterLayer  #> dimensions : 32, 40, 1280  (nrow, ncol, ncell) #> resolution : 0.1, 0.1  (x, y) #> extent     : 144.5, 148.5, -43.8025, -40.6025  (xmin, xmax, ymin, ymax) #> crs        : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs  #> source     : memory #> names      : layer  #> values     : 1, 1  (min, max)  # Equal area projection tasPrj <- 'PROJCS[\"Tasmania_Lambert_Azimuthal\",                  GEOGCS[\"GCS_WGS_1984\",                         DATUM[\"D_WGS_1984\",                               SPHEROID[\"WGS_1984\",6378137.0,298.257223563]],                         PRIMEM[\"Greenwich\",0.0],                         UNIT[\"Degree\",0.0174532925199433]],                  PROJECTION[\"Lambert_Azimuthal_Equal_Area\"],                  PARAMETER[\"False_Easting\",0.0],                  PARAMETER[\"False_Northing\",0.0],                  PARAMETER[\"Central_Meridian\",147],                  PARAMETER[\"Latitude_Of_Origin\",-42.2],                  UNIT[\"Meter\",1.0]]'  # Template raster to project to tempExt <- projectExtent(tasmania_raster, tasPrj) res(tempExt) <- 10000 # 10 km resolution tempExt #> class      : RasterLayer  #> dimensions : 36, 34, 1224  (nrow, ncol, ncell) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  # Project the region tasmania_raster <- projectRaster(tasmania_raster, tempExt,   method = \"ngb\" ) plot(tasmania_raster,   main = \"Tasmania raster\",   legend = FALSE,   col = \"#2E8B57\", colNA = \"grey75\" ) # Tasmania study region (735 non-NA cells stored in the order shown) # region <- Region$new(template_raster = tasmania_raster) region$region_raster #> class      : RasterLayer  #> dimensions : 36, 34, 1224  (nrow, ncol, ncell) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer  #> values     : 1, 735  (min, max)  # Establish HS template and starting location # # This will be our initial introduction point int_ll <- sf_project(   from = \"EPSG:4326\",   to = tasPrj,   pts = cbind(146.44, -41.18) ) int_point <- region$region_indices[   which(region$region_indices ==     cellFromXY(tasmania_raster, xy = int_ll)) ]  # row which corresponds to initial introduction site int_index <- which(region$region_indices == int_point) # 114  # plot of region, and introduction locations plot(region$region_raster,   main = \"Tasmanian study region (cell indices)\",   colNA = \"grey75\",   addfun = function() {     points(xyFromCell(region$region_raster, int_point), col = \"red\", pch = 16)   } )"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"land-use-modifier","dir":"Articles","previous_headings":"Step 1: Build the population model for the study region","what":"Land-use modifier","title":"Population introduction via translocation functions","text":"read land-use modifier layer can use make region spatiotemporally explicit. effect altering HS values time causes dynamic changes habitat suitability, thus population abundances. change values now supply simulator. example, use Generator object later apply HS scaling. plot chunk unnamed-chunk-4 read land-use modifier, applied HS values yet. means HS values still static shown plot . plot chunk unnamed-chunk-5","code":"# read in the land-use modifier data(tasmania_modifier)  plot(tasmania_modifier,   zlim = c(0, 1), colNA = \"grey75\",   col = hcl.colors(100, \"RdYlGn\") ) # Habitat suitability data(thylacine_hs_raster) hs_raster <- projectRaster(thylacine_hs_raster, region$region_raster, method = \"bilinear\") hs_raster <- stretch(hs_raster, minv = 0, maxv = 1) hs_raster #> class      : RasterLayer  #> dimensions : 36, 34, 1224  (nrow, ncol, ncell) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer  #> values     : 0, 1  (min, max)  # initial_hs needed for generator initial_hs <- hs_raster <- stack(replicate(n = nlayers(tasmania_modifier), hs_raster)) # static HS for the moment ## capacity generator will make it temporally dynamic plot(hs_raster,   zlim = c(0, 1), colNA = \"grey75\",   col = hcl.colors(100, \"RdYlGn\"),   addfun = function() {     points(xyFromCell(region$region_raster, int_point), pch = 16, cex = 0.5)   } )"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"environmental-correlation","dir":"Articles","previous_headings":"Step 1: Build the population model for the study region","what":"Environmental correlation","title":"Population introduction via translocation functions","text":"Next, ’ll define distance-based spatial correlation applying environmental stochasticity within model. generated correlation data compacted computational efficiency (large-scale models).","code":"# Distance-based environmental correlation (via a compacted Cholesky decomposition) env_corr <- SpatialCorrelation$new(   region = region,   amplitude = 0.496,   breadth = 80,   distance_scale = 1000 ) env_corr$calculate_compact_decomposition(decimals = 4)"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"spatially-varying-growth-rates","dir":"Articles","previous_headings":"Step 1: Build the population model for the study region","what":"Spatially-varying growth rates","title":"Population introduction via translocation functions","text":"use IBRA regions define varying growth rates different populations. expected occur example wide-ranging species occurs varying habitats (e.g. red foxes Australia). plot chunk unnamed-chunk-7 plot chunk unnamed-chunk-7 plot chunk unnamed-chunk-7","code":"# allow growth rates to vary by region using IBRA regions # Tasmania study Interim Bioregionalisation of Australia (IBRA) bioregion cell distribution data(tasmania_ibra_raster) ibra_raster <- projectRaster(tasmania_ibra_raster, region$region_raster, method = \"ngb\") plot(ibra_raster,   colNA = \"grey75\",   breaks = seq(1, 9, 1),   main = \"IBRA regions of Tasmania\",   col = hcl.colors(10, \"Lajolla\") ) data(tasmania_ibra_data) tasmania_ibra_data #>   index key abbr                        name #> 1     1   A  FUR                    Furneaux #> 2     2   B  BEN                  Ben Lomond #> 3     3   C  TNM Tasmanian Northern Midlands #> 4     4   D  TSE        Tasmanian South East #> 5     5   E   TW              Tasmanian West #> 6     6   F  TNS   Tasmanian Northern Slopes #> 7     7   G  TSR   Tasmanian Southern Ranges #> 8     8   H  TCH Tasmanian Central Highlands #> 9     9   I  KIN                        King  # Calculate cell indices and counts for IBRA bioregions ibra_indices <- lapply(   as.list(tasmania_ibra_data$index),   function(i) {     which(ibra_raster[region$region_indices] == i)   } ) str(ibra_indices) #> List of 9 #>  $ : int [1:50] 11 12 20 21 22 23 24 25 35 36 ... #>  $ : int [1:68] 40 42 65 66 67 68 92 93 94 95 ... #>  $ : int [1:37] 180 181 209 210 211 212 213 238 239 240 ... #>  $ : int [1:131] 307 308 330 331 332 333 334 335 336 337 ... #>  $ : int [1:166] 104 131 132 133 134 135 162 163 164 165 ... #>  $ : int [1:59] 56 57 78 79 80 81 82 83 84 105 ... #>  $ : int [1:88] 404 429 430 431 432 457 458 459 483 484 ... #>  $ : int [1:87] 199 200 201 202 229 230 231 232 258 259 ... #>  $ : int [1:49] 1 2 3 4 5 6 7 8 9 10 ...  ibra_polygons <- rasterToPolygons(ibra_raster, dissolve = TRUE, na.rm = TRUE) ibra_polygons@data <- merge(ibra_polygons@data, tasmania_ibra_data,   by.x = \"layer\", by.y = \"index\" ) ibra_polygons #> class       : SpatialPolygonsDataFrame  #> features    : 9  #> extent      : -201571.8, 118428.2, -162583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs         : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> variables   : 4 #> names       : layer, key, abbr,           name  #> min values  :     1,   A,  BEN,     Ben Lomond  #> max values  :     9,   I,   TW, Tasmanian West  plot(ibra_polygons, col = hcl.colors(9, \"Lajolla\"), border = \"black\") text(ibra_polygons, labels = \"abbr\", cex = 1.2, halo = TRUE) rmax_regional <- ibra_raster  # seed is set to keep example results constant {   set.seed(27)   rmax <- round(rlnorm(9, 0.94, 0.3), 1) } for (val in 1:9) {   rmax_regional[rmax_regional == val] <- rmax[val] } plot(rmax_regional,   colNA = \"grey75\",   legend = FALSE, main = \"regional growth rates\",   zlim = range(rmax),   addfun = function() {     plot(ibra_polygons,       border = hcl.colors(9, \"Lajolla\"),       col = NA, add = TRUE     )     text(ibra_polygons, labels = rmax, halo = TRUE)   },   col = hcl.colors(100, \"Zissou\") ) # set upper and lower growth rates per region ibra_rmax <- cbind(tasmania_ibra_data,   rmax_lower = round(rmax * 0.6, 2),   rmax_mean = round(rmax, 2),   rmax_upper = round(rmax / 0.75, 2) ) ibra_rmax #>   index key abbr                        name rmax_lower rmax_mean rmax_upper #> 1     1   A  FUR                    Furneaux       2.70       4.5       6.00 #> 2     2   B  BEN                  Ben Lomond       2.16       3.6       4.80 #> 3     3   C  TNM Tasmanian Northern Midlands       1.20       2.0       2.67 #> 4     4   D  TSE        Tasmanian South East       1.02       1.7       2.27 #> 5     5   E   TW              Tasmanian West       1.08       1.8       2.40 #> 6     6   F  TNS   Tasmanian Northern Slopes       1.68       2.8       3.73 #> 7     7   G  TSR   Tasmanian Southern Ranges       1.56       2.6       3.47 #> 8     8   H  TCH Tasmanian Central Highlands       2.16       3.6       4.80 #> 9     9   I  KIN                        King       2.94       4.9       6.53"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"step-2-setup-the-translocation-function","dir":"Articles","previous_headings":"","what":"Step 2: Setup the translocation function","title":"Population introduction via translocation functions","text":"generate custom Translocation class object. object can used translocate populations one location another, shown , introduce populations defined locations timesteps. function also expanded introduce varying number animals site. simplicity sake, example releases number animals locations.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"introduction-sites-and-times","dir":"Articles","previous_headings":"Step 2: Setup the translocation function","what":"Introduction sites and times","title":"Population introduction via translocation functions","text":"define introduction sites matching region$region_indices introduction locations. also define timesteps introductions occur. timesteps sequential 1, defined , example, calendar years. plot chunk unnamed-chunk-8","code":"# set up translocation locations and order intro_trans_ll <- sf_project(   from = \"EPSG:4326\",   to = tasPrj,   pts = cbind(     c(148.01, 144.7, 147.9, 148.27, 145.24),     c(-40.8, -40.7, -43.2, -42.02, -42.3)   ) ) intro_trans_ll #>            [,1]       [,2] #> [1,]   85234.38  154987.89 #> [2,] -194366.53  163999.33 #> [3,]   73150.82 -111470.77 #> [4,]  105182.23   19214.10 #> [5,] -145117.36  -12600.28 intro_trans_point <- region$region_indices[which(region$region_indices %in%   cellFromXY(region$region_raster,     xy = intro_trans_ll   ))] intro_trans_point <- intro_trans_point[-1] intro_cells <- intro_trans_point intro_cells #> [1]  98 542 653 981  intro_times <- c(2, 3, 6, 8)  # Introduction times and locations cbind(intro_times, intro_cells) #>      intro_times intro_cells #> [1,]           2          98 #> [2,]           3         542 #> [3,]           6         653 #> [4,]           8         981  plot(region$region_raster,   main = \"Introduction sites\",   col = hcl.colors(100, \"Lajolla\"),   addfun = function() {     plot(ibra_polygons, border = \"black\", col = NA, add = TRUE)     points(xyFromCell(region$region_raster, intro_cells),       pch = 16,       cex = 1.5, col = c(\"darkgreen\", \"blue2\", \"black\", \"goldenrod\")     )     points(region$coordinates[which(region$region_indices %in% intro_cells), ],       col = \"firebrick\", cex = 1.5, lwd = 2     )   } )"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"translocation-function","dir":"Articles","previous_headings":"Step 2: Setup the translocation function","what":"Translocation function","title":"Population introduction via translocation functions","text":"define custom translocation function. ’s simply list object, nested function uses parameters model make changes simulated populations.","code":"# User-defined translocation function (list-nested) and alias ####  translocation <- list(    # Function parameters (passed to function in params list)   intro_cells = intro_cells, # cells where pops are introduced   intro_timesteps = intro_times, # timesteps when introduced   trans_n = 50, # translocated abundances. If not provided by LHS == 50   region_indices = region$region_indices,    # Function definition   translocation_function = function(params) {     # Unpack parameters (used at every time step)     intro_cells <- params$intro_cells     intro_timesteps <- params$intro_timesteps     simulator <- params$simulator     stages <- params$stages     populations <- params$populations     abundances <- params$abundance     region_indices <- params$region_indices     tm <- params$tm # timestep     sa <- params$stage_abundance     trans_n <- params$trans_n     # if introduction at timestep, introduce pops     if (tm %in% intro_timesteps) {       # take stage abundance at timestep       new_sa <- array(sa, c(stages, populations))       # identifies location of introduction       trans_loc <- which(region_indices == intro_cells[which(intro_timesteps == tm)])       # add n individuals regardless of K       new_sa[trans_loc] <- new_sa[trans_loc] + trans_n       return(new_sa)     } else {       # else return pops as they are       new_sa <- array(sa, c(stages, populations))       return(new_sa)     }   } ) translocation_aliases <- list(   intro_cells = \"translocation$intro_cells\",   intro_times = \"translocation$intro_timesteps\",   trans_n = \"translocation$trans_n\",   region_indices = \"translocation$region_indices\" )"},{"path":[]},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"growth-rate-generator","dir":"Articles","previous_headings":"Step 3: Build generators for dynamically generating model parameters","what":"Growth rate generator","title":"Population introduction via translocation functions","text":"Now can build Generator class object generate random growth rates based quantiles min max IBRA region. allows us sample across range values within region. plot chunk unnamed-chunk-10 map shows result sampling possible rmax values median values. plot shows can sample across range values using generator. functionality allows us pass rmax_quantile variable LatinHypercubeSampler class. plot chunk unnamed-chunk-11","code":"# Build a Rmax generator based on sampled IBRA Rmax range quantile rmax_gen <- Generator$new(   description = \"Rmax\",   spatial_correlation = env_corr,   generate_rasters = FALSE,   ibra_data_rmax = ibra_rmax,   ibra_indices = ibra_indices,   region_cells = region$region_cells,   inputs = c(\"rmax_quantile\"),   outputs = c(\"growth_rate_max\"),   generative_requirements = list(growth_rate_max = \"function\") )  # growth_rate_max template rmax_gen$add_function_template(   \"growth_rate_max\",   function_def = function(params) {     growth_rate_max <- array(0, params$region_cells)     for (i in 1:nrow(params$ibra_data_rmax)) {       growth_rate_max[params$ibra_indices[[i]]] <-         stats::qunif(params$rmax_quantile,           min = params$ibra_data_rmax$rmax_lower[i],           max = params$ibra_data_rmax$rmax_upper[i]         )     }     return(growth_rate_max)   },   call_params = c(\"ibra_data_rmax\", \"ibra_indices\", \"region_cells\", \"rmax_quantile\") )  # test rmax generator at median values rmax_gen_ex <- rmax_gen$generate(input_values = list(rmax_quantile = 0.5)) rmax_regional[region$region_indices] <- rmax_gen_ex$growth_rate_max plot(rmax_regional,   main = \"median regional rmax\",   col = hcl.colors(100),   addfun = function() {     plot(ibra_polygons, border = \"black\", col = NA, add = TRUE)   } ) # Test multiple quantiles test_rmax <- lapply(seq(0, 1, 0.1), function(i) {   region$raster_from_values(rmax_gen$generate(input_values = list(rmax_quantile = i))$growth_rate_max) }) test_rmax <- stack(test_rmax) names(test_rmax) <- paste0(\"Q\", seq(0, 1, 0.1))  # plot plot(test_rmax,   colNA = \"grey75\",   legend = TRUE,   zlim = c(     min(values(test_rmax), na.rm = TRUE),     max(values(test_rmax), na.rm = TRUE)   ),   addfun = function() {     plot(ibra_polygons, border = \"black\", col = NA, add = TRUE)   },   col = hcl.colors(100) )"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"dispersal-generator","dir":"Articles","previous_headings":"Step 3: Build generators for dynamically generating model parameters","what":"Dispersal generator","title":"Population introduction via translocation functions","text":"generator controls dispersal across region based mean dispersal distance proportion dispersers. Like rmax_gen defined , can test dispersal generator range values make sure dispersal curve looks appropriate. can see plot proportion dispersal decreases, maximum dispersal distance. plot chunk unnamed-chunk-13 Now ’re happy curve follows right form, can generate dispersal data test population model .","code":"# Dispersal generator #### # Set for veriable mean distance, max hard-coded at 150 dispersal_gen <- DispersalGenerator$new(   region = region,   spatial_correlation = env_corr,   generate_rasters = FALSE,   dispersal_max_distance = 150,   distance_classes = seq(5, 150, by = 10),   distance_scale = 1000, # in km   dispersal_friction = DispersalFriction$new(), # modify coastline distances   inputs = c(\"dispersal_p\", \"dispersal_b\"), # proportion and average distance   decimals = 4 ) dispersal_gen$calculate_distance_data() head(dispersal_gen$distance_data$base, 10) #>     target_pop source_pop compact_row distance_class #> X2           2          1           1              2 #> X3           3          1           2              3 #> X4           4          1           3              2 #> X5           5          1           4              2 #> X6           6          1           5              2 #> X7           7          1           6              3 #> X8           8          1           7              4 #> X9           9          1           8              5 #> X10         10          1           9              6 #> X13         13          1          10              3 table(dispersal_gen$distance_data$base$distance_class) #>  #>     2     3     4     5     6     7     8     9    10    11    12    13    14  #>  5476  7790  9914 18696 15444 20798 19606 22140 29202 22426 26850 23702 28286  #>    15  #> 26086 # plot dispersal curves for mean dispersal rates disp_fun <- function(p, b, distance) {   p * exp(-distance / b) }  disp_mat <- data.frame(   p = round(runif(1000, 5, 40) / 100, 2), # prop   b = round(runif(1000, 5, 40)) # mean distance ) head(disp_mat) #>      p  b #> 1 0.26 22 #> 2 0.07 28 #> 3 0.08 25 #> 4 0.38 23 #> 5 0.23 23 #> 6 0.19 35  disp_test <- lapply(1:nrow(disp_mat), function(i) {   p <- disp_mat[i, \"p\"]   b <- disp_mat[i, \"b\"]   disp_x <- disp_fun(p, b, seq(5, 150, 5))   return(disp_x) })  {   par(mar = c(4, 4, 0.5, 0.5))   matplot(     x = seq(5, 150, 5), y = rep(NA, 30), type = \"l\", ylim = c(0, 0.4),     xlab = \"Disp. dist (km)\", ylab = \"Prop. disp.\", yaxt = \"n\", xaxt = \"n\"   )   axis(1, at = seq(0, 150, 10))   axis(2, at = seq(0, 40, 5) / 100, labels = seq(0, 40, 5))   lapply(disp_test, function(i) {     matplot(       x = seq(5, 150, 5), y = unlist(i), type = \"l\", add = TRUE,       col = c(\"#C9C9C944\")     )   })   lines(     x = seq(5, 150, 5),     y = apply(as.data.frame(disp_test), 1, mean), col = \"firebrick\"   ) } dev.off() #> null device  #>           1 # Generate sampled dispersals for p = 0.35, b = 40 (km) sample_dispersal_data <- dispersal_gen$generate(   input_values = list(dispersal_p = 0.35, dispersal_b = 40) )$dispersal_data head(sample_dispersal_data[[1]], 10) # examine #>     target_pop source_pop emigrant_row immigrant_row dispersal_rate #> X2           2          1            1             1         0.0120 #> X3           3          1            2             1         0.0094 #> X4           4          1            3             1         0.0120 #> X5           5          1            4             1         0.0120 #> X6           6          1            5             1         0.0120 #> X7           7          1            6             1         0.0094 #> X8           8          1            7             1         0.0073 #> X9           9          1            8             1         0.0057 #> X10         10          1            9             1         0.0044 #> X13         13          1           10             1         0.0094"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"capacity-generator","dir":"Articles","previous_headings":"Step 3: Build generators for dynamically generating model parameters","what":"Capacity generator","title":"Population introduction via translocation functions","text":"build carrying capacity generator. Carrying capacity based maximum density values scaled HS (.e. cells HS 1 contain highest densities). capacity generator set-way requires multiple parameters work. 1.max_dens: maximum theoretical density populations 2.q_thresh: quantile threshold used rescale HS values 3.trans_n: number animals introduced. value consistent translocation function. Now defined generator can make test data model plot chunk unnamed-chunk-16 plot chunk unnamed-chunk-16","code":"capacity_gen <- Generator$new(   description = \"capacity\",   spatial_correlation = env_corr,   generate_rasters = FALSE,   time_steps = ncol(initial_hs),   hs_raster = initial_hs[region$region_indices], # provide full stack of HS. Template attached   hs_mod = tasmania_modifier[region$region_indices], # provide full stack of LULC modifier. Template attached   int_index = int_point,   trans_n = translocation$trans_n, # number of animals introduced   region_indices = region$region_indices,   inputs = c(\"max_dens\", \"q_thresh\", \"trans_n\"),   outputs = c(\"initial_abundance\", \"carrying_capacity\"),   generative_requirements = list(     initial_abundance = \"function\",     carrying_capacity = \"function\"   ) )  capacity_gen$add_function_template(   param = \"initial_abundance\",   function_def = function(params) {     distr_a <- params$hs_raster[, 1]     ## 0 everywhere except the intro point at the first time step     ## intro point to trans_n     ## Could be above or below carrying capacity     idx <- which(params$region_indices == params$int_index)     distr_a[idx] <- params$trans_n     distr_a[-idx] <- 0     return(distr_a)   },   call_params = c(\"hs_raster\", \"int_index\", \"region_indices\", \"trans_n\") )  capacity_gen$add_function_template(   \"carrying_capacity\",   function_def = function(params) {     idx <- which(params$region_indices == params$int_index)     distr_k <- params$hs_raster     distr_mod <- params$hs_mod     stopifnot(       \"hs_raster and hs_mod have different number of layers\" =         dim(distr_k) == dim(distr_mod)     )     # stretch HS values based on q_thresh     distr_k <- scales::rescale(distr_k, from = c(0, params$q_thresh), to = c(0, 1))     distr_k[distr_k < 0] <- 0     distr_k[distr_k > 1] <- 1     # multiply thresholded HS by hs_modifier     distr_k <- distr_k * distr_mod     # rescale back to {0, 1}     qMax <- max(distr_k, na.rm = TRUE)     distr_k <- scales::rescale(distr_k, from = c(0, qMax), to = c(0, 1))     distr_k[distr_k < 0] <- 0     distr_k[distr_k > 1] <- 1     # carrying capacity = (HS * maximum density)     distr_k <- ceiling(distr_k * params$max_dens)     distr_k[idx, 1] <- params$max_dens     # distr_k[-idx, 1] <- 0     return(distr_k)   },   call_params = c(\"hs_raster\", \"hs_mod\", \"int_index\", \"region_indices\", \"max_dens\", \"q_thresh\") )  # have all parameters been specified correctly capacity_gen$generative_requirements_satisfied() #> $initial_abundance #> [1] TRUE #>  #> $carrying_capacity #> [1] TRUE # Generate example initial abundance and declining carrying capacity time-series generated_k <- capacity_gen$generate(input_values = list(   max_dens = 100, q_thresh = 0.90,   trans_n = 60 )) example_initial_abundance <- generated_k$initial_abundance example_carrying_capacity <- generated_k$carrying_capacity  # Plot the example initial abundance example_initial_n_raster <- region$raster_from_values(example_initial_abundance) example_initial_n_raster #> class      : RasterLayer  #> dimensions : 36, 34, 1224  (nrow, ncol, ncell) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer  #> values     : 0, 60  (min, max) plot(example_initial_n_raster,   main = \"Example initial abundance\",   col = hcl.colors(100, \"Lajolla\", rev = TRUE), colNA = \"grey75\",   addfun = function() {     plot(ibra_polygons, border = \"black\", col = NA, add = TRUE)   } ) # Plot the carrying capacity ## carrying capacity is forced to maximum theoretical value at first time step example_k <- region$raster_from_values(example_carrying_capacity) example_k[[c(1, 6, 11)]] #> class      : RasterBrick  #> dimensions : 36, 34, 1224, 3  (nrow, ncol, ncell, nlayers) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer.1, layer.6, layer.11  #> min values :       0,       0,        0  #> max values :     100,      67,       99 plot(example_k,   col = hcl.colors(100, \"RdYlGn\", rev = TRUE), colNA = \"grey75\",   addfun = function() {     plot(ibra_polygons, border = \"black\", col = NA, add = TRUE)   },   zlim = c(0, 100) )"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"step-4-build-a-template-model","dir":"Articles","previous_headings":"","what":"Step 4: Build a template model","title":"Population introduction via translocation functions","text":"Using generators ’ve built can now test simple population model works expected. plot chunk unnamed-chunk-17 template model runs successfully now can make maps dispersal patterns populations initial introduction. plot chunk unnamed-chunk-18 make sure translocation function working correctly, can run template model translocation function turned . can see diff_ras difference timesteps 2 two model runs 75 individuals, value passed translocation function original model run. now can plot difference. plot chunk unnamed-chunk-20","code":"# Template model #### model_template <- PopulationModel$new(   region = region,   time_steps = 11,   years_per_step = 1,   stage_matrix = 1, # single-stage   populations = region$region_cells, # 735   demographic_stochasticity = TRUE,   standard_deviation = 0.18,   density_dependence = \"logistic\", # Ricker   harvest = FALSE, # No harvest   dispersal = dispersal_gen,   translocation = translocation,   dispersal_source_n_k = list(threshold = 0.92, cutoff = 0),   simulation_order = c(\"translocation\", \"results\", \"transition\", \"dispersal\"),   random_seed = 20230210,   attribute_aliases = translocation_aliases,   results_selection = c(\"abundance\") )  model <- model_template$clone() model$set_attributes(   initial_abundance = example_initial_abundance,   carrying_capacity = example_carrying_capacity,   growth_rate_max = rmax_gen_ex$growth_rate_max,   translocation = translocation,   trans_n = 75, # passed through to translocation function   dispersal = sample_dispersal_data ) # run poems simulator results <- population_simulator(model) results$all$abundance #>  [1]    60   461  1687  4826  6058  9342 10085 17090 13115 18711 12527  # timeseries of total abundance plot(1:11, results$all$abundance,   type = \"l\",   xlab = \"timestep\", ylab = \"Total abundance\" ) abund_ras <- region$raster_from_values(results$abundance) abund_ras[[c(1, 6, 11)]] #> class      : RasterBrick  #> dimensions : 36, 34, 1224, 3  (nrow, ncol, ncell, nlayers) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer.1, layer.6, layer.11  #> min values :       0,       0,        0  #> max values :      60,     250,      345 abd_max <- round_any(max(values(abund_ras), na.rm = TRUE), 20, f = ceiling)  # plot of abundances. log(x+1) transformed. plot(log1p(abund_ras),   col = hcl.colors(100),   colNA = \"grey75\",   addfun = function() {     plot(ibra_polygons, border = \"black\", col = NA, add = TRUE)   },   zlim = c(0, log1p(abd_max)) ) model$set_attributes(   initial_abundance = example_initial_abundance,   carrying_capacity = example_carrying_capacity,   growth_rate_max = rmax_gen_ex$growth_rate_max,   translocation = NULL,   dispersal = sample_dispersal_data ) results_notransn <- population_simulator(model) # run poems simulator results_notransn$all$abundance #>  [1]    60   386  1614  4651  5532  8984  9672 15588 13801 17901 13641 results$all$abundance #>  [1]    60   461  1687  4826  6058  9342 10085 17090 13115 18711 12527 abund_ras_notransn <- region$raster_from_values(results_notransn$abundance) abund_ras_notransn[[c(1, 6, 11)]] #> class      : RasterBrick  #> dimensions : 36, 34, 1224, 3  (nrow, ncol, ncell, nlayers) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer.1, layer.6, layer.11  #> min values :       0,       0,        0  #> max values :      60,     278,      298 diff_ras <- abund_ras - abund_ras_notransn diff_ras[[1:2]] #> class      : RasterBrick  #> dimensions : 36, 34, 1224, 2  (nrow, ncol, ncell, nlayers) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer.1, layer.2  #> min values :       0,       0  #> max values :       0,      75 plotmax <- round_any(max(abs(values(diff_ras)), na.rm = TRUE), 10, ceiling) plot(diff_ras[[c(1, 6, 11)]],   zlim = c(-plotmax, plotmax),   breaks = c(-plotmax, -100, -50, -20, 0, 20, 50, 100, plotmax),   col = hcl.colors(9, \"PuOr\"),   colNA = \"grey75\",   addfun = function() {     plot(ibra_polygons, col = NA, add = TRUE)   } )"},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"step-5-run-multiple-simulations","dir":"Articles","previous_headings":"","what":"Step 5: Run multiple simulations","title":"Population introduction via translocation functions","text":"order explore model parameter space find best models, generate Latin hypercube samples model generator parameters simulated, using LatinHypercubeSampler class. class functionality generating sample parameters via Uniform, Normal, Lognormal, Beta, Triangular distributions. example generate 10 samples. Typically however, user need generate thousands tens thousands, samples.","code":""},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"define-the-latin-hypercube-for-sampling","dir":"Articles","previous_headings":"Step 5: Run multiple simulations","what":"Define the latin-hypercube for sampling","title":"Population introduction via translocation functions","text":"can run simulation set (row) sampled parameters. SimulationManager class manages generation parameters (via generators), running model simulations, writing simulation results disk. also maintains log simulation’s success errors warnings encountered.","code":"# Latin-hypercube sampler #### lhs_gen <- LatinHypercubeSampler$new()  # Habitat suitability threshold lhs_gen$set_uniform_parameter(\"q_thresh\", lower = 0.90, upper = 0.99, decimals = 2)  # Growth rate lhs_gen$set_uniform_parameter(\"rmax_quantile\", lower = 0, upper = 1, decimals = 2) lhs_gen$set_uniform_parameter(\"standard_deviation\", lower = 0.00, upper = 0.70, decimals = 2)  # Dispersal lhs_gen$set_uniform_parameter(\"dispersal_p\", lower = 0.05, upper = 0.40, decimals = 2) ## mean dispersal between 5 and 40 km lhs_gen$set_uniform_parameter(\"dispersal_b\", lower = 5, upper = 40, decimals = 0) lhs_gen$set_uniform_parameter(\"dispersal_n_k_threshold\", lower = 0.7, upper = 1.0, decimals = 2)  # Density max ## Density: animals/km2 needs to be scaled by grid size (10km x 10km) ## e.g. 1/km2 = (1 animal/km2 * (10*10) ) * frac_cell_used ## 1 km2 = 80 per grid cell = (1*(10*10))*0.8 # assuming 80% grid cell used ## Here I have assumed only 80% of cell is suitable. Upper/lower = 1/km - 6.25/km lhs_gen$set_uniform_parameter(\"max_dens\", lower = 80, upper = 500, decimals = 0)  # Translocation lhs_gen$set_uniform_parameter(\"trans_n\", lower = 10, upper = 100, decimals = 0)  sample_data <- lhs_gen$generate_samples(number = 10, random_seed = 42) head(sample_data) #>   q_thresh rmax_quantile standard_deviation dispersal_p dispersal_b #> 1     0.97          0.72               0.31        0.21          15 #> 2     0.92          0.33               0.12        0.26           6 #> 3     0.95          0.05               0.47        0.32          21 #> 4     0.94          0.50               0.61        0.15          10 #> 5     0.98          0.85               0.39        0.38          37 #> 6     0.98          0.94               0.67        0.18          32 #>   dispersal_n_k_threshold max_dens trans_n #> 1                    0.84      300      92 #> 2                    0.94      497      71 #> 3                    0.95      341      14 #> 4                    0.70      232      27 #> 5                    0.74      106      53 #> 6                    0.77      455      37  # Make unique row names for saving files {   set.seed(54612)   sample_data$UniqueID <- paste0(     stri_rand_strings(nrow(sample_data), 4, \"[A-Z]\"),     stri_rand_strings(nrow(sample_data), 4, \"[0-9]\")   ) } sample_data <- sample_data[, c(9, 1:8)] sample_data #>    UniqueID q_thresh rmax_quantile standard_deviation dispersal_p dispersal_b #> 1  GFUR0745     0.97          0.72               0.31        0.21          15 #> 2  PEZO0880     0.92          0.33               0.12        0.26           6 #> 3  NWRT4531     0.95          0.05               0.47        0.32          21 #> 4  QFAA0197     0.94          0.50               0.61        0.15          10 #> 5  TDPB8128     0.98          0.85               0.39        0.38          37 #> 6  ZWCU8467     0.98          0.94               0.67        0.18          32 #> 7  HQPY9567     0.96          0.17               0.06        0.07          28 #> 8  LROH7589     0.93          0.21               0.54        0.11          23 #> 9  CETL2983     0.91          0.58               0.22        0.26          34 #> 10 ZOXX4201     0.92          0.64               0.19        0.36          16 #>    dispersal_n_k_threshold max_dens trans_n #> 1                     0.84      300      92 #> 2                     0.94      497      71 #> 3                     0.95      341      14 #> 4                     0.70      232      27 #> 5                     0.74      106      53 #> 6                     0.77      455      37 #> 7                     1.00      200      78 #> 8                     0.88      393      44 #> 9                     0.85      278      85 #> 10                    0.79      128      61 OUTPUT_DIR <- tempdir() model <- model_template$clone() model$set_attributes(params = list(   \"standard_deviation\" = NULL,   \"dispersal_source_n_k$threshold\" = NULL,   \"dispersal_source_n_k$cutoff\" = 0.00 ))  # Build the simulation manager sim_manager <- SimulationManager$new(   sample_data = sample_data,   model_template = model,   # initial_hs = initial_hs,   generators = list(dispersal_gen, capacity_gen, rmax_gen),   parallel_cores = 1L,   results_filename_attributes =     c(NULL, \"UniqueID\", \"results\"),   results_ext = \".RDS\",   results_dir = OUTPUT_DIR )  # Takes <10 seconds to run 10 example sims on a single core. system.time({   run_output <- sim_manager$run() }) #>    user  system elapsed  #>   2.817   0.255   3.108 run_output$summary #> [1] \"10 of 10 sample models ran and saved results successfully with warnings\""},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"step-6-extract-results-from-simulations","dir":"Articles","previous_headings":"","what":"Step 6: Extract results from simulations","title":"Population introduction via translocation functions","text":"Now simulations run, can extract modelled abundances. now wish collate summary results simulations via ResultsManager class. manager loads results sample simulation intermediate PopulationResults class object, dynamically generates results. need define functions calculating summary metrics, well matrices (one row values per simulation) may interested examining. can see run_output$summary shows number simulations didn’t complete successfully: run_output$full_log shows simulations produced NA values calculating population abundances: \"Warning: Non-finite stage abundances returned user-defined translocation function\" simulations range parameter values caused simulation “fall-”. errors fixed improving translocation function, alternatively user discard simulations structurally wrong - .e. specific combination parameters simply unsuitable. ’re going treat latter.","code":"run_output$summary #> [1] \"10 of 10 sample models ran and saved results successfully with warnings\""},{"path":"https://globalecologylab.github.io/poems/articles/translocation_example.html","id":"extract-results","dir":"Articles","previous_headings":"Step 6: Extract results from simulations","what":"Extract results","title":"Population introduction via translocation functions","text":"plot chunk unnamed-chunk-24 results can see translocation function working correctly, capacity_gen defined correctly, abundances first time step trans_n values latin-hypercube samples. Let’s assume samples 2, 3, 4, 8 “best” simulations sort validation. already extracted abundances simulations, now lines code, can generate averages simulations rasters plot chunk unnamed-chunk-26","code":"# Extract timeseries of abundance from each of the sims # Load our results (list) into a PopulationResults object p_results <- PopulationResults$new(results = run_output) res_manager <- ResultsManager$new(   simulation_manager = sim_manager,   simulation_results = p_results,   generators = NULL,   summary_matrices = c(     \"n\",     \"distr_pop\"   ),   summary_functions = list(     # total pop abundance     \"n\" = function(sim_results) {       sim_results$all$abundance     },     # matrix of abundance     ## can be made into raster     \"distr_pop\" = function(sim_results) {       sim_results$abundance     }   ),   parallel_cores = 1L ) gen_log <- res_manager$generate() gen_log$summary #> [1] \"10 of 10 summary metrics/matrices generated from sample results successfully\"  # matrix of total population abundances ## each row is a sim, each column a timestep res_manager$summary_matrix_list$n #>       [,1] [,2]  [,3]  [,4]  [,5]  [,6]   [,7]  [,8]  [,9] [,10] [,11] #>  [1,]   92 3323  7026 15041 26668 22664  41992 41696 62850 41843 59052 #>  [2,]   71 1967  2021  3882  7892 10605  20999 25497 38943 43938 47138 #>  [3,]   14  264   420  2109  6779 13228  13882 25794 24008 32783 26782 #>  [4,]   27 1364  1799  3694  7062 12462  17371 29558 24840 34150 27849 #>  [5,]   53  961  6666  8417  9409 19195  14169 30511 17347 28239    NA #>  [6,]   37 7833 45987 31579 88186 55046 128827 97272    NA    NA    NA #>  [7,]   78  687   388   707  1804  3405   6199 10775 12983 14604 13386 #>  [8,]   44 1024   989  3589  7830 14645  17947 29238 28654 36924 32740 #>  [9,]   85 2270  8646 15371 20338 29326  33191 52467    NA    NA    NA #> [10,]   61  875  2541  6666  8545 12917  14238 23607 20734 22180 21780  # plot matplot(   x = 1:ncol(res_manager$summary_matrix_list$n),   y = t(res_manager$summary_matrix_list$n), type = \"b\",   lty = 1, xlab = \"timestep\", ylab = \"total abundance\" ) identical(   unlist(res_manager$summary_matrix_list$n[, 1]),   unlist(sample_data$trans_n) ) #> [1] TRUE best_sims <- c(2:4, 8) dim(res_manager$summary_matrix_list$distr_pop[best_sims, ]) #> [1]    4 8085  best_abund <- matrix(   nrow = region$region_cells,   ncol = 11, # 11 timesteps,   data = round(colMeans(res_manager$summary_matrix_list$distr_pop[best_sims, ])) )  best_abund <- region$raster_from_values(best_abund) best_abund[[c(1, 6, 11)]] #> class      : RasterBrick  #> dimensions : 36, 34, 1224, 3  (nrow, ncol, ncell, nlayers) #> resolution : 10000, 10000  (x, y) #> extent     : -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) #> crs        : +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs  #> source     : memory #> names      : layer.1, layer.6, layer.11  #> min values :       0,       0,        0  #> max values :      39,     407,      634  abd_max <- round_any(max(values(best_abund), na.rm = TRUE),   accuracy = 100, ceiling )  # plot of log(x+1) abundances plot(log1p(best_abund),   col = hcl.colors(100, \"Spectral\", rev = TRUE),   colNA = \"grey75\",   addfun = function() {     plot(ibra_polygons, border = \"#000000\", col = NA, add = TRUE)   },   zlim = c(0, log1p(abd_max)) )"},{"path":"https://globalecologylab.github.io/poems/authors.html","id":null,"dir":"","previous_headings":"","what":"Authors","title":"Authors and Citation","text":"Sean Haythorne. Author. Damien Fordham. Author. Stuart Brown. Author. Jessie Buettel. Author. Barry Brook. Author. July Pilowsky. Author, maintainer.","code":""},{"path":"https://globalecologylab.github.io/poems/authors.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Authors and Citation","text":"Fordham D, Haythorne S, Brown S, Buettel J, Brook B (2021). “poems: R package simulating species' range dynamics using pattern-oriented validation.” Methods Ecology Evolution, 12(12), 2364-2371. doi:10.1111/2041-210X.13720, https://besjournals.onlinelibrary.wiley.com/doi/abs/10.1111/2041-210X.13720.","code":"@Article{poemspaper,   author = {Damien Fordham and Sean Haythorne and Stuart Brown and Jessie Buettel and Barry Brook},   title = {poems: R package for simulating species' range dynamics using pattern-oriented validation},   journal = {Methods in Ecology and Evolution},   volume = {12},   number = {12},   pages = {2364-2371},   keywords = {distribution, extinction risk, metapopulation, pattern-oriented modelling, population dynamics, population viability analysis, range shift, spatially explicit population model},   doi = {10.1111/2041-210X.13720},   url = {https://besjournals.onlinelibrary.wiley.com/doi/abs/10.1111/2041-210X.13720},   abstract = {Abstract Spatially explicit population models (SEPMs) can simulate spatiotemporal changes in species' range dynamics in response to variation in climatic and environmental conditions, and anthropogenic activities. When combined with pattern-oriented modelling methods, ecological processes and drivers of range shifts and extinctions can be identified, and plausible chains of causality revealed. The open-source multi-platform R package poems provides functionality for simulating and validating projections of species' range dynamics using stochastic, lattice-based population models. Built-in modules allow parameter uncertainty to propagate through to model simulations, with their effects on species' range dynamics evaluated using Approximate Bayesian Computation. These validation procedures identify models with the structural complexity and parameterisation needed to simulate the effects of past changes in climate, environment and human activities on species' range shifts and extinction risk. We illustrate the features and versatility of poems by simulating the historical decline and extinction of the Thylacine Thylacinus cynocephalus, an icon of recent extinctions in Australia. We show that poems can reveal likely ecological pathways to extinction using pattern-oriented methods, providing validated projections of the range collapse and population decline of threatened species. By providing flexible and extendable modules for building and validating SEPMs of species' range dynamics, poems allows the effects of past and future threats on species' populations to be quantified using well-parameterised, structurally realistic models, with important generative mechanisms. Since poems can directly unravel ecological processes of species responses to global change, and strengthen predictions of range shifts and extinction risk—within a flexible, R-based environment—we anticipate that poems will be of significant value to ecologists, conservation managers and biogeographers.},   year = {2021}, }"},{"path":"https://globalecologylab.github.io/poems/index.html","id":"poems-pattern-oriented-ensemble-modeling-system-for-spatially-explicit-populations-","dir":"","previous_headings":"","what":"Pattern-Oriented Ensemble Modeling System","title":"Pattern-Oriented Ensemble Modeling System","text":"poems package provides framework interoperable R6 (Chang, 2020) classes building ensembles viable models via pattern-oriented modeling (POM) approach (Grimm et al., 2005). Pattern-oriented modeling vigorous form statistical validation simulations parameter settings summarized using key metrics converged toward multiple observed patterns, targets. package provides process-based population model related functionality RAMAS Vortex, free open source format, high customizability. package includes classes encapsulating generating model parameters, managing POM workflow. workflow includes: Model setup including generated spatial layers demographic population model parameters. Generating model parameters via Latin hypercube sampling (Iman & Conover, 1980). Running multiple sampled model simulations. Collating summary results metrics via user-defined functions. Validating selecting ensemble models best match known patterns. default, model validation selection utilizes approximate Bayesian computation (ABC) approach (Beaumont et al., 2002) using abc package (Csillery et al., 2015). However, alternative user-defined functionality employed. package includes spatially explicit demographic population model simulation engine, incorporates default functionality density dependence, correlated environmental stochasticity, stage-based transitions, distance-based dispersal. user may customize simulator defining functionality translocations, harvesting, mortality, processes, well defining sequence order simulator processes. framework also adapted use model simulators utilizing extendable (inheritable) base classes.","code":""},{"path":"https://globalecologylab.github.io/poems/index.html","id":"installation","dir":"","previous_headings":"","what":"Installation","title":"Pattern-Oriented Ensemble Modeling System","text":"can install poems GitHub using:","code":"# install.packages(\"devtools\") remotes::install_github(\"GlobalEcologyLab/poems\")"},{"path":"https://globalecologylab.github.io/poems/index.html","id":"example","dir":"","previous_headings":"","what":"Example","title":"Pattern-Oriented Ensemble Modeling System","text":"following simple example demonstrates run single spatially explicit demographic population model using poems:   examples utilizing POM workflow advanced features poems can found accompanying vignettes.","code":"library(poems)  # Demonstration example region (U Island) and initial abundance coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) initial_abundance <- seq(0, 300, 50) raster::plot(region$raster_from_values(initial_abundance),   main = \"Initial abundance\", xlab = \"Longitude (degrees)\",   ylab = \"Latitude (degrees)\", zlim = c(0, 300), colNA = \"blue\" ) # Set population model pop_model <- PopulationModel$new(   region = region,   time_steps = 5,   populations = 7,   initial_abundance = initial_abundance,   stage_matrix = matrix(c(     0, 2.5, # Leslie/Lefkovitch matrix     0.8, 0.5   ), nrow = 2, ncol = 2, byrow = TRUE),   carrying_capacity = rep(200, 7),   density_dependence = \"logistic\",   dispersal = (!diag(nrow = 7, ncol = 7)) * 0.05,   result_stages = c(1, 2) )  # Run single simulation results <- population_simulator(pop_model) results # examine #> $all #> $all$abundance #> [1] 1031 1226 1249 1409 1358 #>  #> $all$abundance_stages #> $all$abundance_stages[[1]] #> [1] 603 748 724 868 789 #>  #> $all$abundance_stages[[2]] #> [1] 428 478 525 541 569 #>  #>  #>  #> $abundance #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   55  118  191  202  186 #> [2,]  105  159  171  204  187 #> [3,]  114  157  164  183  163 #> [4,]  172  205  195  219  223 #> [5,]  177  198  183  213  216 #> [6,]  204  197  197  197  194 #> [7,]  204  192  148  191  189 #>  #> $abundance_stages #> $abundance_stages[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   31   74  111  128  111 #> [2,]   65   94   95  121  104 #> [3,]   68  104   95  133   81 #> [4,]   97  113  118  120  142 #> [5,]  100  134  106  125  118 #> [6,]  120  116  110  122  114 #> [7,]  122  113   89  119  119 #>  #> $abundance_stages[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   24   44   80   74   75 #> [2,]   40   65   76   83   83 #> [3,]   46   53   69   50   82 #> [4,]   75   92   77   99   81 #> [5,]   77   64   77   88   98 #> [6,]   84   81   87   75   80 #> [7,]   82   79   59   72   70 raster::plot(region$raster_from_values(results$abundance[, 5]),   main = \"Final abundance\", xlab = \"Longitude (degrees)\",   ylab = \"Latitude (degrees)\", zlim = c(0, 300), colNA = \"blue\" )"},{"path":"https://globalecologylab.github.io/poems/index.html","id":"citation","dir":"","previous_headings":"","what":"Citation","title":"Pattern-Oriented Ensemble Modeling System","text":"may cite poems publications using software paper Methods Ecology Evolution: Fordham, D. ., Haythorne, S., Brown, S. C., Buettel, J. C., & Brook, B. W. (2021). poems: R package simulating species’ range dynamics using pattern‐oriented validation. Methods Ecology Evolution, 12(12), 2364-2371.","code":""},{"path":"https://globalecologylab.github.io/poems/index.html","id":"references","dir":"","previous_headings":"","what":"References","title":"Pattern-Oriented Ensemble Modeling System","text":"Beaumont, M. ., Zhang, W., & Balding, D. J. (2002). ‘Approximate Bayesian computation population genetics’. Genetics, vol. 162, . 4, pp, 2025–2035. doi:10.1093/genetics/162.4.2025 Chang, W. (2020). ‘R6: Encapsulated Classes Reference Semantics’. R package version 2.5.0. Retrieved https://CRAN.R-project.org/package=R6 Csillery, K., Lemaire L., Francois O., & Blum M. (2015). ‘abc: Tools Approximate Bayesian Computation (ABC)’. R package version 2.1. Retrieved https://CRAN.R-project.org/package=abc Grimm, V., Revilla, E., Berger, U., Jeltsch, F., Mooij, W. M., Railsback, S. F., Thulke, H. H., Weiner, J., Wiegand, T., DeAngelis, D. L., (2005). ‘Pattern-Oriented Modeling Agent-Based Complex Systems: Lessons Ecology’. Science vol. 310, . 5750, pp. 987–991. doi:10.1126/science.1116681 Iman R. L., Conover W. J. (1980). ‘Small sample sensitivity analysis techniques computer models, application risk assessment’. Commun Stat Theor Methods A9, pp. 1749–1842. doi:10.1080/03610928008827996","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a dispersal friction. — DispersalFriction","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"R6 class functionality modeling sea, ice frictional barriers dispersal within spatially-explicit population model. dispersal friction model utilizes gdistance package functionality calculate distance multipliers modify distance-based dispersal rates simulated migrations spatio-temporal frictional landscape. frictional landscape defined via conductance/permeability values, inverse friction, ranges zero (barrier) one (friction) values -representing friction. example, conductance value 1/5 = 0.2 represents landscape simulated animals move 5 times slower non-friction landscape. example resultant distance multiplier 5, thus reducing effective dispersal range.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> DispersalFriction","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). parallel_cores Number cores running simulations parallel. write_to_dir Directory path storing distance multipliers memory performance issue. transition_directions Number transition directions neighbors cells connected: usually 4, 8 (default), 16 (see gdistance::transition). conductance Matrix/raster conductance (inverse friction) values (range: 0 = barrier; 0 < friction < 1; 1 = friction) grid cell (rows/cells) simulation time step (columns/layers). attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::GenericModel$get_attribute_names() poems::GenericModel$get_attributes() poems::GenericModel$set_attributes() poems::SpatialModel$initialize() poems::SpatialModel$new_clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"DispersalFriction$calculate_distance_multipliers() DispersalFriction$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"method-calculate-distance-multipliers-","dir":"Reference","previous_headings":"","what":"Method calculate_distance_multipliers()","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"Calculates returns spatio-temporal dispersal distance multipliers -range migration.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"","code":"DispersalFriction$calculate_distance_multipliers(dispersal_indices, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"dispersal_indices Two-column matrix representing target source coordinate index -range migration. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"Temporal list dispersal distance multiplier arrays values -range migration.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"","code":"DispersalFriction$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalFriction.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a dispersal friction. — DispersalFriction","text":"","code":"if (FALSE) { # interactive() #' U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster #' full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA #' make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )  #' Dispersal distances dispersal_gen <- DispersalGenerator$new(region = region) dispersal_gen$set_attributes(params = list(p = 0.5, b = 700, r = 3000)) distances <- round(dispersal_gen$calculate_distance_matrix()) #' in m dispersal_gen$calculate_distance_data() dispersal_indices <- as.matrix(dispersal_gen$distance_data$base[, 1:2])  #' Distance multipliers with friction in cell 4 dispersal_friction <- DispersalFriction$new(   region = region,   conductance = c(1, 1, 1, 0.5, 1, 1, 1) ) multipliers <- dispersal_friction$calculate_distance_multipliers(dispersal_indices) cbind(dispersal_indices,   distance = distances[dispersal_indices],   multiplier = multipliers[[1]] )  #' Note that crossing the water is avoided. }"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a dispersal generator. — DispersalGenerator","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"R6 class functionality modeling dispersals within spatially-explicit population model. model calculates dispersal rates population model cells using distance-based function: p*exp(-distance/b) distance <= r (otherwise zero), p (proportion), b (breadth average distance) r (range maximum distance) configurable model attributes. dispersal rates adjusted limit emigration cell p. model also generates data constructing compacted dispersal matrices. dynamically generates attributes defined outputs (default: dispersal_data) given sampled inputs (default: dispersal_proportion dispersal_max_distance). optional DispersalFriction object may utilized modify (equivalent) distances given (spatio-temporal) frictional landscape. landscape includes temporal changes, generated dispersal_data temporal list changing dispersal rates.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> poems::Generator -> DispersalGenerator","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). description brief description generator generates. inputs array input attribute names generator. outputs array output attribute names generator. file_templates nested list file template attributes. function_templates nested list function template attributes. distribution_templates list distribution template attributes. uses_correlations boolean indicate SpatialCorrelation (inherited class) object used generating correlated random deviates. spatial_correlation SpatialCorrelation (inherited class) object generating correlated random deviates. temporal_correlation Absolute correlation coefficient simulation time steps grid cells (0-1; default = 1). time_steps Number simulation time steps. decimals Number decimal places applied generated data outputs (default: NULL = rounding). occupancy_mask Optional binary mask array (matrix), data frame, raster (stack) generated (time-series) data outputs. template_attached list template-nested dynamically attached model attributes maintained via shallow new cloning. dispersal_friction DispersalFriction (inherited class) object dispersal distance multiplier data. distance_classes Vector distance interval boundaries calculating discrete dispersal rates. max_distance_classes maximum number distance classes calculated automatically via maximum distance (default: 1000). distance_scale Scale distance values meters (default = 1). Usage: set 1 values meters, 1000 values kilometers. distance_data Data frame distance classes including indices construction compact matrices (columns: target_pop, source_pop, compact_row, distance_class). dispersal_function_data Data frame discrete dispersal function values. Optional first column may provide distance intervals (non-inclusive lower bounds). dispersal_proportion Dispersal function: p*exp(-distance/b) p parameter. Represents proportion limit dispersers model cells. dispersal_breadth Dispersal function: p*exp(-distance/b) b parameter. Represents breadth dispersal model cells. Typically estimated via average migration distance. dispersal_max_distance Dispersal maximum distance range (r) parameter limits use dispersal function: p*exp(-distance/b). function utilized distance <= r otherwise dispersal rate set zero. dispersal_index Sampled index dispersal function data frame (look-dispersal function parameters). dispersal_matrix Dispersal matrix calculated via dispersal function. dispersal_data Data frame non-zero dispersal rates including indices construction compact matrices (columns: target_pop, source_pop, emigrant_row, immigrant_row, dispersal_rate). attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. generative_template nested DispersalTemplate (inherited class) object model attributes maintained via shallow new cloning. generative_requirements list attribute names template setting (\"file\", \"function\", \"default\") required generate values. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::GenericModel$get_attribute_names() poems::GenericModel$set_attributes() poems::Generator$add_distribution_template() poems::Generator$add_file_template() poems::Generator$add_function_template() poems::Generator$add_generative_requirements() poems::Generator$generate() poems::Generator$get_attributes() poems::Generator$new_clone() poems::Generator$read_file() poems::Generator$run_function() poems::Generator$sample_distribution()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"DispersalGenerator$new() DispersalGenerator$generative_requirements_satisfied() DispersalGenerator$set_distance_classes() DispersalGenerator$calculate_distance_matrix() DispersalGenerator$calculate_distance_data() DispersalGenerator$calculate_dispersals() DispersalGenerator$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Initialization method sets generative template requirements, optionally dispersal friction object, well attributes passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"DispersalGenerator$new(   generative_template = NULL,   generative_requirements = NULL,   dispersal_friction = NULL,   attribute_aliases = NULL,   ... )"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"generative_template Optional nested object generative attributes need maintained new clone object generated sample simulation (usually ). generative_requirements Optional list attribute names template setting (\"file\" \"function\") required generate values (otherwise default functionality used). dispersal_friction Optional DispersalFriction (inherited class) object dispersal distance multiplier data. attribute_aliases Optional list extra alias names model attributes (form: alias = \"attribute\") used set get attributes methods. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"method-generative-requirements-satisfied-","dir":"Reference","previous_headings":"","what":"Method generative_requirements_satisfied()","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Returns boolean indicate default, file /function template settings required attribute generation present.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"DispersalGenerator$generative_requirements_satisfied()"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Boolean indicate required settings attribute generation present.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"method-set-distance-classes-","dir":"Reference","previous_headings":"","what":"Method set_distance_classes()","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Sets distance classes sequence values minimum maximum steps interval size.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"DispersalGenerator$set_distance_classes(   minimum = 1,   maximum = 10,   interval = 1 )"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"minimum Minimum first distance class sequence value (default = 1). maximum Maximum last distance class value (default = 10). interval Interval distance class sequence step size  (default = 1).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"method-calculate-distance-matrix-","dir":"Reference","previous_headings":"","what":"Method calculate_distance_matrix()","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Returns matrix calculated distance (meters default) pair region cells.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"DispersalGenerator$calculate_distance_matrix(use_longlat = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"use_longlat Optional boolean indicating use (WGS84) coordinates longitude (degrees West) latitude (degrees North).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Matrix distances region cells.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"method-calculate-distance-data-","dir":"Reference","previous_headings":"","what":"Method calculate_distance_data()","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Calculates distance class within-range populations using set/provided distance classes. Also calculates indices constructing compact matrices.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"DispersalGenerator$calculate_distance_data(distance_matrix = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"distance_matrix Optional pre-calculated matrix distances population cells (population rows population columns). ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"method-calculate-dispersals-","dir":"Reference","previous_headings":"","what":"Method calculate_dispersals()","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Calculates, using conditional dispersal limiting function simulation sample, dispersal matrix, list data frames non-zero dispersal rates indices constructing compact dispersal matrix (default), optional changing rates time (via DispersalFriction object).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"DispersalGenerator$calculate_dispersals(type = \"data\")"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"type Optional type selector (\"data\" \"matrix\") determine whether calculate dispersal matrix data frame (default).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"Returns character string message calculation prerequisites met (simulation logging).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"DispersalGenerator$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalGenerator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a dispersal generator. — DispersalGenerator","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )   # Distance-based dispersal generator dispersal_gen <- DispersalGenerator$new(   region = region,   dispersal_max_distance = 3000, # in m   inputs = c(\"dispersal_p\", \"dispersal_b\"),   decimals = 5 ) dispersal_gen$calculate_distance_data() # pre-calculate dispersal_gen$generate(input_values = list(   dispersal_p = 0.5,   dispersal_b = 700 )) #> $dispersal_data #> $dispersal_data[[1]] #>    target_pop source_pop emigrant_row immigrant_row dispersal_rate #> 1           2          1            1             1        0.02426 #> 2           3          1            2             1        0.10284 #> 3           4          1            3             1        0.01643 #> 4           5          1            4             1        0.02115 #> 5           6          1            5             1        0.01501 #> 6           1          2            1             1        0.02426 #> 7           3          2            2             2        0.01643 #> 8           4          2            3             2        0.10284 #> 9           6          2            4             2        0.01501 #> 10          7          2            5             1        0.02115 #> 11          1          3            1             2        0.10284 #> 12          2          3            2             2        0.01643 #> 13          4          3            3             3        0.02426 #> 14          5          3            4             2        0.10284 #> 15          6          3            5             3        0.05596 #> 16          7          3            6             2        0.01643 #> 17          1          4            1             3        0.01643 #> 18          2          4            2             3        0.10284 #> 19          3          4            3             3        0.02426 #> 20          5          4            4             3        0.01643 #> 21          6          4            5             4        0.05596 #> 22          7          4            6             3        0.10284 #> 23          1          5            1             4        0.02115 #> 24          3          5            2             4        0.10284 #> 25          4          5            3             4        0.01643 #> 26          6          5            4             5        0.11014 #> 27          7          5            5             4        0.02426 #> 28          1          6            1             5        0.01501 #> 29          2          6            2             4        0.01501 #> 30          3          6            3             5        0.05596 #> 31          4          6            4             5        0.05596 #> 32          5          6            5             4        0.11014 #> 33          7          6            6             5        0.11014 #> 34          2          7            1             5        0.02115 #> 35          3          7            2             6        0.01643 #> 36          4          7            3             6        0.10284 #> 37          5          7            4             5        0.02426 #> 38          6          7            5             6        0.11014 #>  #>"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"R6 class representing nested container DispersalGenerator attributes maintained new model clones created. container maintains input output attribute names, file, function distribution templates, correlation parameters (distribution generation), rounding decimals, occupancy mask, DispersalGenerator attributes need maintained cloning.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"poems::GenerativeTemplate -> DispersalTemplate","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"description brief description generator generates. inputs array input attribute names generator. outputs array output attribute names generator. file_templates nested list file template attributes. function_templates nested list function template attributes. distribution_templates list distribution template attributes. uses_correlations boolean indicate SpatialCorrelation (inherited class) object used generating correlated random deviates. spatial_correlation SpatialCorrelation (inherited class) object generating correlated random deviates. temporal_correlation Absolute correlation coefficient simulation time steps grid cells (0-1; default = 1). time_steps Number simulation time steps. decimals Number decimal places applied generated data outputs (default: NULL = rounding). occupancy_mask Optional binary mask array (matrix), data frame, raster (stack) generated (time-series) data outputs. dispersal_friction DispersalFriction (inherited class) object dispersal distance multiplier data. distance_classes Vector distance interval boundaries (km) calculating discrete dispersal rates. max_distance_classes maximum number distance classes calculated automatically via maximum distance (default: 1000). distance_scale Scale distance values meters (default = 1). Usage: set 1 values meters, 1000 values kilometers. distance_data Data frame distance classes including indices construction compact matrices (columns: target_pop, source_pop, compact_row, distance_class). dispersal_function_data Data frame discrete dispersal function values. Optional first column may provide distance intervals (non-inclusive lower bounds). dispersal_proportion Dispersal function: p*exp(-distance/b) p parameter. Represents proportion limit dispersers model cells. dispersal_breadth Dispersal function: p*exp(-distance/b) b parameter. Represents breadth dispersal model cells. Typically estimated via average migration distance. dispersal_max_distance Dispersal maximum distance range (r) parameter limits use dispersal function: p*exp(-distance/b). function utilized distance <= r otherwise dispersal rate set zero.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"poems::GenerativeTemplate$initialize()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"DispersalTemplate$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"","code":"DispersalTemplate$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/DispersalTemplate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a nested container for dispersal generator attributes — DispersalTemplate","text":"","code":"dispersal_template <- DispersalTemplate$new() dispersal_template$dispersal_breadth <- 130 dispersal_template$dispersal_proportion <- 0.4 coordinates <- data.frame(x = rep(1:4, 4), y = rep(1:4, each = 4)) dispersal_gen <- DispersalGenerator$new(   coordinates = coordinates, inputs = c(\"dispersal_r\"),   generative_template = dispersal_template ) dispersal_gen$dispersal_breadth #> [1] 130 dispersal_gen$dispersal_proportion #> [1] 0.4"},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a nested container for generator attributes — GenerativeTemplate","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"R6 class representing nested container Generator attributes maintained new model clones created. container maintains input output attribute names, file, function distribution templates, correlation parameters (distribution generation), rounding decimals, occupancy mask, inherited class model attributes need maintained cloning.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"description brief description generator generates. inputs array input attribute names generator. outputs array output attribute names generator. file_templates list file template attributes. function_templates list function template attributes. distribution_templates list distribution template attributes. uses_correlations boolean indicate SpatialCorrelation (inherited class) object used generating correlated random deviates. spatial_correlation SpatialCorrelation (inherited class) object generating correlated random deviates. temporal_correlation Absolute correlation coefficient simulation time steps grid cells (0-1; default = 1). time_steps Number simulation time steps (default = 1). generate_rasters Boolean indicate rasters generated (default: NULL). decimals Number decimal places applied generated values (default: NULL = rounding). occupancy_mask Optional binary mask array (matrix), data frame, raster (stack) generated (time-series) data.","code":""},{"path":[]},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"GenerativeTemplate$new() GenerativeTemplate$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"Initialization method initializes generator templates.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"","code":"GenerativeTemplate$new()"},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"","code":"GenerativeTemplate$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenerativeTemplate.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a nested container for generator attributes — GenerativeTemplate","text":"","code":"gen_template <- GenerativeTemplate$new() gen_template$occupancy_mask <- array(c(1, 1, 0, 0, 1, 1, 1)) gen_template$decimals <- 4 gen_template$description <- \"Test generator\"  coordinates <- data.frame(x = c(1:4, 4:2), y = c(1, 1:4, 4:3))  generator <- Generator$new(   region = Region$new(coordinates = coordinates), attr1 = 1,   template_attached = gen_template ) generator$description #> [1] \"unnamed\" generator$occupancy_mask #> NULL generator$decimals #> NULL"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a dynamic attribute generator — Generator","title":"R6 class representing a dynamic attribute generator — Generator","text":"R6 class representing model dynamically generates attribute values (outputs) via reading data files, running assigned functions, generating sample distributions, built-functions (assigned default inherited classes), using simulation sample parameters (inputs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a dynamic attribute generator — Generator","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> Generator","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a dynamic attribute generator — Generator","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a dynamic attribute generator — Generator","text":"model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). description brief description generator generates. inputs array input attribute names generator. outputs array output attribute names generator. file_templates nested list file template attributes. function_templates nested list function template attributes. distribution_templates list distribution template attributes. uses_correlations boolean indicate SpatialCorrelation (inherited class) object used generating correlated random deviates. spatial_correlation SpatialCorrelation (inherited class) object generating correlated random deviates. temporal_correlation Absolute correlation coefficient simulation time steps grid cells (0-1; default = 1). time_steps Number simulation time steps. generate_rasters Boolean indicate rasters generated (defaults TRUE region uses rasters). decimals Number decimal places applied generated data outputs (default: NULL = rounding). occupancy_mask Optional binary mask array (matrix), data frame, raster (stack) generated (time-series) data outputs. template_attached list template-nested dynamically attached model attributes maintained via shallow new cloning. attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. generative_template nested GenerativeTemplate (inherited class) object model attributes maintained via shallow new cloning. generative_requirements list attribute names template setting (\"file\", \"function\", \"default\") required generate values. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a dynamic attribute generator — Generator","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::GenericModel$get_attribute_names() poems::GenericModel$set_attributes()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a dynamic attribute generator — Generator","text":"Generator$new() Generator$new_clone() Generator$get_attributes() Generator$generate() Generator$add_file_template() Generator$add_function_template() Generator$add_distribution_template() Generator$read_file() Generator$run_function() Generator$sample_distribution() Generator$add_generative_requirements() Generator$generative_requirements_satisfied() Generator$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Initialization method sets generative template requirements well attributes passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$new(generative_template = NULL, generative_requirements = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"generative_template GenerativeTemplate (inherited class) object containing file, function /distribution templates utilized (facilitates shallow cloning). generative_requirements list attribute names template setting (\"file\", \"function\", \"distribution\") required generate values. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-new-clone-","dir":"Reference","previous_headings":"","what":"Method new_clone()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Creates new (re-initialized) object current (inherited) object class optionally passed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$new_clone(...)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"... Parameters passed via inherited class constructor (defined initialize run via new).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dynamic attribute generator — Generator","text":"New object current (inherited) class.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-get-attributes-","dir":"Reference","previous_headings":"","what":"Method get_attributes()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Returns list existing template-generated values selected attributes attribute aliases (array parameter names provided), existing attributes (params).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$get_attributes(params = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"params Array attribute names return, including template-generated (NULL).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dynamic attribute generator — Generator","text":"List selected attributes values.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Returns list generated output values (attributes) corresponding sample input values (attributes).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$generate(input_values = list())"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"input_values List sample input values generator attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dynamic attribute generator — Generator","text":"List containing generated model output attributes /error/warning messages.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-add-file-template-","dir":"Reference","previous_headings":"","what":"Method add_file_template()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Adds file template reading raster/RData(RDS)/CSV files given model attribute.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$add_file_template(   param,   path_template,   path_params = c(),   file_type = \"GRD\" )"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"param Name model attribute read file. path_template Template string file path placeholders (see sprintf) simulation sample parameters. path_params Array names simulation sample parameters substituted (order) path template. file_type File type raster \"GRD\" (default), \"TIF\", \"RData/RDS\" \"CSV\" read.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-add-function-template-","dir":"Reference","previous_headings":"","what":"Method add_function_template()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Adds function template running user-defined function calculate given model attribute.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$add_function_template(param, function_def, call_params = c())"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"param Name model attribute generated using function. function_def Function definition (path file containing function) form: function(params), params list passed function. call_params Array names model parameters/attributes passed function via list: params.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-add-distribution-template-","dir":"Reference","previous_headings":"","what":"Method add_distribution_template()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Adds distribution template generating given model attribute via sampling distribution.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$add_distribution_template(   param,   distr_type = c(\"uniform\", \"normal\", \"lognormal\", \"beta\", \"triangular\"),   distr_params = list(),   sample = NULL,   random_seed = NULL,   normalize_threshold = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"param Name model attribute generated via sampling distribution. distr_type Distribution type sample (uniform, normal, lognormal, beta triangular). distr_params List distribution parameters values associated model attributes (uniform: lower, upper; normal: mean, sd; lognormal: meanlog, sdlog (mean, sd); beta: alpha, beta (mean, sd); triangular: lower, mode, upper). sample Model attribute(s) name(s) values associated single sample probabilities (0-1), bounds vector (e.g. sample = c(\"p_lower\", \"p_upper\")), list (e.g. sample = list(mid = \"p\", window = 0.2) bounds p +/- 0.1). random_seed Random seed utilized sample probability generated internally, via bounds, /correlated deviates. normalize_threshold Optional normalization threshold utilized generated values normalized fixed upper limit/threshold.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-read-file-","dir":"Reference","previous_headings":"","what":"Method read_file()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Reads returns value model attribute file using corresponding file template simulation sample parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$read_file(param)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"param Name model attribute read file.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dynamic attribute generator — Generator","text":"Model attribute value read file.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-run-function-","dir":"Reference","previous_headings":"","what":"Method run_function()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Returns calculated value model attribute using corresponding function template model simulation sample parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$run_function(param)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"param Name model attribute calculated using function.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dynamic attribute generator — Generator","text":"Model attribute value calculated using function.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-sample-distribution-","dir":"Reference","previous_headings":"","what":"Method sample_distribution()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Returns calculated value model attribute using corresponding distribution template simulation sample parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$sample_distribution(param)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"param Name model attribute calculated using sampling distribution.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dynamic attribute generator — Generator","text":"Model attribute value calculated via distribution sampling.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-add-generative-requirements-","dir":"Reference","previous_headings":"","what":"Method add_generative_requirements()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Adds attribute names template setting (\"file\", \"function\" \"distribution\") required generate values (via params list individually).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$add_generative_requirements(params = list(), ...)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"params Parameters passed via list (e.g. params = list(attr1 = \"file\", attr2 = \"function\", attr3 = \"distribution\")). ... Parameters passed individually (e.g. attr3 = \"file\").","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-generative-requirements-satisfied-","dir":"Reference","previous_headings":"","what":"Method generative_requirements_satisfied()","title":"R6 class representing a dynamic attribute generator — Generator","text":"Returns boolean indicate file, function /distribution template settings required attribute generation present.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$generative_requirements_satisfied()"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a dynamic attribute generator — Generator","text":"Boolean indicate required settings attribute generation present.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a dynamic attribute generator — Generator","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"Generator$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"arguments-11","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a dynamic attribute generator — Generator","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Generator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a dynamic attribute generator — Generator","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) coordinates <- coordinates[c(7, 9, 12, 14, 17:19), ] region <- Region$new(coordinates = coordinates, use_raster = FALSE) # Spatial correlation spatial_correlation <- SpatialCorrelation$new(   region = region, correlation_amplitude = 0.6,   correlation_breadth = 300 ) spatial_correlation$calculate_compact_decomposition(decimals = 4) # Example habitat suitability in file saveRDS(   array(c(0.5, 0.3, 0.7, 0.9, 0.6, 0.7, 0.8), c(7, 5)),   file.path(tempdir(), \"hs_mean_1.RData\") ) # Generator capacity_gen <- Generator$new(   description = \"capacity\",   region = region,   time_steps = 5,   spatial_correlation = spatial_correlation,   temporal_correlation = 0.9,   hs_sd = 0.1, # template attached   inputs = c(\"hs_file\", \"density_max\", \"initial_n\"),   outputs = c(\"initial_abundance\", \"carrying_capacity\") ) capacity_gen$add_generative_requirements(list(   hs_mean = \"file\",   hs_sample = \"distribution\",   carrying_capacity = \"function\",   initial_abundance = \"function\" )) # File template for mean habitat suitability capacity_gen$add_file_template(\"hs_mean\",   path_template = file.path(tempdir(), \"hs_mean_%s.RData\"),   path_params = c(\"hs_file\"), file_type = \"RDS\" ) # Distribution template for sampling habitat suitability capacity_gen$add_distribution_template(\"hs_sample\",   distr_type = \"beta\",   distr_params = list(     mean = \"hs_mean\",     sd = \"hs_sd\"   ) ) # Function templates for initial abundance and carrying capacity capacity_gen$add_function_template(\"initial_abundance\",   function_def = function(params) {     stats::rmultinom(1,       size = params$initial_n,       prob = params$hs_sample[, 1]     )   },   call_params = c(\"initial_n\", \"hs_sample\") ) capacity_gen$add_function_template(\"carrying_capacity\",   function_def = function(params) {     round(params$density_max * params$hs_sample)   },   call_params = c(\"density_max\", \"hs_sample\") ) # Generation capacity_gen$generate(input_values = list(   hs_file = 1,   initial_n = 400,   density_max = 100 )) #> $initial_abundance #>      [,1] #> [1,]   28 #> [2,]   28 #> [3,]   52 #> [4,]   92 #> [5,]   75 #> [6,]   78 #> [7,]   47 #>  #> $carrying_capacity #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   36   36   40   42   39 #> [2,]   32   31   22   18   14 #> [3,]   43   45   45   51   58 #> [4,]   93   91   91   97   97 #> [5,]   66   68   70   68   69 #> [6,]   81   87   83   78   84 #> [7,]   59   52   58   61   64 #>"},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class with generic reusable functionality — GenericClass","title":"R6 class with generic reusable functionality — GenericClass","text":"R6 class generic (abstract) new cloning functionality.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class with generic reusable functionality — GenericClass","text":"object_generator Class object generator used create new clones, particularly user inheritance. attached list dynamically attached attributes (name-value pairs).","code":""},{"path":[]},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class with generic reusable functionality — GenericClass","text":"GenericClass$new() GenericClass$new_clone() GenericClass$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class with generic reusable functionality — GenericClass","text":"Initialization method saves object generator new cloning.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class with generic reusable functionality — GenericClass","text":"","code":"GenericClass$new(object_generator = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class with generic reusable functionality — GenericClass","text":"object_generator Class object generator used create new clones, particularly user inheritance. ... Parameters passed individually (ignored).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"method-new-clone-","dir":"Reference","previous_headings":"","what":"Method new_clone()","title":"R6 class with generic reusable functionality — GenericClass","text":"Creates new (re-initialized) object current (inherited) object class optionally passed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class with generic reusable functionality — GenericClass","text":"","code":"GenericClass$new_clone(...)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class with generic reusable functionality — GenericClass","text":"... Parameters passed via inherited class constructor (defined initialize run via new).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class with generic reusable functionality — GenericClass","text":"New object current (inherited) class.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class with generic reusable functionality — GenericClass","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class with generic reusable functionality — GenericClass","text":"","code":"GenericClass$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class with generic reusable functionality — GenericClass","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericClass.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class with generic reusable functionality — GenericClass","text":"","code":"object1 <- GenericClass$new() class(object1) #> [1] \"GenericClass\" \"R6\"           # Referencing object_ref <- object1 object_ref$attached$a <- 1 object1$attached #> $a #> [1] 1 #>  # Cloning object2 <- object1$clone() object2$attached$b <- 2 object1$attached #> $a #> [1] 1 #>  object2$attached #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  # New cloning object3 <- object1$new_clone() object3$attached$c <- 3 object1$attached #> $a #> [1] 1 #>  object3$attached #> $c #> [1] 3 #>"},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a generic manager. — GenericManager","title":"R6 class representing a generic manager. — GenericManager","text":"R6 class represent generic (abstract) manager generating processing simulation results, well optionally generating values via generators.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 class representing a generic manager. — GenericManager","text":"poems::GenericClass -> GenericManager","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a generic manager. — GenericManager","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a generic manager. — GenericManager","text":"sample_data data frame sampled parameters simulation/result. generators list generators (Generator inherited class) objects generating simulation model values. parallel_cores Number cores running simulations parallel. results_dir Results directory path. results_ext Result file extension (default .RData). results_filename_attributes vector : prefix (optional); attribute names (sample data frame); postfix (optional); utilized construct results filenames. error_messages vector error messages encountered. warning_messages vector warning messages encountered.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a generic manager. — GenericManager","text":"poems::GenericClass$new_clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a generic manager. — GenericManager","text":"GenericManager$new() GenericManager$get_attribute() GenericManager$get_message_sample() GenericManager$get_results_filename() GenericManager$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a generic manager. — GenericManager","text":"Initialization method sets included attributes (sample_data, generators, parallel_cores, results_dir, results_filename_attributes) attaches attributes individually listed.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic manager. — GenericManager","text":"","code":"GenericManager$new(...)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic manager. — GenericManager","text":"... Parameters listed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"method-get-attribute-","dir":"Reference","previous_headings":"","what":"Method get_attribute()","title":"R6 class representing a generic manager. — GenericManager","text":"Returns named manager attached attribute.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic manager. — GenericManager","text":"","code":"GenericManager$get_attribute(param)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic manager. — GenericManager","text":"param Character string name attribute.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic manager. — GenericManager","text":"Selected attribute value.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"method-get-message-sample-","dir":"Reference","previous_headings":"","what":"Method get_message_sample()","title":"R6 class representing a generic manager. — GenericManager","text":"Substitutes specified sample details status message (using sprintf) returns result.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic manager. — GenericManager","text":"","code":"GenericManager$get_message_sample(status_message, sample_index)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic manager. — GenericManager","text":"status_message Character string message placeholder sample details. sample_index Row index sample data frame containing details substitution parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic manager. — GenericManager","text":"Status message substituted sample details.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"method-get-results-filename-","dir":"Reference","previous_headings":"","what":"Method get_results_filename()","title":"R6 class representing a generic manager. — GenericManager","text":"Constructs returns results filename based sample data frame index results filename attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic manager. — GenericManager","text":"","code":"GenericManager$get_results_filename(sample_index)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic manager. — GenericManager","text":"sample_index Row index sample data frame containing details substitution parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic manager. — GenericManager","text":"Results filename substituted sample details.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a generic manager. — GenericManager","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic manager. — GenericManager","text":"","code":"GenericManager$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic manager. — GenericManager","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericManager.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a generic manager. — GenericManager","text":"","code":"generic_manager <- GenericManager$new(  attr1 = 22:23,  results_filename_attributes = c(\"attr1\", \"example\") ) generic_manager$get_results_filename(1) #> [1] \"sample_1_results\" generic_manager$get_results_filename(2) #> [1] \"sample_2_results\""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a generic model. — GenericModel","title":"R6 class representing a generic model. — GenericModel","text":"R6 class generic (abstract) functionality toolset models, including model attribute get set methods resolve attribute scope (public, active, attached), attribute aliases, attribute attachment, error warning message attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 class representing a generic model. — GenericModel","text":"poems::GenericClass -> GenericModel","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a generic model. — GenericModel","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a generic model. — GenericModel","text":"model_attributes vector model attribute names. attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":[]},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a generic model. — GenericModel","text":"GenericModel$new() GenericModel$new_clone() GenericModel$get_attribute_names() GenericModel$get_attributes() GenericModel$get_attribute() GenericModel$get_attribute_aliases() GenericModel$set_attributes() GenericModel$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a generic model. — GenericModel","text":"Initialization method sets given attributes individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$new(   model_attributes = NULL,   attribute_aliases = NULL,   params = list(),   ... )"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic model. — GenericModel","text":"model_attributes vector model attribute names. attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. params Parameters passed via list. ... Parameters passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-new-clone-","dir":"Reference","previous_headings":"","what":"Method new_clone()","title":"R6 class representing a generic model. — GenericModel","text":"Creates new (re-initialized) object current (inherited) object class optionally passed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$new_clone(...)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic model. — GenericModel","text":"... Parameters passed via inherited class constructor (defined initialize run via new).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic model. — GenericModel","text":"New object current (inherited) class.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-get-attribute-names-","dir":"Reference","previous_headings":"","what":"Method get_attribute_names()","title":"R6 class representing a generic model. — GenericModel","text":"Returns array attribute names including public private model attributes, well attached attributes, error warning messages.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$get_attribute_names()"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic model. — GenericModel","text":"Array attribute names.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-get-attributes-","dir":"Reference","previous_headings":"","what":"Method get_attributes()","title":"R6 class representing a generic model. — GenericModel","text":"Returns list values selected attributes attribute aliases (array parameter names provided) attributes (params).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$get_attributes(params = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic model. — GenericModel","text":"params Array attribute names return (NULL).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic model. — GenericModel","text":"List selected attributes values.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-get-attribute-","dir":"Reference","previous_headings":"","what":"Method get_attribute()","title":"R6 class representing a generic model. — GenericModel","text":"Returns value attribute via character name attribute alias.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$get_attribute(param)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic model. — GenericModel","text":"param Character string name attribute.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic model. — GenericModel","text":"Attribute value.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-get-attribute-aliases-","dir":"Reference","previous_headings":"","what":"Method get_attribute_aliases()","title":"R6 class representing a generic model. — GenericModel","text":"Returns array attribute names aliases specified attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$get_attribute_aliases(params = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic model. — GenericModel","text":"params Array attribute names names/aliases return (NULL).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a generic model. — GenericModel","text":"Array selected attribute names aliases.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-set-attributes-","dir":"Reference","previous_headings":"","what":"Method set_attributes()","title":"R6 class representing a generic model. — GenericModel","text":"Sets given attributes (optionally via alias names) individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$set_attributes(params = list(), ...)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic model. — GenericModel","text":"params List parameters/attributes. ... Parameters/attributes passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a generic model. — GenericModel","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a generic model. — GenericModel","text":"","code":"GenericModel$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a generic model. — GenericModel","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/GenericModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a generic model. — GenericModel","text":"","code":"model1 <- GenericModel$new(   model_attributes = c(\"a\", \"b\", \"c\"),   attribute_aliases = list(A = \"a\"),   params = list(a = 1, b = 2), c = 3 ) # Get/set attributes model1$get_attribute_names() #> [1] \"a\"                \"b\"                \"c\"                \"error_messages\"   #> [5] \"warning_messages\" model1$set_attributes(d = 4) model1$get_attributes() #> $a #> [1] 1 #>  #> $b #> [1] 2 #>  #> $c #> [1] 3 #>  #> $d #> [1] 4 #>  model1$get_attribute(\"A\") #> [1] 1 model1$get_attribute(\"B\") #> NULL model1$get_attribute_aliases() # all attribute names #> [1] \"a\"                \"b\"                \"c\"                \"d\"                #> [5] \"error_messages\"   \"warning_messages\" \"A\"                # New cloning model2 <- model1$new_clone(e = 5) model2$get_attributes() #> $e #> [1] 5 #>  model2$modelattributes #> NULL model2$attribute_aliases #> $A #> [1] \"a\" #>"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"R6 class generates Latin hypercube samples (using randomLHS) parameters drawn configured distributions: uniform, Poisson, normal, lognormal, beta, truncated normal triangular. generates data frame sample values.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"poems::GenericClass -> LatinHypercubeSampler","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_names vector sample parameter names. parameter_distributions list sample distribution values (nested list appropriate parameters).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"poems::GenericClass$new_clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"LatinHypercubeSampler$new() LatinHypercubeSampler$set_class_parameter() LatinHypercubeSampler$set_uniform_parameter() LatinHypercubeSampler$set_normal_parameter() LatinHypercubeSampler$set_poisson_parameter() LatinHypercubeSampler$set_lognormal_parameter() LatinHypercubeSampler$set_beta_parameter() LatinHypercubeSampler$set_truncnorm_parameter() LatinHypercubeSampler$set_triangular_parameter() LatinHypercubeSampler$generate_samples() LatinHypercubeSampler$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Initialization method sets parameter names provided.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$new(parameter_names = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_names Optional vector sample parameter names. ... Additional parameters passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-class-parameter-","dir":"Reference","previous_headings":"","what":"Method set_class_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled vector classes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_class_parameter(parameter_name, classes)"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. classes Vector class values.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-uniform-parameter-","dir":"Reference","previous_headings":"","what":"Method set_uniform_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled uniform distribution lower upper bounds, optionally rounded specified number decimal places.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_uniform_parameter(   parameter_name,   lower = 0,   upper = 1,   decimals = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. lower Lower bound uniform distribution (default = 0). upper Upper bound uniform distribution (default = 1). decimals Optional number decimals applied generated samples.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-normal-parameter-","dir":"Reference","previous_headings":"","what":"Method set_normal_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled normal distribution mean standard deviation, optionally rounded specified number decimal places.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_normal_parameter(   parameter_name,   mean = 0,   sd = 1,   decimals = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. mean Mean parameter normal distribution (default = 0). sd Standard deviation parameter normal distribution (default = 1). decimals Optional number decimals applied generated samples.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-poisson-parameter-","dir":"Reference","previous_headings":"","what":"Method set_poisson_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled Poisson distribution lambda parameter. Produces integers.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_poisson_parameter(parameter_name, lambda = 1)"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. lambda Lambda parameter Poisson distribution. Must positive (default = 1).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-lognormal-parameter-","dir":"Reference","previous_headings":"","what":"Method set_lognormal_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled lognormal distribution log mean log standard deviation, optionally expressed regular mean SD (overriding log mean/sd), optionally rounded specified number decimal places.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_lognormal_parameter(   parameter_name,   meanlog = 0,   sdlog = 1,   mean = NULL,   sd = NULL,   decimals = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. meanlog Log mean parameter lognormal distribution (default = 0). sdlog Log standard deviation parameter lognormal distribution (default = 1). mean Optional (overriding) regular mean parameter lognormal distribution (default = NULL). sd Optional (overriding) standard deviation parameter lognormal distribution (default = NULL). decimals Optional number decimals applied generated samples.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-beta-parameter-","dir":"Reference","previous_headings":"","what":"Method set_beta_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled beta distribution configured alpha beta parameters, optionally mean standard deviation (overriding alpha beta), optionally rounded specified number decimal places.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_beta_parameter(   parameter_name,   alpha = 1,   beta = 1,   mean = NULL,   sd = NULL,   decimals = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. alpha Shaping (towards 1) parameter (> 0) beta distribution (default = 1). beta Shaping (towards 0) parameter (> 0) beta distribution (default = 1). mean Optional (overriding) mean parameter beta distribution (default = NULL). sd Optional (overriding) standard deviation parameter beta distribution (default = NULL). decimals Optional number decimals applied generated samples.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-truncnorm-parameter-","dir":"Reference","previous_headings":"","what":"Method set_truncnorm_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled truncated normal distribution mean, standard deviation, lower upper bounds, optionally rounded specified number decimal places.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_truncnorm_parameter(   parameter_name,   mean = 0,   sd = 1,   lower = -Inf,   upper = Inf,   decimals = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. mean Mean parameter truncated normal distribution (default = 0). sd Standard deviation truncated normal distribution (default = 1). lower Lower bound truncated normal distribution (default = -Inf, meaning lower bound). upper Upper bound truncated normal distribution (default = Inf, meaning upper bound). decimals Optional number decimals generated samples rounded .","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-set-triangular-parameter-","dir":"Reference","previous_headings":"","what":"Method set_triangular_parameter()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Sets parameter sampled triangular distribution lower upper bounds mode (peak), optionally rounded specified number decimal places.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$set_triangular_parameter(   parameter_name,   lower = 0,   upper = 1,   mode = (lower + upper)/2,   decimals = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"parameter_name Character string name sample parameter. lower Lower bound triangular distribution (default = 0). upper Upper bound triangular distribution (default = 1). mode Mode (peak) triangular distribution (default = (lower + upper)/2). decimals Optional number decimals applied generated samples.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-generate-samples-","dir":"Reference","previous_headings":"","what":"Method generate_samples()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"Generates Latin hypercube sample data (via randomLHS) set parameters using corresponding distributions.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$generate_samples(number = 10, random_seed = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"number Number samples generate (default = 10). random_seed Optional seed random generation samples.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"data frame generated sample values.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"LatinHypercubeSampler$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"arguments-10","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/LatinHypercubeSampler.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class to represent a Latin hypercube sampler. — LatinHypercubeSampler","text":"","code":"lhs_gen <- LatinHypercubeSampler$new(parameter_names = c(\"size\", \"age\", \"km\", \"price\")) lhs_gen$set_class_parameter(\"size\", c(\"small\", \"medium\", \"large\")) lhs_gen$set_uniform_parameter(\"age\", lower = 18, upper = 70, decimals = 0) lhs_gen$set_poisson_parameter(\"offspring\", lambda = 2) lhs_gen$set_normal_parameter(\"km\", mean = 50000, sd = 20000, decimals = 0) lhs_gen$set_truncnorm_parameter(\"kg\", mean = 75, sd = 20, lower = 0, upper = Inf, decimals = 2) lhs_gen$set_lognormal_parameter(\"price\", mean = 30000, sd = 10000, decimals = 0) lhs_gen$set_beta_parameter(\"tread\", mean = 0.7, sd = 0.1, decimals = 2) lhs_gen$set_triangular_parameter(\"rating\",   lower = 0, upper = 10, mode = 5,   decimals = 1 ) lhs_gen$generate_samples(number = 10, random_seed = 123) #>      size age    km price offspring     kg tread rating #> 1  medium  58 81395 27974         2  40.79  0.62    4.4 #> 2   small  40 67785 35994         0  68.14  0.66    8.0 #> 3   small  50 57527 48720         2  81.81  0.63    5.5 #> 4   large  64 66229 40466         2  75.74  0.91    7.1 #> 5  medium  28 37868 28792         3 127.10  0.72    5.8 #> 6   large  35 46512 22199         1  58.06  0.47    4.5 #> 7   small  32 30269 33404         1  73.68  0.81    6.6 #> 8  medium  48 54963 24981         0  87.93  0.73    2.4 #> 9   large  66 10421 19036         3  62.94  0.78    3.5 #> 10 medium  19 40146 16062         5  93.44  0.69    1.0"},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a model simulator. — ModelSimulator","title":"R6 class representing a model simulator. — ModelSimulator","text":"R6 class running individual model simulations via simulation function, storing results, generating success/error statuses.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 class representing a model simulator. — ModelSimulator","text":"poems::GenericClass -> ModelSimulator","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a model simulator. — ModelSimulator","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a model simulator. — ModelSimulator","text":"simulation_model SimulationModel object inherited class object. simulation_function Name (character string) direct assignment (assigned loaded via source path) simulation function, takes SimulationModel (inherited class) input returns simulation results. sample_id identifier simulation sample. results list result structures.","code":""},{"path":[]},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a model simulator. — ModelSimulator","text":"ModelSimulator$new() ModelSimulator$new_clone() ModelSimulator$get_attribute() ModelSimulator$run() ModelSimulator$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a model simulator. — ModelSimulator","text":"Initialization method sets population model, optionally simulation function, sample ID, attached attributes listed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a model simulator. — ModelSimulator","text":"","code":"ModelSimulator$new(   simulation_model = NULL,   simulation_function = NULL,   sample_id = NULL,   ... )"},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a model simulator. — ModelSimulator","text":"simulation_model SimulationModel (inherited class) object (can set later). simulation_function Optional name (character string) direct assignment (assigned loaded via source path) simulation function, takes SimulationModel (inherited class) input returns simulation results. sample_id Optional identifier simulation sample. ... Additional parameters passed individually attached.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"method-new-clone-","dir":"Reference","previous_headings":"","what":"Method new_clone()","title":"R6 class representing a model simulator. — ModelSimulator","text":"Creates new (re-initialized) object current (inherited) object class optionally passed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a model simulator. — ModelSimulator","text":"","code":"ModelSimulator$new_clone(...)"},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a model simulator. — ModelSimulator","text":"... Parameters passed via inherited class constructor (defined initialize run via new).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a model simulator. — ModelSimulator","text":"New object current (inherited) class.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"method-get-attribute-","dir":"Reference","previous_headings":"","what":"Method get_attribute()","title":"R6 class representing a model simulator. — ModelSimulator","text":"Returns selected named simulator attached attribute.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a model simulator. — ModelSimulator","text":"","code":"ModelSimulator$get_attribute(param)"},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a model simulator. — ModelSimulator","text":"param Name parameter/attribute.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a model simulator. — ModelSimulator","text":"Selected parameter/attribute value.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"R6 class representing a model simulator. — ModelSimulator","text":"Runs model simulator (function), stores results, creates status log entry list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a model simulator. — ModelSimulator","text":"","code":"ModelSimulator$run()"},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a model simulator. — ModelSimulator","text":"list representing simulation log entry successful boolean status message template (placeholder sample identifier).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a model simulator. — ModelSimulator","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a model simulator. — ModelSimulator","text":"","code":"ModelSimulator$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a model simulator. — ModelSimulator","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ModelSimulator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a model simulator. — ModelSimulator","text":"","code":"# Simulation model model1 <- SimulationModel$new(   time_steps = 10,   model_attributes = c(\"time_steps\", \"a\", \"b\"),   params = list(a = 1:7) ) model1$required_attributes <- model1$model_attributes # Simulation function test_simulator <- function(model) {   sum(unlist(model$get_attributes(model$required_attributes))) } # Model simulator simulator1 <- ModelSimulator$new(   simulation_model = model1,   simulation_function = test_simulator ) simulator1$run() #> $successful #> [1] FALSE #>  #> $message #> [1] \"Model %s attributes are incomplete/inconsistent: a, b\" #>  model1$set_attributes(a = 1:10, b = 15) model1$get_attributes(model1$required_attributes) #> $time_steps #> [1] 10 #>  #> $a #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $b #> [1] 15 #>  simulator1$run() #> $successful #> [1] TRUE #>  #> $message #> [1] \"Model %s simulation ran successfully\" #>  simulator1$results #> [1] 80"},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a population model — PopulationModel","title":"R6 class representing a population model — PopulationModel","text":"R6 class representing spatially-explicit demographic-based population model. extends SimulationModel class parameters population_simulator function. inherits functionality creating nested model, whereby nested template model fixed parameters maintained model cloned various sampled parameters. Also provided extensions methods checking consistency completeness model parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a population model — PopulationModel","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> poems::SimulationModel -> PopulationModel","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a population model — PopulationModel","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a population model — PopulationModel","text":"simulation_function Name (character string) source path default simulation function, takes model input returns simulation results. model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). random_seed Number seed random number generation stochasticity. replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. populations Number population cells. stages Number life cycle stages. initial_abundance Array (matrix) raster (stack) initial abundance values population cell (age/stage). stage_matrix Matrix transition (fecundity & survival) rates stages time step (Leslie/Lefkovitch matrix). fecundity_mask Matrix 0-1 indicate (proportions) transition rates refer fecundity. fecundity_max Maximum transition fecundity rate (Leslie/Lefkovitch matrix). demographic_stochasticity Boolean choosing demographic stochasticity transition, dispersal, harvest /processes. standard_deviation Standard deviation matrix (single value) applying environmental stochasticity transition rates. correlation Simulator-dependent attribute list attributes describing/parameterizing correlation strategy utilized applying environmental stochasticity /processes (see population_simulator). carrying_capacity Array (matrix), raster (stack) carrying capacity values population cell (across time). density_dependence Simulator-dependent function, attribute list attributes describing/parameterizing density dependence strategy utilized (see population_simulator). growth_rate_max Maximum growth rate (utilized density dependence processes). density_affects Transition vital rates affected density, including \"fecundity\", \"survival\", matrix booleans numeric (0-1) indicating vital rates affected (default ). density_stages Array booleans numeric (0-1) stage indicate (degree ) stages affected density (default 1 stages). translocation Simulator-dependent function, attribute list attributes describing/parameterizing translocation (management) strategies utilized (see population_simulator). harvest Simulator-dependent function, attribute list attributes describing/parameterizing harvest (organism removal/hunting) strategy (see population_simulator). mortality Simulator-dependent function, attribute list attributes describe/parameterize spatio-temporal mortality strategy (see population_simulator). dispersal Simulator-dependent function, attribute list attributes describing/parameterizing dispersal (migration) strategy utilized (see population_simulator). dispersal_stages Array relative dispersal (0-1) stage indicate degree stage participates dispersal (default 1 stages). dispersal_source_n_k Simulator-dependent attribute describing/parameterizing dispersal dependent source population abundance divided carrying capacity (see population_simulator). dispersal_target_k Simulator-dependent attribute describing/parameterizing dispersal dependent target population carrying capacity (see population_simulator). dispersal_target_n Simulator-dependent attribute (default list threshold cutoff) attributes describing/parameterizing dispersal dependent target population abundance (see population_simulator). dispersal_target_n_k Simulator-dependent attribute (default list threshold cutoff) attributes describing/parameterizing dispersal dependent target population abundance/capacity (see population_simulator). abundance_threshold Abundance threshold (needs exceeded) population persist. simulation_order vector simulation process names configured order execution (default \"transition\", \"translocation\", \"harvest\", \"mortality\", \"dispersal\", \"results\"). results_selection List attributes included returned results simulation run, selected : \"abundance\", \"ema\", \"extirpation\", \"extinction_location\", \"harvested\", \"occupancy\"; \"summarize\" \"replicate\". result_stages Array booleans numeric (0, 1, 2, ...) stage indicate stages included/combined (unique digit > 0; optionally named) results (default 1 stages). attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. template_model Nested template model fixed (non-sampled) attributes shallow cloning. sample_attributes Vector sample attribute names (). required_attributes Vector required attribute names (), .e. needed run simulation. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a population model — PopulationModel","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::SimulationModel$get_attribute_names() poems::SimulationModel$get_attributes() poems::SimulationModel$incomplete_attributes() poems::SimulationModel$inconsistent_attributes() poems::SimulationModel$is_complete() poems::SimulationModel$is_consistent() poems::SimulationModel$list_completeness() poems::SimulationModel$new_clone() poems::SimulationModel$set_attributes() poems::SimulationModel$set_sample_attributes()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a population model — PopulationModel","text":"PopulationModel$new() PopulationModel$list_consistency() PopulationModel$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a population model — PopulationModel","text":"Initialization method sets default aliases given attributes individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a population model — PopulationModel","text":"","code":"PopulationModel$new(attribute_aliases = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a population model — PopulationModel","text":"attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"method-list-consistency-","dir":"Reference","previous_headings":"","what":"Method list_consistency()","title":"R6 class representing a population model — PopulationModel","text":"Returns boolean indicate (optionally selected ) model attributes (dimensions) consistent.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a population model — PopulationModel","text":"","code":"PopulationModel$list_consistency(params = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a population model — PopulationModel","text":"params Optional array parameter/attribute names.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a population model — PopulationModel","text":"List booleans (NAs) indicate consistency selected/attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a population model — PopulationModel","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a population model — PopulationModel","text":"","code":"PopulationModel$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a population model — PopulationModel","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a population model — PopulationModel","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) # Harvest function harvest <- list(   rate = NA, # set later   function(params) round(params$stage_abundance * (1 - params$rate)) ) harvest_rate_alias <- list(harvest_rate = \"harvest$rate\") # Template model stage_matrix <- matrix(c(   0, 2.5, # Leslie/Lefkovitch matrix   0.8, 0.5 ), nrow = 2, ncol = 2, byrow = TRUE) template_model <- PopulationModel$new(   region = region,   time_steps = 10, # years   populations = region$region_cells, # 7   stage_matrix = stage_matrix,   harvest = harvest,   results_selection = c(\"abundance\", \"harvested\"),   attribute_aliases = harvest_rate_alias ) template_model$model_attributes #>  [1] \"region\"                    \"coordinates\"               #>  [3] \"random_seed\"               \"replicates\"                #>  [5] \"time_steps\"                \"years_per_step\"            #>  [7] \"populations\"               \"stages\"                    #>  [9] \"initial_abundance\"         \"stage_matrix\"              #> [11] \"fecundity_mask\"            \"fecundity_max\"             #> [13] \"demographic_stochasticity\" \"standard_deviation\"        #> [15] \"correlation\"               \"carrying_capacity\"         #> [17] \"density_dependence\"        \"growth_rate_max\"           #> [19] \"density_affects\"           \"density_stages\"            #> [21] \"translocation\"             \"harvest\"                   #> [23] \"mortality\"                 \"dispersal\"                 #> [25] \"dispersal_stages\"          \"dispersal_source_n_k\"      #> [27] \"dispersal_target_k\"        \"dispersal_target_n\"        #> [29] \"dispersal_target_n_k\"      \"abundance_threshold\"       #> [31] \"simulation_order\"          \"results_selection\"         #> [33] \"result_stages\"             template_model$required_attributes #> [1] \"time_steps\"        \"initial_abundance\" \"stage_matrix\"      #> [4] \"carrying_capacity\" # Nested model nested_model <- PopulationModel$new(template_model = template_model) nested_model$incomplete_attributes() #> [1] \"initial_abundance\" \"carrying_capacity\" nested_model$set_sample_attributes(   initial_abundance = rep(10, 7),   carrying_capacity = array(70:1, c(10, 7)),   harvest_rate = 0.3 ) nested_model$inconsistent_attributes() #> [1] \"carrying_capacity\" nested_model$carrying_capacity <- array(70:1, c(7, 10)) nested_model$is_consistent() #> [1] TRUE nested_model$is_complete() #> [1] TRUE nested_model$harvest$rate #> [1] 0.3"},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing population simulator results. — PopulationResults","title":"R6 class representing population simulator results. — PopulationResults","text":"R6 class encapsulating dynamically generating spatially-explicit population_simulator results, well optional re-generated Generator outputs.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing population simulator results. — PopulationResults","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> poems::SimulationResults -> PopulationResults","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing population simulator results. — PopulationResults","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing population simulator results. — PopulationResults","text":"model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). time_steps Number simulation time steps. burn_in_steps Optional number initial 'burn-' time steps ignored. occupancy_mask Optional binary mask array (matrix), data frame, raster (stack) cell time-step simulation including burn-. trend_interval Optional time-step range (indices) trend calculations (assumes indices begin burn-utilized). abundance Population abundance across simulation time-steps (summary list replicate array). abundance_stages Population abundance combined stages across simulation time-steps (list summary lists replicate arrays combined stage). abundance_trend Trend average Sen's slope abundance (optionally across time-step interval). ema Array population expected minimum abundance (EMA) across simulation time-steps. extirpation Array population extirpation times. extinction_location weighted centroid cells occupied time-step prior extirpation populations (occurred). harvested Number animals harvested population across simulation time-steps (summary list replicate array). harvested_stages Number animals harvested population combined stages across simulation time-steps (list summary lists replicate arrays combined stage). occupancy Array number populations occupied time-step. Nested simulation results cells. parent Parent simulation results individual cells. default Default value/attribute utilized applying primitive metric functions (e.g. max) results. attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing population simulator results. — PopulationResults","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::SimulationResults$get_attribute_names() poems::SimulationResults$get_attributes() poems::SimulationResults$initialize() poems::SimulationResults$new_clone() poems::SimulationResults$set_attributes()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing population simulator results. — PopulationResults","text":"PopulationResults$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing population simulator results. — PopulationResults","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing population simulator results. — PopulationResults","text":"","code":"PopulationResults$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing population simulator results. — PopulationResults","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/PopulationResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing population simulator results. — PopulationResults","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )  # Sample results occupancy (ignore cell 2 in last 5 time steps) occupancy_raster <- region$raster_from_values(array(1, c(7, 13))) occupancy_raster[region$region_indices][2, 9:13] <- 0 occupancy_raster[region$region_indices] #>      layer.1 layer.2 layer.3 layer.4 layer.5 layer.6 layer.7 layer.8 layer.9 #> [1,]       1       1       1       1       1       1       1       1       1 #> [2,]       1       1       1       1       1       1       1       1       0 #> [3,]       1       1       1       1       1       1       1       1       1 #> [4,]       1       1       1       1       1       1       1       1       1 #> [5,]       1       1       1       1       1       1       1       1       1 #> [6,]       1       1       1       1       1       1       1       1       1 #> [7,]       1       1       1       1       1       1       1       1       1 #>      layer.10 layer.11 layer.12 layer.13 #> [1,]        1        1        1        1 #> [2,]        0        0        0        0 #> [3,]        1        1        1        1 #> [4,]        1        1        1        1 #> [5,]        1        1        1        1 #> [6,]        1        1        1        1 #> [7,]        1        1        1        1 # Population simulation example results example_results <- list(abundance = t(apply(matrix(11:17), 1, function(n) {   c(rep(n, 3), round(n * exp(-(0:9) / 2))) }))) example_results$harvested <- round(example_results$abundance * 0.3) example_results #> $abundance #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #> [1,]   11   11   11   11    7    4    2    1    1     1     0     0     0 #> [2,]   12   12   12   12    7    4    3    2    1     1     0     0     0 #> [3,]   13   13   13   13    8    5    3    2    1     1     0     0     0 #> [4,]   14   14   14   14    8    5    3    2    1     1     0     0     0 #> [5,]   15   15   15   15    9    6    3    2    1     1     0     0     0 #> [6,]   16   16   16   16   10    6    4    2    1     1     0     0     0 #> [7,]   17   17   17   17   10    6    4    2    1     1     1     0     0 #>  #> $harvested #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] [,11] [,12] [,13] #> [1,]    3    3    3    3    2    1    1    0    0     0     0     0     0 #> [2,]    4    4    4    4    2    1    1    1    0     0     0     0     0 #> [3,]    4    4    4    4    2    2    1    1    0     0     0     0     0 #> [4,]    4    4    4    4    2    2    1    1    0     0     0     0     0 #> [5,]    4    4    4    4    3    2    1    1    0     0     0     0     0 #> [6,]    5    5    5    5    3    2    1    1    0     0     0     0     0 #> [7,]    5    5    5    5    3    2    1    1    0     0     0     0     0 #>  # Population results object pop_results <- PopulationResults$new(   region = region,   time_steps = 13,   burn_in_steps = 3,   occupancy_mask = occupancy_raster,   trend_interval = 1:5 ) pop_results$get_attribute_names(all = TRUE) #>  [1] \"region\"                  \"coordinates\"             #>  [3] \"time_steps\"              \"burn_in_steps\"           #>  [5] \"occupancy_mask\"          \"trend_interval\"          #>  [7] \"abundance\"               \"abundance_stages\"        #>  [9] \"abundance_trend\"         \"ema\"                     #> [11] \"extirpation\"             \"extinction_location\"     #> [13] \"harvested\"               \"harvested_stages\"        #> [15] \"occupancy\"               \"error_messages\"          #> [17] \"warning_messages\"        \"all$region\"              #> [19] \"all$coordinates\"         \"all$time_steps\"          #> [21] \"all$burn_in_steps\"       \"all$occupancy_mask\"      #> [23] \"all$trend_interval\"      \"all$abundance\"           #> [25] \"all$abundance_stages\"    \"all$abundance_trend\"     #> [27] \"all$ema\"                 \"all$extirpation\"         #> [29] \"all$extinction_location\" \"all$harvested\"           #> [31] \"all$harvested_stages\"    \"all$occupancy\"           #> [33] \"all$error_messages\"      \"all$warning_messages\"    # Clone (for each population simulation results) results_clone <- pop_results$new_clone(results = example_results) #> Error in h(simpleError(msg, call)): error in evaluating the argument 'i' in selecting a method for function '[': object 'region' not found results_clone$all$get_attribute(\"abundance\") #> Error in eval(expr, envir, enclos): object 'results_clone' not found results_clone$get_attributes(c(   \"abundance\", \"all$abundance\",   \"abundance_trend\", \"all$abundance_trend\",   \"all$ema\", # only defined for all   \"extirpation\", \"all$extirpation\",   \"all$extinction_location\", # only defined for all   \"harvested\", \"all$harvested\",   \"occupancy\", \"all$occupancy\" )) #> Error in eval(expr, envir, enclos): object 'results_clone' not found"},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a study region. — Region","title":"R6 class representing a study region. — Region","text":"R6 class representing study region spatial grid cells defined via list longitude/latitude cell coordinates (WGS84), RasterLayer object (see raster).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"super-class","dir":"Reference","previous_headings":"","what":"Super class","title":"R6 class representing a study region. — Region","text":"poems::GenericClass -> Region","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a study region. — Region","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a study region. — Region","text":"coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). region_raster RasterLayer object (see raster) defining region finite values (NAs elsewhere). use_raster Boolean indicate raster used define region (default TRUE). strict_consistency Boolean indicate , well resolution, extent CRS, consistency checks also ensure raster's finite/occupiable cells subset defined region (default TRUE). region_cells Dynamically calculated number region coordinates raster cells finite/non-NA values. region_indices Dynamically calculated region indices raster cells finite/non-NA values (raster).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a study region. — Region","text":"poems::GenericClass$new_clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a study region. — Region","text":"Region$new() Region$raster_is_consistent() Region$raster_from_values() Region$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a study region. — Region","text":"Initialization method sets coordinates raster region.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a study region. — Region","text":"","code":"Region$new(   coordinates = NULL,   template_raster = NULL,   region_raster = NULL,   use_raster = TRUE,   ... )"},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a study region. — Region","text":"coordinates Data frame (matrix) X-Y coordinates (WGS84) longitude (degrees West) latitude (degrees North). template_raster RasterLayer object (see raster) defining region example finite values (NAs elsewhere) region_raster RasterLayer object (see raster) defining region finite cell indices (NAs elsewhere). use_raster Boolean indicate raster used define region (default TRUE). ... Additional parameters passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"method-raster-is-consistent-","dir":"Reference","previous_headings":"","what":"Method raster_is_consistent()","title":"R6 class representing a study region. — Region","text":"Returns boolean indicate raster consistent region raster (matching extent, resolution, finite/NA cells).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a study region. — Region","text":"","code":"Region$raster_is_consistent(check_raster)"},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a study region. — Region","text":"check_raster RasterLayer, RasterStack RasterBrick object (see raster) check consistency region raster.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a study region. — Region","text":"Boolean indicate raster consistent region raster.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"method-raster-from-values-","dir":"Reference","previous_headings":"","what":"Method raster_from_values()","title":"R6 class representing a study region. — Region","text":"Converts array (matrix) values raster (stack) consistent region raster (matching extent, resolution, finite/NA cells).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a study region. — Region","text":"","code":"Region$raster_from_values(values)"},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a study region. — Region","text":"values array (matrix) values placed raster (stack) dimensions consistent region cell number.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a study region. — Region","text":"RasterLayer (RasterStack/Brick) object consistent region raster.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a study region. — Region","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a study region. — Region","text":"","code":"Region$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a study region. — Region","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Region.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a study region. — Region","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (cell indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )  region$region_cells #> [1] 7 region$coordinates #>        x      y #> 1 177.02 -18.02 #> 2 177.04 -18.02 #> 3 177.02 -18.03 #> 4 177.04 -18.03 #> 5 177.02 -18.04 #> 6 177.03 -18.04 #> 7 177.04 -18.04 # Generate value layers value_brick <- region$raster_from_values(array(8:28, c(7, 3))) raster::plot(value_brick,   main = \"Example value layers\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )  value_brick[region$region_indices] #>      layer.1 layer.2 layer.3 #> [1,]       8      15      22 #> [2,]       9      16      23 #> [3,]      10      17      24 #> [4,]      11      18      25 #> [5,]      12      19      26 #> [6,]      13      20      27 #> [7,]      14      21      28"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a results manager. — ResultsManager","title":"R6 class representing a results manager. — ResultsManager","text":"R6 class represent manager generating summary metrics /matrices simulation results, well optionally regenerating values via generators.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a results manager. — ResultsManager","text":"poems::GenericClass -> poems::GenericManager -> ResultsManager","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a results manager. — ResultsManager","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a results manager. — ResultsManager","text":"sample_data data frame sampled parameters simulation/result. simulation_results object class inherited SimulationResults class encapsulating dynamically generating simulation results. generators list generators (Generator inherited class) objects (optionally) regenerating simulation model values. result_attachment_functions list functions attaching intermediate values simulation results prior generation. summary_metrics array names summary metrics, calculated single values simulation. refer list names summary functions. summary_matrices array names summary matrices, calculated single matrix row simulation. refer list names summary functions. summary_functions list functions, result attributes, constants transforming individual simulation results single summary metric values stored metric data frame, matrix rows stored summary matrix list. summary_metric_data data frame generated summary metrics (one row per simulation). summary_matrix_list list generated matrices summary results (one row per simulation). summary_matrix_weighted_averages list calculated weighted averages summary matrices (using sample data weight column). parallel_cores Number cores running simulations parallel. results_dir Results directory path. results_ext Result file extension (default .RData). results_filename_attributes vector : prefix (optional); attribute names (sample data frame); postfix (optional); utilized construct results filenames. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a results manager. — ResultsManager","text":"poems::GenericClass$new_clone() poems::GenericManager$get_attribute() poems::GenericManager$get_message_sample() poems::GenericManager$get_results_filename()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a results manager. — ResultsManager","text":"ResultsManager$new() ResultsManager$generate() ResultsManager$calculate_result_attachments() ResultsManager$calculate_summaries() ResultsManager$log_generation() ResultsManager$calculate_summary_weighted_averages() ResultsManager$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a results manager. — ResultsManager","text":"Initialization method optionally copies attributes simulation (results) manager, sets included attributes (sample_data, simulation_results, generators, result_attachment_functions, summary_metrics, summary_functions, parallel_cores, results_dir, results_ext, results_filename_attributes), attaches attributes individually listed.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"ResultsManager$new(simulation_manager = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a results manager. — ResultsManager","text":"simulation_manager Optional SimulationManager object (object inherited GenericManager class), simulation attributes can copied. ... Parameters listed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"method-generate-","dir":"Reference","previous_headings":"","what":"Method generate()","title":"R6 class representing a results manager. — ResultsManager","text":"Generates summary metric data /matrix list via summary functions simulation sample, creates/writes generation log.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"ResultsManager$generate(results_dir = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a results manager. — ResultsManager","text":"results_dir Results directory path (must present already set within manager class object).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a results manager. — ResultsManager","text":"Generation log list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"method-calculate-result-attachments-","dir":"Reference","previous_headings":"","what":"Method calculate_result_attachments()","title":"R6 class representing a results manager. — ResultsManager","text":"Calculates attaches intermediate values sample result model (via result attachment functions).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"ResultsManager$calculate_result_attachments(simulation_results)"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a results manager. — ResultsManager","text":"simulation_results sample simulation results, object class inherited SimulationResults, intermediate results attached.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"method-calculate-summaries-","dir":"Reference","previous_headings":"","what":"Method calculate_summaries()","title":"R6 class representing a results manager. — ResultsManager","text":"Calculates summary metrics /matrices results sample simulation (via summary functions).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"ResultsManager$calculate_summaries(simulation_results, sample_index)"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a results manager. — ResultsManager","text":"simulation_results sample simulation results, object class inherited SimulationResults. sample_index Index sample data frame.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a results manager. — ResultsManager","text":"Generation log entry (nested) list, including generated summary metric data (optionally) matrices.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"method-log-generation-","dir":"Reference","previous_headings":"","what":"Method log_generation()","title":"R6 class representing a results manager. — ResultsManager","text":"Summarizes log generated within generate method writes text file results directory.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"ResultsManager$log_generation(generation_log)"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a results manager. — ResultsManager","text":"generation_log Nested list log entries generated via generate method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a results manager. — ResultsManager","text":"Extended generation log nested added summary failure/warning indices.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"method-calculate-summary-weighted-averages-","dir":"Reference","previous_headings":"","what":"Method calculate_summary_weighted_averages()","title":"R6 class representing a results manager. — ResultsManager","text":"Calculates weighted averages summary matrices (providing sample data weight column).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"ResultsManager$calculate_summary_weighted_averages(na_replacements = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a results manager. — ResultsManager","text":"na_replacements List values functions (form: modified_matrix <- function(matrix)) dealing NA values summary matrix (default NULL ignore NAs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a results manager. — ResultsManager","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"ResultsManager$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a results manager. — ResultsManager","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/ResultsManager.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a results manager. — ResultsManager","text":"","code":"if (FALSE) { # interactive() # U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" ) # Results manager results_manager <- ResultsManager$new(   sample_data = data.frame(index = 1:3),   simulation_results = PopulationResults$new(region = region),   summary_metrics = c(\"trend_n\", \"total_h\"),   summary_matrices = c(\"n\", \"h\"),   summary_functions = list(     trend_n = function(results) {       round(results$all$abundance_trend, 2)     },     total_h = function(results) {       sum(results$harvested)     },     n = \"all$abundance\", # string     h = \"all$harvested\"   ),   parallel_cores = 2,   results_dir = tempdir() ) # Write example result files results <- list() for (i in 1:3) {   results[[i]] <- list(abundance = t(apply(     matrix(11:17), 1,     function(n) round(n * exp(-(0:9) / i))   )))   results[[i]]$harvested <- round(results[[i]]$abundance * i / 7)   file_name <- paste0(results_manager$get_results_filename(i), \".RData\")   saveRDS(results[[i]], file.path(tempdir(), file_name)) } # Generate result metrics and matrices gen_output <- results_manager$generate() gen_output$summary dir(tempdir(), \"*.txt\") # plus generation log results_manager$summary_metric_data results_manager$summary_matrix_list }"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a simulation manager. — SimulationManager","title":"R6 class representing a simulation manager. — SimulationManager","text":"R6 class represent manager running multiple model simulations saving results.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a simulation manager. — SimulationManager","text":"poems::GenericClass -> poems::GenericManager -> SimulationManager","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a simulation manager. — SimulationManager","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a simulation manager. — SimulationManager","text":"sample_data data frame sampled parameters simulation/result. model_template SimulationModel (inherited class) object parameters common simulations. nested_model SimulationModel (inherited class) object empty sample parameters nested model template common simulations. generators list generators (Generator inherited class) objects generating simulation model values. model_simulator ModelSimulator (inherited class) object running simulations. parallel_cores Number cores running simulations parallel. results_dir Results directory path. results_ext Result file extension (default .RData). results_filename_attributes vector : prefix (optional); attribute names (sample data frame); postfix (optional); utilized construct results filenames. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a simulation manager. — SimulationManager","text":"poems::GenericClass$new_clone() poems::GenericManager$get_attribute() poems::GenericManager$get_message_sample() poems::GenericManager$get_results_filename()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a simulation manager. — SimulationManager","text":"SimulationManager$new() SimulationManager$run() SimulationManager$set_model_sample() SimulationManager$log_simulation() SimulationManager$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a simulation manager. — SimulationManager","text":"Initialization method sets included attributes (sample_data, model_template, generators, model_simulator, parallel_cores, results_dir, results_filename_attributes) attaches attributes individually listed.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation manager. — SimulationManager","text":"","code":"SimulationManager$new(model_template = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation manager. — SimulationManager","text":"model_template SimulationModel (inherited class) object parameters common simulations. ... Parameters listed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"R6 class representing a simulation manager. — SimulationManager","text":"Runs multiple population simulations (via set function), stores results, creates/writes simulation log.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation manager. — SimulationManager","text":"","code":"SimulationManager$run(results_dir = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation manager. — SimulationManager","text":"results_dir Results directory path (must present already set within manager class object).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation manager. — SimulationManager","text":"Simulator log list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"method-set-model-sample-","dir":"Reference","previous_headings":"","what":"Method set_model_sample()","title":"R6 class representing a simulation manager. — SimulationManager","text":"Sets model sample attributes via sample data frame generators.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation manager. — SimulationManager","text":"","code":"SimulationManager$set_model_sample(model, sample_index)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation manager. — SimulationManager","text":"model SimulationModel (inherited class) object (clone) receive sample attributes. sample_index Index sample data frame.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"method-log-simulation-","dir":"Reference","previous_headings":"","what":"Method log_simulation()","title":"R6 class representing a simulation manager. — SimulationManager","text":"Summarizes simulation log generated within run method writes text file results directory.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation manager. — SimulationManager","text":"","code":"SimulationManager$log_simulation(simulation_log)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation manager. — SimulationManager","text":"simulation_log Nested list simulation log entries generated via run method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a simulation manager. — SimulationManager","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation manager. — SimulationManager","text":"","code":"SimulationManager$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation manager. — SimulationManager","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationManager.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a simulation manager. — SimulationManager","text":"","code":"if (FALSE) { # interactive() # U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" ) # Example population model template model_template <- PopulationModel$new(   region = region,   time_steps = 10, # years   populations = region$region_cells, # 7   stage_matrix = 1 ) # Example generators for initial abundance and carrying capacity hs_matrix <- c(0.5, 0.3, 0.7, 0.9, 0.6, 0.7, 0.8) initial_gen <- Generator$new(   description = \"initial abundance\",   region = region,   hs_matrix = hs_matrix, # template attached   inputs = c(\"initial_n\"),   outputs = c(\"initial_abundance\") ) initial_gen$add_generative_requirements(list(initial_abundance = \"function\")) initial_gen$add_function_template(\"initial_abundance\",   function_def = function(params) {     stats::rmultinom(1,       size = params$initial_n,       prob = params$hs_matrix     )[, 1]   },   call_params = c(\"initial_n\", \"hs_matrix\") ) capacity_gen <- Generator$new(   description = \"carrying capacity\",   region = region,   hs_matrix = hs_matrix, # template attached   inputs = c(\"density_max\"),   outputs = c(\"carrying_capacity\") ) capacity_gen$add_generative_requirements(list(carrying_capacity = \"function\")) capacity_gen$add_function_template(\"carrying_capacity\",   function_def = function(params) {     round(params$density_max * params$hs_matrix)   },   call_params = c(\"density_max\", \"hs_matrix\") ) # Sample input parameters sample_data <- data.frame(initial_n = c(40, 60, 80), density_max = c(15, 20, 25)) # Simulation manager sim_manager <- SimulationManager$new(   sample_data = sample_data,   model_template = model_template,   generators = list(initial_gen, capacity_gen),   parallel_cores = 2,   results_dir = tempdir() ) run_output <- sim_manager$run() run_output$summary dir(tempdir(), \"*.RData\") # includes 3 result files for (i in 1:3) {   print(paste(\"Run\", i, \"results:\"))   file_name <- paste0(sim_manager$get_results_filename(i), \".RData\")   print(readRDS(file.path(tempdir(), file_name))) } dir(tempdir(), \"*.txt\") # plus simulation log }"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a simulation model — SimulationModel","title":"R6 class representing a simulation model — SimulationModel","text":"R6 class representing spatially-explicit simulation model. extends SpatialModel class range common simulation parameters functionality creating nested model, whereby nested template model fixed parameters maintained model cloned various sampled parameters. Also provided methods checking consistency completeness model parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a simulation model — SimulationModel","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> SimulationModel","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a simulation model — SimulationModel","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a simulation model — SimulationModel","text":"simulation_function Name (character string) source path default simulation function, takes model input returns simulation results. model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). random_seed Number seed random number generation stochasticity. replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. results_selection List simulator-dependent attributes included returned results simulation run. attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. template_model Nested template model fixed (non-sampled) attributes shallow cloning. sample_attributes Vector sample attribute names (). required_attributes Vector required attribute names (), .e. needed run simulation. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a simulation model — SimulationModel","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a simulation model — SimulationModel","text":"SimulationModel$new() SimulationModel$new_clone() SimulationModel$get_attribute_names() SimulationModel$get_attributes() SimulationModel$set_attributes() SimulationModel$set_sample_attributes() SimulationModel$is_consistent() SimulationModel$list_consistency() SimulationModel$inconsistent_attributes() SimulationModel$is_complete() SimulationModel$list_completeness() SimulationModel$incomplete_attributes() SimulationModel$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a simulation model — SimulationModel","text":"Initialization method sets template model sets given attributes individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$new(template = NULL, required_attributes = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"template Template simulation model (nested) containing fixed (non-sampled) attributes. required_attributes Vector required attribute names (), .e. needed run simulation. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-new-clone-","dir":"Reference","previous_headings":"","what":"Method new_clone()","title":"R6 class representing a simulation model — SimulationModel","text":"Creates new (re-initialized) object current (inherited) object class optionally passed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$new_clone(...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"... Parameters passed via inherited class constructor (defined initialize run via new).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"New object current (inherited) class.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-get-attribute-names-","dir":"Reference","previous_headings":"","what":"Method get_attribute_names()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns list attribute names including public private model attributes, well attached attributes (including template model).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$get_attribute_names()"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"List attribute names.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-get-attributes-","dir":"Reference","previous_headings":"","what":"Method get_attributes()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns list values selected attributes attribute aliases (array parameter names provided) attributes (params).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$get_attributes(params = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"params Array attribute names return (NULL).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"List selected attributes values.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-set-attributes-","dir":"Reference","previous_headings":"","what":"Method set_attributes()","title":"R6 class representing a simulation model — SimulationModel","text":"Sets given attributes (optionally via alias names) individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$set_attributes(params = list(), ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"params List parameters/attributes. ... Parameters/attributes passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-set-sample-attributes-","dir":"Reference","previous_headings":"","what":"Method set_sample_attributes()","title":"R6 class representing a simulation model — SimulationModel","text":"Sets names (- params vector) values (params list /name-value pairs provided) sample attributes model.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$set_sample_attributes(params = list(), ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"params List parameters/attributes (names values) array names . ... Parameters/attributes passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-is-consistent-","dir":"Reference","previous_headings":"","what":"Method is_consistent()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns boolean indicate (optionally selected ) model attributes (dimensions) consistent/valid.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$is_consistent(params = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"params Optional array parameter/attribute names.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-3","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"Boolean indicate consistency selected/attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-list-consistency-","dir":"Reference","previous_headings":"","what":"Method list_consistency()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns boolean indicate (optionally selected ) model attributes (dimensions) consistent/valid.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$list_consistency(params = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"params Optional array parameter/attribute names.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-4","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"List booleans (NAs) indicate consistency selected/attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-inconsistent-attributes-","dir":"Reference","previous_headings":"","what":"Method inconsistent_attributes()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns list attributes necessary simulate model inconsistent/invalid.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-8","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$inconsistent_attributes(include_nas = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"include_nas Optional boolean indicating whether include attributes unknown consistency (NA).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-5","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"List inconsistent attributes prevent model simulation (optionally consistency available).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-is-complete-","dir":"Reference","previous_headings":"","what":"Method is_complete()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns boolean indicate attributes necessary simulate model set consistent/valid.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-9","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$is_complete()"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-6","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"Boolean indicate model completeness (consistency).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-list-completeness-","dir":"Reference","previous_headings":"","what":"Method list_completeness()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns list booleans (NAs) parameter indicate attributes necessary simulate model set consistent/valid.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-10","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$list_completeness()"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-7","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"List booleans (NAs) parameter indicate indicate completeness (consistency).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-incomplete-attributes-","dir":"Reference","previous_headings":"","what":"Method incomplete_attributes()","title":"R6 class representing a simulation model — SimulationModel","text":"Returns list attributes necessary simulate model incomplete/inconsistent/invalid.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-11","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$incomplete_attributes(include_nas = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-8","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"include_nas Optional boolean indicating whether include attributes unknown completeness (NA).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"returns-8","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a simulation model — SimulationModel","text":"List incomplete attributes prevent model simulation (optionally completeness available).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a simulation model — SimulationModel","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"usage-12","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"SimulationModel$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"arguments-9","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a simulation model — SimulationModel","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a simulation model — SimulationModel","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) # Model template template_model <- SimulationModel$new(   simulation_function = \"test_simulator\",   region = region, time_steps = 10 ) template_model$model_attributes <- c(   template_model$model_attributes,   \"a\", \"b\", \"c\", \"d\" ) template_model$model_attributes #>  [1] \"region\"            \"coordinates\"       \"random_seed\"       #>  [4] \"replicates\"        \"time_steps\"        \"years_per_step\"    #>  [7] \"results_selection\" \"a\"                 \"b\"                 #> [10] \"c\"                 \"d\"                 template_model$required_attributes <- c(   template_model$required_attributes[1:2],   \"a\", \"b\", \"c\", \"d\" ) template_model$required_attributes #> [1] \"region\"     \"time_steps\" \"a\"          \"b\"          \"c\"          #> [6] \"d\"          template_model$get_attributes(template_model$required_attributes) #> $region #> <Region> #>   Inherits from: <GenericClass> #>   Public: #>     attached: list #>     clone: function (deep = FALSE)  #>     coordinates: active binding #>     initialize: function (coordinates = NULL, template_raster = NULL, region_raster = NULL,  #>     new_clone: function (...)  #>     object_generator: R6ClassGenerator #>     raster_from_values: function (values)  #>     raster_is_consistent: function (check_raster)  #>     region_cells: active binding #>     region_indices: active binding #>     region_raster: active binding #>     strict_consistency: active binding #>     use_raster: active binding #>   Private: #>     .coordinates: NULL #>     .region_raster: RasterLayer #>     .strict_consistency: TRUE #>     .use_raster: TRUE #>  #> $time_steps #> [1] 10 #>  template_model$simulation_function #> [1] \"test_simulator\" # Nested model nested_model <- SimulationModel$new(template_model = template_model) nested_model$region$region_cells #> [1] 7 nested_model$set_sample_attributes(a = 1:7, b = 1:10, c = 1:15) nested_model$sample_attributes #> [1] \"a\" \"b\" \"c\" nested_model$get_attributes(c(\"a\", \"b\", \"c\", \"d\")) #> $a #> [1] 1 2 3 4 5 6 7 #>  #> $b #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $c #>  [1]  1  2  3  4  5  6  7  8  9 10 11 12 13 14 15 #>  # Completeness and consistency nested_model$is_complete() #> [1] FALSE nested_model$incomplete_attributes() #> [1] \"c\" \"d\" nested_model$is_consistent() #> [1] FALSE nested_model$inconsistent_attributes() #> [1] \"c\" nested_model$set_attributes(c = array(1:70, c(7, 10)), d = 15) nested_model$is_complete() #> [1] TRUE nested_model$is_consistent() #> [1] TRUE # Attached attributes nested_model$attached #> $a #> [1] 1 2 3 4 5 6 7 #>  #> $b #>  [1]  1  2  3  4  5  6  7  8  9 10 #>  #> $c #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    1    8   15   22   29   36   43   50   57    64 #> [2,]    2    9   16   23   30   37   44   51   58    65 #> [3,]    3   10   17   24   31   38   45   52   59    66 #> [4,]    4   11   18   25   32   39   46   53   60    67 #> [5,]    5   12   19   26   33   40   47   54   61    68 #> [6,]    6   13   20   27   34   41   48   55   62    69 #> [7,]    7   14   21   28   35   42   49   56   63    70 #>  template_model$attached #> $d #> [1] 15 #>"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing simulation results. — SimulationResults","title":"R6 class representing simulation results. — SimulationResults","text":"R6 class encapsulating dynamically generating spatially-explicit simulation results, well optional re-generated Generator outputs.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing simulation results. — SimulationResults","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> SimulationResults","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing simulation results. — SimulationResults","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing simulation results. — SimulationResults","text":"model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). time_steps Number simulation time steps. burn_in_steps Optional number initial 'burn-' time steps ignored. occupancy_mask Optional binary mask array (matrix), data frame, raster (stack) cell time-step simulation including burn-. Nested simulation results cells. parent Parent simulation results individual cells. default Default value/attribute utilized applying primitive metric functions (e.g. max) results. attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing simulation results. — SimulationResults","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing simulation results. — SimulationResults","text":"SimulationResults$new() SimulationResults$new_clone() SimulationResults$get_attribute_names() SimulationResults$get_attributes() SimulationResults$set_attributes() SimulationResults$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing simulation results. — SimulationResults","text":"Initialization method sets attributes results list file, sets object attributes individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing simulation results. — SimulationResults","text":"","code":"SimulationResults$new(results = NULL, parent = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing simulation results. — SimulationResults","text":"results list containing results file path simulation results. parent Parent simulation results individual cells (used nesting simulation results clone cells). ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"method-new-clone-","dir":"Reference","previous_headings":"","what":"Method new_clone()","title":"R6 class representing simulation results. — SimulationResults","text":"Creates new (re-initialized) object current (inherited) object class optionally passed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing simulation results. — SimulationResults","text":"","code":"SimulationResults$new_clone(...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing simulation results. — SimulationResults","text":"... Parameters passed via inherited class constructor (defined initialize run via new).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing simulation results. — SimulationResults","text":"New object current (inherited) class.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"method-get-attribute-names-","dir":"Reference","previous_headings":"","what":"Method get_attribute_names()","title":"R6 class representing simulation results. — SimulationResults","text":"Returns array attribute names including public private model attributes, well attached attributes, error warning messages.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing simulation results. — SimulationResults","text":"","code":"SimulationResults$get_attribute_names(all = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing simulation results. — SimulationResults","text":"Boolean indicate nested list cells (present) also listed (default FALSE).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing simulation results. — SimulationResults","text":"Array attribute names optional inclusion attribute names nested results cells.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"method-get-attributes-","dir":"Reference","previous_headings":"","what":"Method get_attributes()","title":"R6 class representing simulation results. — SimulationResults","text":"Returns list values selected attributes attribute aliases (array parameter names provided) attributes (params).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing simulation results. — SimulationResults","text":"","code":"SimulationResults$get_attributes(params = NULL, remove_burn_in = TRUE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing simulation results. — SimulationResults","text":"params Array attribute names return (NULL). remove_burn_in Boolean indicate whether remove burn-steps attribute values (default = TRUE; mostly internal use).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing simulation results. — SimulationResults","text":"List selected attributes values.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"method-set-attributes-","dir":"Reference","previous_headings":"","what":"Method set_attributes()","title":"R6 class representing simulation results. — SimulationResults","text":"Sets given attributes (optionally via alias names) individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing simulation results. — SimulationResults","text":"","code":"SimulationResults$set_attributes(params = list(), ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing simulation results. — SimulationResults","text":"params List parameters/attributes. ... Parameters/attributes passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing simulation results. — SimulationResults","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing simulation results. — SimulationResults","text":"","code":"SimulationResults$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing simulation results. — SimulationResults","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulationResults.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing simulation results. — SimulationResults","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) raster::plot(region$region_raster,   main = \"Example region (indices)\",   xlab = \"Longitude (degrees)\", ylab = \"Latitude (degrees)\",   colNA = \"blue\" )  # Sample results occupancy (ignore cell 2 in last 3 time steps) occupancy_raster <- region$raster_from_values(array(1, c(7, 13))) occupancy_raster[region$region_indices][2, 11:13] <- 0 occupancy_raster[region$region_indices] #>      layer.1 layer.2 layer.3 layer.4 layer.5 layer.6 layer.7 layer.8 layer.9 #> [1,]       1       1       1       1       1       1       1       1       1 #> [2,]       1       1       1       1       1       1       1       1       1 #> [3,]       1       1       1       1       1       1       1       1       1 #> [4,]       1       1       1       1       1       1       1       1       1 #> [5,]       1       1       1       1       1       1       1       1       1 #> [6,]       1       1       1       1       1       1       1       1       1 #> [7,]       1       1       1       1       1       1       1       1       1 #>      layer.10 layer.11 layer.12 layer.13 #> [1,]        1        1        1        1 #> [2,]        1        0        0        0 #> [3,]        1        1        1        1 #> [4,]        1        1        1        1 #> [5,]        1        1        1        1 #> [6,]        1        1        1        1 #> [7,]        1        1        1        1 # Simulation example results example_results <- list(abundance = region$raster_from_values(   t(apply(     matrix(11:17), 1,     function(n) c(rep(n, 3), round(n * exp(-(0:9) / log(n))))   )) )) example_results$abundance[region$region_indices] #>      layer.1 layer.2 layer.3 layer.4 layer.5 layer.6 layer.7 layer.8 layer.9 #> [1,]      11      11      11      11       7       5       3       2       1 #> [2,]      12      12      12      12       8       5       4       2       2 #> [3,]      13      13      13      13       9       6       4       3       2 #> [4,]      14      14      14      14      10       7       4       3       2 #> [5,]      15      15      15      15      10       7       5       3       2 #> [6,]      16      16      16      16      11       8       5       4       3 #> [7,]      17      17      17      17      12       8       6       4       3 #>      layer.10 layer.11 layer.12 layer.13 #> [1,]        1        1        0        0 #> [2,]        1        1        0        0 #> [3,]        1        1        1        0 #> [4,]        1        1        1        0 #> [5,]        2        1        1        1 #> [6,]        2        1        1        1 #> [7,]        2        1        1        1 # Simulation results object sim_results <- SimulationResults$new(   region = region,   time_steps = 13,   burn_in_steps = 3,   occupancy_mask = occupancy_raster ) # Clone (for each simulation results) results_clone <- sim_results$new_clone(results = example_results) results_clone$get_attribute(\"abundance\") #> class      : RasterBrick  #> dimensions : 5, 5, 25, 10  (nrow, ncol, ncell, nlayers) #> resolution : 0.01, 0.01  (x, y) #> extent     : 177.005, 177.055, -18.055, -18.005  (xmin, xmax, ymin, ymax) #> crs        : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs  #> source     : memory #> names      : layer.4, layer.5, layer.6, layer.7, layer.8, layer.9, layer.10, layer.11, layer.12, layer.13  #> min values :      11,       7,       5,       3,       2,       1,        1,        0,        0,        0  #> max values :      17,      12,       8,       6,       4,       3,        2,        1,        1,        1  #>  results_clone$get_attribute(\"abundance\")[region$region_indices] #>      layer.4 layer.5 layer.6 layer.7 layer.8 layer.9 layer.10 layer.11 layer.12 #> [1,]      11       7       5       3       2       1        1        1        0 #> [2,]      12       8       5       4       2       2        1        0        0 #> [3,]      13       9       6       4       3       2        1        1        1 #> [4,]      14      10       7       4       3       2        1        1        1 #> [5,]      15      10       7       5       3       2        2        1        1 #> [6,]      16      11       8       5       4       3        2        1        1 #> [7,]      17      12       8       6       4       3        2        1        1 #>      layer.13 #> [1,]        0 #> [2,]        0 #> [3,]        0 #> [4,]        0 #> [5,]        1 #> [6,]        1 #> [7,]        1 results_clone$all$get_attribute(\"abundance\") #>  [1] 98 67 46 31 21 15 10  6  5  3 results_clone$get_attribute(\"all$abundance\") #>  [1] 98 67 46 31 21 15 10  6  5  3"},{"path":"https://globalecologylab.github.io/poems/reference/SimulatorReference.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class for a simulator reference — SimulatorReference","title":"R6 class for a simulator reference — SimulatorReference","text":"R6 class dynamically attaching simulator attributes results (passed reference).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulatorReference.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class for a simulator reference — SimulatorReference","text":"attached list dynamically attached simulator attributes (name-value pairs). results list dynamically accessed simulator results (name-value pairs).","code":""},{"path":[]},{"path":"https://globalecologylab.github.io/poems/reference/SimulatorReference.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class for a simulator reference — SimulatorReference","text":"SimulatorReference$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulatorReference.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class for a simulator reference — SimulatorReference","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulatorReference.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class for a simulator reference — SimulatorReference","text":"","code":"SimulatorReference$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SimulatorReference.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class for a simulator reference — SimulatorReference","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SimulatorReference.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class for a simulator reference — SimulatorReference","text":"","code":"test_class <- SimulatorReference$new() test_class$attached$attr1 <- \"example1\" test_class$results$attr1 <- \"example2\" str(test_class) #> Classes 'SimulatorReference', 'R6' <SimulatorReference> #>   Public: #>     attached: list #>     clone: function (deep = FALSE)  #>     results: list"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a spatial correlation. — SpatialCorrelation","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"R6 class functionality modeling spatial correlations within spatially-explicit model. provides functionality calculating correlations region cells using distance-based function: *exp(-distance/b), (amplitude) b (breadth) configurable model attributes. calculates Cholesky decomposition correlation matrix (via chol), utilized generate (optionally temporal) correlated normal deviates. compacted version decomposed matrix can also generated computational efficiency.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"poems::GenericClass -> poems::GenericModel -> poems::SpatialModel -> SpatialCorrelation","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). distance_scale Scale distance values meters (default = 1). Usage: set 1 values meters, 1000 values kilometers. correlation_amplitude Correlation function: *exp(-distance/b) parameter. Represents amplitude maximum magnitude correlation values model cells. correlation_breadth Correlation function: *exp(-distance/b) b parameter. Represents breadth correlation region cells. Typically estimated via average distance correlated region cells. correlation_matrix Correlation matrix calculated via correlation function: *exp(-distance/b). t_decomposition_matrix transposed Cholesky decomposition correlation matrix (see chol). compact_only Boolean indicate compact versions matrices maintained calculated. t_decomposition_compact_matrix compact (rows) version transposed Cholesky decomposition correlation matrix. t_decomposition_compact_map map original region cell rows compact transposed decomposition matrix. attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::GenericModel$get_attribute_names() poems::GenericModel$get_attributes() poems::GenericModel$set_attributes() poems::SpatialModel$new_clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"SpatialCorrelation$new() SpatialCorrelation$calculate_distance_matrix() SpatialCorrelation$calculate_correlations() SpatialCorrelation$calculate_cholesky_decomposition() SpatialCorrelation$calculate_compact_decomposition() SpatialCorrelation$get_compact_decomposition() SpatialCorrelation$generate_correlated_normal_deviates() SpatialCorrelation$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Initialization method sets given attributes individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$new(compact_only = TRUE, attribute_aliases = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"compact_only Boolean indicate compact versions matrices maintained calculated. attribute_aliases Optional list extra alias names model attributes (form: alias = \"attribute\") used set get attributes methods. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-calculate-distance-matrix-","dir":"Reference","previous_headings":"","what":"Method calculate_distance_matrix()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Returns matrix calculated distance (meters default) pair region cells.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$calculate_distance_matrix(use_longlat = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"use_longlat Optional boolean indicating use (WGS84) coordinates longitude (degrees West) latitude (degrees North).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Matrix distances region cells.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-calculate-correlations-","dir":"Reference","previous_headings":"","what":"Method calculate_correlations()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Calculates correlation matrix applying distance-based correlation function.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$calculate_correlations(   distance_matrix = NULL,   decimals = NULL,   threshold = 1e-07,   ... )"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"distance_matrix Optional pre-calculated matrix distances region cells. decimals Optional number decimal places correlation values. threshold Optional threshold (minimum value) correlation values (default 0.0000001). ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-calculate-cholesky-decomposition-","dir":"Reference","previous_headings":"","what":"Method calculate_cholesky_decomposition()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Calculates transposed Cholesky decomposition correlation matrix (via chol).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$calculate_cholesky_decomposition(   distance_matrix = NULL,   decimals = NULL,   threshold = 1e-07,   ... )"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"distance_matrix Optional pre-calculated matrix distances region cells. decimals Optional number decimal places correlation values. threshold Optional threshold (minimum value) correlation values (default 0.0000001). ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-calculate-compact-decomposition-","dir":"Reference","previous_headings":"","what":"Method calculate_compact_decomposition()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Compacts transposed Cholesky decomposition correlation matrix minimal number rows, mapped original matrix.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$calculate_compact_decomposition(distance_matrix = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"distance_matrix Optional pre-calculated matrix distances region cells. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-get-compact-decomposition-","dir":"Reference","previous_headings":"","what":"Method get_compact_decomposition()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Returns compact transposed Cholesky decomposition correlation matrix corresponding map region cell indices list names: matrix, map.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$get_compact_decomposition(distance_matrix = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments-5","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"distance_matrix Optional pre-calculated matrix distances region cells. ... Parameters passed via params list individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"returns-1","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"List containing compact Cholesky decomposition matrix corresponding map region cell indices (compacted rows).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-generate-correlated-normal-deviates-","dir":"Reference","previous_headings":"","what":"Method generate_correlated_normal_deviates()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Generates correlated normal deviates using spatial correlation, utilizing optional random seed optional temporal correlation across time steps.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage-6","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$generate_correlated_normal_deviates(   random_seed = NULL,   temporal_correlation = 1,   time_steps = 1 )"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments-6","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"random_seed Optional seed random generation correlated deviates. temporal_correlation Optional temporal correlation coefficient (0-1; default = 1). time_steps Optional number time steps temporal correlation (default = 1 none).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"returns-2","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"Array (non-temporal) matrix (temporal) correlated normal deviates.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"usage-7","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"SpatialCorrelation$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"arguments-7","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialCorrelation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a spatial correlation. — SpatialCorrelation","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) # Spatial correlation env_corr <- SpatialCorrelation$new(region = region, amplitude = 0.4, breadth = 500) env_corr$calculate_distance_matrix() # m #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7] #> [1,]    0.000 2117.861 1106.807 2389.582 2213.615 2453.833 3063.481 #> [2,] 2117.861    0.000 2389.582 1106.807 3063.481 2453.833 2213.615 #> [3,] 1106.807 2389.582    0.000 2117.741 1106.808 1531.720 2389.477 #> [4,] 2389.582 1106.807 2117.741    0.000 2389.477 1531.720 1106.808 #> [5,] 2213.615 3063.481 1106.808 2389.477    0.000 1058.811 2117.622 #> [6,] 2453.833 2453.833 1531.720 1531.720 1058.811    0.000 1058.811 #> [7,] 3063.481 2213.615 2389.477 1106.808 2117.622 1058.811    0.000 env_corr$calculate_correlations(decimals = 5) env_corr$correlation_matrix #>         [,1]    [,2]    [,3]    [,4]    [,5]    [,6]    [,7] #> [1,] 1.00000 0.00579 0.04372 0.00336 0.00478 0.00296 0.00087 #> [2,] 0.00579 1.00000 0.00336 0.04372 0.00087 0.00296 0.00478 #> [3,] 0.04372 0.00336 1.00000 0.00579 0.04372 0.01869 0.00336 #> [4,] 0.00336 0.04372 0.00579 1.00000 0.00336 0.01869 0.04372 #> [5,] 0.00478 0.00087 0.04372 0.00336 1.00000 0.04813 0.00579 #> [6,] 0.00296 0.00296 0.01869 0.01869 0.04813 1.00000 0.04813 #> [7,] 0.00087 0.00478 0.00336 0.04372 0.00579 0.04813 1.00000 env_corr$calculate_cholesky_decomposition(decimals = 2) env_corr$t_decomposition_matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1 0.01 0.04 0.00 0.00 0.00 0.00 #> [2,]    0 1.00 0.00 0.04 0.00 0.00 0.00 #> [3,]    0 0.00 1.00 0.01 0.04 0.02 0.00 #> [4,]    0 0.00 0.00 1.00 0.00 0.02 0.04 #> [5,]    0 0.00 0.00 0.00 1.00 0.05 0.01 #> [6,]    0 0.00 0.00 0.00 0.00 1.00 0.05 #> [7,]    0 0.00 0.00 0.00 0.00 0.00 1.00 env_corr$get_compact_decomposition() #> $matrix #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1 0.01 0.04 0.04 0.04 0.02 0.04 #> [2,]    0 1.00 1.00 0.01 1.00 0.02 0.01 #> [3,]    0 0.00 0.00 1.00 0.00 0.05 0.05 #> [4,]    0 0.00 0.00 0.00 0.00 1.00 1.00 #>  #> $map #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    1    1    1    2    3    3    4 #> [2,]   NA    2    3    3    5    4    5 #> [3,]   NA   NA   NA    4   NA    5    6 #> [4,]   NA   NA   NA   NA   NA    6    7 #>  # Scale to km env_corr$distance_scale <- 1000 env_corr$calculate_distance_matrix() # km #>          [,1]     [,2]     [,3]     [,4]     [,5]     [,6]     [,7] #> [1,] 0.000000 2.117861 1.106807 2.389582 2.213615 2.453833 3.063481 #> [2,] 2.117861 0.000000 2.389582 1.106807 3.063481 2.453833 2.213615 #> [3,] 1.106807 2.389582 0.000000 2.117741 1.106808 1.531720 2.389477 #> [4,] 2.389582 1.106807 2.117741 0.000000 2.389477 1.531720 1.106808 #> [5,] 2.213615 3.063481 1.106808 2.389477 0.000000 1.058811 2.117622 #> [6,] 2.453833 2.453833 1.531720 1.531720 1.058811 0.000000 1.058811 #> [7,] 3.063481 2.213615 2.389477 1.106808 2.117622 1.058811 0.000000"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a spatial model — SpatialModel","title":"R6 class representing a spatial model — SpatialModel","text":"R6 class representing generic (abstract) spatially-explicit model. extends GenericModel addition study region specification.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a spatial model — SpatialModel","text":"poems::GenericClass -> poems::GenericModel -> SpatialModel","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a spatial model — SpatialModel","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a spatial model — SpatialModel","text":"model_attributes vector model attribute names. region Region (inherited class) object specifying study region. coordinates Data frame (matrix) X-Y population (WGS84) coordinates longitude (degrees West) latitude (degrees North) (get set), distance-based coordinates dynamically returned region raster (get ). attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a spatial model — SpatialModel","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::GenericModel$get_attribute_names() poems::GenericModel$get_attributes() poems::GenericModel$set_attributes()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a spatial model — SpatialModel","text":"SpatialModel$new() SpatialModel$new_clone() SpatialModel$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a spatial model — SpatialModel","text":"Initialization method sets given attributes individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial model — SpatialModel","text":"","code":"SpatialModel$new(region = NULL, ...)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial model — SpatialModel","text":"region Region (inherited class) object specifying study region. ... Parameters passed individually.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"method-new-clone-","dir":"Reference","previous_headings":"","what":"Method new_clone()","title":"R6 class representing a spatial model — SpatialModel","text":"Creates new (re-initialized) object current (inherited) object class optionally passed parameters.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial model — SpatialModel","text":"","code":"SpatialModel$new_clone(...)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial model — SpatialModel","text":"... Parameters passed via inherited class constructor (defined initialize run via new).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"returns","dir":"Reference","previous_headings":"","what":"Returns","title":"R6 class representing a spatial model — SpatialModel","text":"New object current (inherited) class.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a spatial model — SpatialModel","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a spatial model — SpatialModel","text":"","code":"SpatialModel$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a spatial model — SpatialModel","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/SpatialModel.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a spatial model — SpatialModel","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) # Example spatial model model1 <- SpatialModel$new(region = region, a_layers = 3) model1$coordinates #>        x      y #> 1 177.02 -18.02 #> 2 177.04 -18.02 #> 3 177.02 -18.03 #> 4 177.04 -18.03 #> 5 177.02 -18.04 #> 6 177.03 -18.04 #> 7 177.04 -18.04 model1$set_attributes(a_values = array(8:28, c(7, 3))) model1$region$raster_from_values(model1$get_attribute(\"a_values\")) #> class      : RasterBrick  #> dimensions : 5, 5, 25, 3  (nrow, ncol, ncell, nlayers) #> resolution : 0.01, 0.01  (x, y) #> extent     : 177.005, 177.055, -18.055, -18.005  (xmin, xmax, ymin, ymax) #> crs        : +proj=longlat +ellps=WGS84 +towgs84=0,0,0,0,0,0,0 +no_defs  #> source     : memory #> names      : layer.1, layer.2, layer.3  #> min values :       8,      15,      22  #> max values :      14,      21,      28  #>"},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":null,"dir":"Reference","previous_headings":"","what":"R6 class representing a pattern-oriented validator. — Validator","title":"R6 class representing a pattern-oriented validator. — Validator","text":"R6 class pattern-oriented validation simulation model ensemble selection. Pattern-oriented validation statistical approach compare patterns generated simulations observed empirical patterns. class wraps functionality validation approach, typically utilizing external library, default approximate Bayesian computation (ABC) abc library, includes methods resolving non-finite metrics, centering scaling validator inputs, running validator analysis, generating diagnostics (see abc).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"super-classes","dir":"Reference","previous_headings":"","what":"Super classes","title":"R6 class representing a pattern-oriented validator. — Validator","text":"poems::GenericClass -> poems::GenericModel -> Validator","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"public-fields","dir":"Reference","previous_headings":"","what":"Public fields","title":"R6 class representing a pattern-oriented validator. — Validator","text":"attached list dynamically attached attributes (name-value pairs).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"active-bindings","dir":"Reference","previous_headings":"","what":"Active bindings","title":"R6 class representing a pattern-oriented validator. — Validator","text":"model_attributes vector model attribute names. simulation_parameters data frame sample model parameters simulation. simulation_summary_metrics data frame result summary metrics simulation. observed_metric_targets vector observed targets summary metric. random_seed seed randomizing order simulation samples (randomization utilized left NULL). random_indices Randomized simulation sample indices validator inputs consequently validator results random seed used. non_finite_replacements list numeric values function names (character strings) direct assignments (assigned loaded via source paths) replacing NAs specified (list names) summary metrics. input_center_scale_values nested list center scale values validator input parameters/metrics. output_dir Directory path validator (default: abc) regression diagnostic outputs. validation_call_function Dynamically assigned function: function(observed_metric_targets, simulation_parameters, simulation_summary_metrics, tolerance, method, ...) calling validation function (default calls abc library function). validator_return_object Object returned validator function (see abc documentation using default). selected_simulations data frame simulation sample indices weights selected/assigned validation function (abc default). attribute_aliases list alternative alias names model attributes (form: alias = \"attribute\") used set get attributes methods. error_messages vector error messages encountered setting model attributes. warning_messages vector warning messages encountered setting model attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"methods","dir":"Reference","previous_headings":"","what":"Methods","title":"R6 class representing a pattern-oriented validator. — Validator","text":"poems::GenericModel$get_attribute() poems::GenericModel$get_attribute_aliases() poems::GenericModel$get_attribute_names() poems::GenericModel$get_attributes() poems::GenericModel$new_clone() poems::GenericModel$set_attributes()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"public-methods","dir":"Reference","previous_headings":"","what":"Public methods","title":"R6 class representing a pattern-oriented validator. — Validator","text":"Validator$new() Validator$run() Validator$resolve_nonfinite_metrics() Validator$center_scale_inputs() Validator$generate_diagnostics() Validator$clone()","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"method-new-","dir":"Reference","previous_headings":"","what":"Method new()","title":"R6 class representing a pattern-oriented validator. — Validator","text":"Initialization method sets given attributes individually /list.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"usage","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a pattern-oriented validator. — Validator","text":"","code":"Validator$new(...)"},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a pattern-oriented validator. — Validator","text":"... Parameters passed via params list individually. template Template population model containing fixed (non-sampled) attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"method-run-","dir":"Reference","previous_headings":"","what":"Method run()","title":"R6 class representing a pattern-oriented validator. — Validator","text":"Pre-processes inputs, runs validator function input parameters, stores function (optionally diagnostic) outputs (see abc documentation using default).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"usage-1","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a pattern-oriented validator. — Validator","text":"","code":"Validator$run(   simulation_parameters = NULL,   simulation_summary_metrics = NULL,   observed_metric_targets = NULL,   tolerance = 0.01,   method = \"neuralnet\",   output_diagnostics = FALSE,   ... )"},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"arguments-1","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a pattern-oriented validator. — Validator","text":"simulation_parameters data frame sample model parameters simulation. simulation_summary_metrics data frame result summary metrics simulation. observed_metric_targets vector observed targets summary metric. tolerance Tolerance proportion models select. method Validator algorithm applied (default neural network algorithm - see abc documentation) . output_diagnostics Boolean indicate whether output diagnostics (PDF file - default FALSE). ... Additional validator parameters passed individually (see abc documentation using default).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"method-resolve-nonfinite-metrics-","dir":"Reference","previous_headings":"","what":"Method resolve_nonfinite_metrics()","title":"R6 class representing a pattern-oriented validator. — Validator","text":"Attempts resolve non-finite simulation summary metric values (optionally changing NAs) via non finite replacements parameter (list values/functions replacing non-finite values).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"usage-2","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a pattern-oriented validator. — Validator","text":"","code":"Validator$resolve_nonfinite_metrics(use_nas = TRUE)"},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"arguments-2","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a pattern-oriented validator. — Validator","text":"use_nas Boolean indicate whether replace non-finite values NAs (default TRUE).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"method-center-scale-inputs-","dir":"Reference","previous_headings":"","what":"Method center_scale_inputs()","title":"R6 class representing a pattern-oriented validator. — Validator","text":"Centers scales model parameters, result summary metrics observed targets.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"usage-3","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a pattern-oriented validator. — Validator","text":"","code":"Validator$center_scale_inputs()"},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"method-generate-diagnostics-","dir":"Reference","previous_headings":"","what":"Method generate_diagnostics()","title":"R6 class representing a pattern-oriented validator. — Validator","text":"Generates validation diagnostics (see abc documentation using default) PDF file output directory.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"usage-4","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a pattern-oriented validator. — Validator","text":"","code":"Validator$generate_diagnostics(output_dir = NULL)"},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"arguments-3","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a pattern-oriented validator. — Validator","text":"output_dir Output directory path diagnostics PDF file (must present already set within validator class object).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"method-clone-","dir":"Reference","previous_headings":"","what":"Method clone()","title":"R6 class representing a pattern-oriented validator. — Validator","text":"objects class cloneable method.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"usage-5","dir":"Reference","previous_headings":"","what":"Usage","title":"R6 class representing a pattern-oriented validator. — Validator","text":"","code":"Validator$clone(deep = FALSE)"},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"arguments-4","dir":"Reference","previous_headings":"","what":"Arguments","title":"R6 class representing a pattern-oriented validator. — Validator","text":"deep Whether make deep clone.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/Validator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"R6 class representing a pattern-oriented validator. — Validator","text":"","code":"# Example parameter sample data sample_data <- data.frame(   growth_rate_max = round(log(seq(1.11, 1.30, 0.01)), 3),   harvest_rate = seq(0.11, 0.30, 0.01),   initial_n = seq(105, 200, 5),   density_max = seq(132, 170, 2) ) # Example simulation result summary metrics summary_metric_data <- data.frame(   trend_n = seq(10, -9, -1),   total_h = seq(70, 355, 15) ) # Create a validator for selecting the 'best' example models validator <- Validator$new(   simulation_parameters = sample_data,   simulation_summary_metrics = summary_metric_data,   observed_metric_targets = c(trend_n = 0, total_h = 250),   output_dir = tempdir() ) suppressWarnings(validator$run(tolerance = 0.25, output_diagnostics = TRUE)) #> 12345678910 #> 12345678910 dir(tempdir(), \"*.pdf\") # plus validation diagnostics (see abc library documentation) #> [1] \"validation_diagnostics.pdf\" validator$selected_simulations # top 5 models #>   index       weight #> 1    10 2.220446e-16 #> 2    11 6.000000e-01 #> 3    12 8.000000e-01 #> 4    13 6.000000e-01 #> 5    14 0.000000e+00"},{"path":"https://globalecologylab.github.io/poems/reference/poems-package.html","id":null,"dir":"Reference","previous_headings":"","what":"poems: Pattern-Oriented Ensemble Modeling System — poems-package","title":"poems: Pattern-Oriented Ensemble Modeling System — poems-package","text":"framework interoperable R6 classes (Chang, 2020, https://CRAN.R-project.org/package=R6) building ensembles viable models via pattern-oriented modeling (POM) approach (Grimm et al.,2005, doi:10.1126/science.1116681 ). package includes classes encapsulating generating model parameters, managing POM workflow. workflow includes: model setup; generating model parameters via Latin hyper-cube sampling (Iman & Conover, 1980, doi:10.1080/03610928008827996 ); running multiple sampled model simulations; collating summary results; validating selecting ensemble models best match known patterns. default, model validation selection utilizes approximate Bayesian computation (ABC) approach (Beaumont et al., 2002, doi:10.1093/genetics/162.4.2025 ), although alternative user-defined functionality employed. package includes spatially explicit demographic population model simulation engine, incorporates default functionality density dependence, correlated environmental stochasticity, stage-based transitions, distance-based dispersal. user may customize simulator defining functionality translocations, harvesting, mortality, processes, well defining sequence order simulator processes. framework also adapted use model simulators utilizing extendable (inheritable) base classes.","code":""},{"path":[]},{"path":"https://globalecologylab.github.io/poems/reference/poems-package.html","id":"author","dir":"Reference","previous_headings":"","what":"Author","title":"poems: Pattern-Oriented Ensemble Modeling System — poems-package","text":"Maintainer: July Pilowsky pilowskyj@caryinstitute.org (ORCID) Authors: Sean Haythorne sean.haythorne@unimelb.edu.au Damien Fordham damien.fordham@adelaide.edu.au Stuart Brown stuart.brown@sa.gov.au (ORCID) Jessie Buettel jessie.buettel@utas.edu.au Barry Brook barry.brook@utas.edu.au","code":""},{"path":"https://globalecologylab.github.io/poems/reference/poems.html","id":null,"dir":"Reference","previous_headings":"","what":"poems: Pattern-oriented ensemble modeling and simulation — poems","title":"poems: Pattern-oriented ensemble modeling and simulation — poems","text":"poems package provides framework interoperable R6 classes building ensembles viable models via pattern-oriented modeling (POM) approach (Grimm et al., 2005). package includes classes encapsulating generating model parameters, managing POM workflow. workflow includes: model setup; generating model parameters via Latin hypercube sampling; running multiple sampled model simulations; collating summary results; validating selecting ensemble models best match known patterns. default, model validation selection utilizes approximate Bayesian computation (ABC) approach (Beaumont, Zhang, & Balding, 2002), although alternative user-defined functionality employed. package also includes spatially explicit demographic population model simulation engine, includes default functionality density dependence, correlated environmental stochasticity, stage-based transitions, distance-based dispersal. user may customize simulator defining functionality translocations, harvesting, mortality, processes, well defining sequence order simulator processes. framework also adapted use model simulators utilizing extendable (inheritable) base classes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/poems.html","id":"framework-and-workflow","dir":"Reference","previous_headings":"","what":"Framework and workflow","title":"poems: Pattern-oriented ensemble modeling and simulation — poems","text":"poems framework utilizes hierarchy  extendable (inheritable) R6 class objects work together manage POM workflow building ensemble simulation models. Create simulation model template (SimulationModel inherited class object) appropriate fixed parameters study domain. Also define study region via Region class simulations spatially explicit. Create generators (Generator inherited class objects) dynamically generating (non-singular) model parameters represented data structures, arrays lists. Generate data frame sampled variable model parameters using LatinHypercubeSampler. include singular model parameter values well input parameters generators. Create SimulationManager object configured simulation model (template), generators, sample parameter data frame. Running manager sets runs models via simulator function set (row) sampled parameters, utilising generators required. results model simulation run written file. simulation log file also created. Create ResultsManager object configured sample parameter data result file details. Running manager constructs data frame configured summary metrics, one row simulation result file. manager utilizes SimulationResults (inherited) class encapsulate, dynamically generate additional derived, results. metrics generated via user-defined specifications functions calculating metric results (objects). Create Validator object configured sample parameter data, summary metrics, target (observed) pattern values metric. default, validator utilizes approximate Bayesian computation (ABC) validation method via abc library, although validator (call) function can configured utilize library user-defined functions. Running validator (appropriate call function configuration) produces ensemble models (indices sampled parameters) found best match targets. Diagnostic outputs may also produced (depending call function configuration). selected models may utilized studies, alternative model scenarios counterfactuals. can achieved utilizing selected subset parameter samples form inputs model simulations (repeating steps ).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/poems.html","id":"population-modeling-components","dir":"Reference","previous_headings":"","what":"Population modeling components","title":"poems: Pattern-oriented ensemble modeling and simulation — poems","text":"population_simulator function: simulation engine's main function processes model input parameters, controls flow, calling function modules required, returns results simulation. population_density function: Module configuring performing density dependence calculations simulation time step. user-defined function may utilized. population_env_stoch function: Module configuring stochastically applying environmental variability stage-based population transition rates simulation time step. population_transitions function: Module configuring performing stage-based demographic transitions population abundances simulation time step. population_transformation function: Module configuring performing user-defined transformations staged population abundances. functionality utilized defining functions translocation, harvest, mortality, custom transformative functions. population_dispersal function: Module configuring performing dispersal calculations simulation time step. user-defined function may utilized. population_results function: Module configuring, initializing, collating simulation results. PopulationModel class: Inherited SimulationModel, class encapsulates input parameters utilized population_simulator. SimulatorReference class: simple R6 class enables user-defined functionality maintain persistent (attached) attributes write simulator results. SpatialCorrelation class: Provides functionality generating parameters can utilized optionally applying spatial correlation within simulator's environmental variability calculations. DispersalGenerator class: Inherited Generator, class provides functionality generating distance-based dispersal parameters can utilized performing dispersal calculations. DispersalFriction class: Provides functionality adjusting (equivalent) distance population cells given spatio-temporal frictional landscape. adjustments may utilized DispersalGenerator. PopulationResults class: Inherited SimulationResults, class encapsulates results generated population_simulator, well dynamically generating additional derived results.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/poems.html","id":"references","dir":"Reference","previous_headings":"","what":"References","title":"poems: Pattern-oriented ensemble modeling and simulation — poems","text":"Beaumont, M. ., Zhang, W., & Balding, D. J. (2002). 'Approximate Bayesian computation population genetics'. Genetics, vol. 162, . 4, pp, 2025–2035. Grimm, V., Revilla, E., Berger, U., Jeltsch, F., Mooij, W. M., Railsback, S. F., Thulke, H. H., Weiner, J., Wiegand, T., DeAngelis, D. L., (2005). 'Pattern-Oriented Modeling Agent-Based Complex Systems: Lessons Ecology'. Science vol. 310, . 5750, pp. 987–991.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/poems.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"poems: Pattern-oriented ensemble modeling and simulation — poems","text":"","code":"# Here we demonstrate building and running a simple population model. For a # demonstration of the POM workflow with the model, see vignette(\"simple_example\").  # Demonstration example region (U Island) and initial abundance coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) initial_abundance <- seq(0, 300, 50) raster::plot(region$raster_from_values(initial_abundance),   main = \"Initial abundance\", xlab = \"Longitude (degrees)\",   ylab = \"Latitude (degrees)\", zlim = c(0, 300), colNA = \"blue\" )   # Set population model pop_model <- PopulationModel$new(   region = region,   time_steps = 5,   populations = 7,   initial_abundance = initial_abundance,   stage_matrix = matrix(c(     0, 2.5, # Leslie/Lefkovitch matrix     0.8, 0.5   ), nrow = 2, ncol = 2, byrow = TRUE),   carrying_capacity = rep(200, 7),   density_dependence = \"logistic\",   dispersal = (!diag(nrow = 7, ncol = 7)) * 0.05,   result_stages = c(1, 2) )  # Run single simulation results <- population_simulator(pop_model) results # examine #> $all #> $all$abundance #> [1] 1032 1137 1264 1278 1301 #>  #> $all$abundance_stages #> $all$abundance_stages[[1]] #> [1] 606 693 771 759 752 #>  #> $all$abundance_stages[[2]] #> [1] 426 444 493 519 549 #>  #>  #>  #> $abundance #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   50  115  153  185  187 #> [2,]   87  130  170  157  160 #> [3,]  133  163  192  177  173 #> [4,]  170  171  186  187  193 #> [5,]  194  175  180  181  206 #> [6,]  183  187  198  190  178 #> [7,]  215  196  185  201  204 #>  #> $abundance_stages #> $abundance_stages[[1]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   31   65   95  109  114 #> [2,]   52   81  106   90   91 #> [3,]   77   98  129   99  115 #> [4,]  103  102  105  121  107 #> [5,]  119   97  112  105  117 #> [6,]  105  117  125  115   94 #> [7,]  119  133   99  120  114 #>  #> $abundance_stages[[2]] #>      [,1] [,2] [,3] [,4] [,5] #> [1,]   19   50   58   76   73 #> [2,]   35   49   64   67   69 #> [3,]   56   65   63   78   58 #> [4,]   67   69   81   66   86 #> [5,]   75   78   68   76   89 #> [6,]   78   70   73   75   84 #> [7,]   96   63   86   81   90 #>  #>  raster::plot(region$raster_from_values(results$abundance[, 5]),   main = \"Final abundance\", xlab = \"Longitude (degrees)\",   ylab = \"Latitude (degrees)\", zlim = c(0, 300), colNA = \"blue\" )"},{"path":"https://globalecologylab.github.io/poems/reference/population_density.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested functions for population density dependence. — population_density","title":"Nested functions for population density dependence. — population_density","text":"Modular functions population simulator performing density dependent adjustments transition rates.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_density.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested functions for population density dependence. — population_density","text":"","code":"population_density(   populations,   stage_matrix,   fecundity_mask,   fecundity_max,   density_dependence,   growth_rate_max,   density_affects,   density_stages,   density_precision,   simulator )"},{"path":"https://globalecologylab.github.io/poems/reference/population_density.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested functions for population density dependence. — population_density","text":"populations Number populations. stage_matrix Matrix transition (fecundity & survival) rates stages time step (Leslie/Lefkovitch matrix). fecundity_mask Matrix 0-1 indicate (proportions) transition rates refer fecundity. fecundity_max Maximum transition fecundity rate (Leslie/Lefkovitch matrix). density_dependence Density dependence can \"ceiling\" (default), \"logistic\" (Ricker), user-defined function (optionally nested list additional attributes) adjusting transition rates: function(params), params list passed function containing: transition_array 3D array transition rates: stages stages populations. fecundity_mask Matrix 0-1 indicate (proportions) transition rates refer fecundity. fecundity_max Maximum transition fecundity rate (Leslie/Lefkovitch matrix). carrying_capacity Array carrying capacity values population. stage_abundance Matrix abundance stage (rows) population (columns). population_abundance Array summed population abundances stages. density_abundance Array summed population abundances stages affected density. growth_rate_max Maximum growth rate value array populations. occupied_indices Array indices populations occupied (current) time step. calculate_multipliers Function (function(growth_rates)) finding multipliers (stages > 1) apply affected transitions result target growth rates (dominant eigenvalues). apply_multipliers Function (function(transition_array, multipliers) applying (stages > 1) multipliers affected transition rates within transition array (returns multiplied transition array). simulator SimulatorReference object dynamically accessible attached results lists. additional attributes Additional attributes density dependence optionally nested list. returns adjusted transition array occupied populations growth_rate_max Maximum growth rate (utilized density dependence processes). density_affects Matrix booleans numeric (0-1) indicating transition vital rates affected density (default ). density_stages Array booleans numeric (0,1) stage indicate stages affected density (default ). density_precision Numeric precision calculated multipliers (used stages > 1) applied affected transition rates (default 3 decimal places). simulator SimulatorReference object dynamically accessible attached results lists.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_density.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested functions for population density dependence. — population_density","text":"Density dependent calculation function, either: function(carrying_capacity, stage_abundance) ceiling density dependence function, function(transition_array, carrying_capacity, stage_abundance, occupied_indices) user-defined density dependence function, : transition_array 3D array transition rates: stages stages populations. carrying_capacity Array carrying capacity values population. stage_abundance Matrix abundance stage (rows) population (columns). occupied_indices Array indices populations occupied.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_density.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested functions for population density dependence. — population_density","text":"","code":"# Ceiling density dependence stage_matrix <- array(c(0, 0.5, 0, 3, 0, 0.7, 4, 0, 0.8), c(3, 3)) fecundity_mask <- array(c(0, 0, 0, 1, 0, 0, 1, 0, 0), c(3, 3)) simulator <- SimulatorReference$new() density_function <- population_density(  populations = 7, stage_matrix = stage_matrix, fecundity_mask = fecundity_mask,  fecundity_max = NULL, density_dependence = \"ceiling\",  growth_rate_max = NULL, density_affects = NULL, density_stages = c(0, 1, 1),  density_precision = NULL, simulator = simulator ) carrying_capacity <- rep(10, 7) stage_abundance <- matrix(c(  7, 13, 0, 26, 0, 39, 47,  2, 0, 6, 8, 0, 12, 13,  0, 3, 4, 6, 0, 9, 10 ), nrow = 3, ncol = 7, byrow = TRUE)  # Life cycle stages 2 and 3 (rows 2 and 3) all add up to 10 or less density_function(carrying_capacity, stage_abundance) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    7   13    0   26    0   39   47 #> [2,]    2    0    6    6    0    6    6 #> [3,]    0    3    4    4    0    4    4"},{"path":"https://globalecologylab.github.io/poems/reference/population_dispersal.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested functions for population dispersal. — population_dispersal","title":"Nested functions for population dispersal. — population_dispersal","text":"Modular functions population simulator performing dispersal stage abundance specified time step via dispersal rates provided.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_dispersal.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested functions for population dispersal. — population_dispersal","text":"","code":"population_dispersal(   replicates,   time_steps,   years_per_step,   populations,   demographic_stochasticity,   density_stages,   dispersal,   dispersal_stages,   dispersal_source_n_k = NULL,   dispersal_target_k = NULL,   dispersal_target_n = NULL,   dispersal_target_n_k = NULL,   simulator )"},{"path":"https://globalecologylab.github.io/poems/reference/population_dispersal.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested functions for population dispersal. — population_dispersal","text":"replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. populations Number populations. demographic_stochasticity Boolean optionally choosing demographic stochasticity transformation. density_stages Array booleans numeric (0,1) stage indicate stages affected density. dispersal Either matrix dispersal rates populations (source columns target rows) list data frames non-zero dispersal rates indices constructing compact dispersal matrix, optional changing rates time (per class DispersalGenerator dispersal_data attribute). Alternatively user-defined function (optionally nested list additional attributes) may used: function(params), params list passed function containing: replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. populations Number populations. stages Number life cycle stages. demographic_stochasticity Boolean optionally choosing demographic stochasticity transformation. density_stages Array booleans numeric (0,1) stage indicate stages affected density. dispersal_stages Array relative dispersal (0-1) stage indicate degree stage participates dispersal. dispersal_source_n_k Dispersal proportion (p) density dependence via source population abundance divided carrying capacity (n/k), p reduced via linear slope (defined two list items) n/k <= cutoff (p = 0) n/k >= threshold. dispersal_target_k Dispersal rate (r) density dependence via target population carrying capacity (k), r reduced via linear slope (origin) k <= threshold. dispersal_target_n Dispersal rate (r) density dependence via target population abundance (n), r reduced via linear slope (defined two list items) n >= threshold n <= cutoff (r = 0) vice versa. dispersal_target_n_k Dispersal rate (r) density dependence via target population abundance divided carrying capacity (n/k), r reduced via linear slope (defined two list items) n/k >= threshold n/k <= cutoff (r = 0) vice versa. r Simulation replicate. tm Simulation time step. carrying_capacity Array carrying capacity values population time step. stage_abundance Matrix abundance stage (rows) population (columns) time step. occupied_indices Array indices populations occupied time step. simulator SimulatorReference object dynamically accessible attached results lists. additional attributes Additional attributes transformation optionally nested list. returns post-dispersal abundance matrix dispersal_stages Array relative dispersal (0-1) stage indicate degree stage participates dispersal (default 1 stages). dispersal_source_n_k Dispersal proportion (p) density dependence via source population abundance divided carrying capacity (n/k), p reduced via linear slope (defined two list items) n/k <= cutoff (p = 0) n/k >= threshold vice versa. dispersal_target_k Dispersal rate (r) density dependence via target population carrying capacity (k), r reduced via linear slope (origin) k <= threshold. dispersal_target_n Dispersal rate (r) density dependence via target population abundance (n), r reduced via linear slope (defined two list items) n >= threshold n <= cutoff (r = 0) visa-versa. dispersal_target_n_k Dispersal rate (r) density dependence via target population abundance divided carrying capacity (n/k), r reduced via linear slope (defined two list items) n/k >= threshold n/k <= cutoff (r = 0) vice versa. simulator SimulatorReference object dynamically accessible attached results lists.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_dispersal.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested functions for population dispersal. — population_dispersal","text":"Dispersal function: function(r, tm, carrying_capacity, stage_abundance, occupied_indices), : r Simulation replicate. tm Simulation time step. carrying_capacity Array carrying capacity values population time step. stage_abundance Matrix abundance stage (rows) population (columns) time step. occupied_indices Array indices populations occupied time step. returns New stage abundance matrix dispersal applied.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_dispersal.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested functions for population dispersal. — population_dispersal","text":"","code":"# User-defined dispersal: one-quarter of dispersing stages move one population over simulator <- SimulatorReference$new() example_function <- function(params) {   params$simulator$attached$params <- params # attach to reference object   emigrants <- round(params$stage_abundance * params$dispersal_stages * 0.25)   return(params$stage_abundance - emigrants + emigrants[, c(7, 1:6)]) } dispersal_function <- population_dispersal(  replicates = 4,  time_steps = 10,  years_per_step = 1,  populations = 7,  demographic_stochasticity = TRUE,  density_stages = c(0, 1, 1),  dispersal = example_function,  dispersal_stages = c(0, 1, 0.5),  dispersal_source_n_k = list(cutoff = -0.5, threshold = 1.5),  dispersal_target_k = 5,  dispersal_target_n = list(threshold = 10, cutoff = 15),  simulator = simulator ) carrying_capacity <- rep(10, 7) stage_abundance <- matrix(  c(    7, 13, 0, 26, 0, 39, 47,    2, 0, 6, 8, 0, 12, 13,    0, 3, 4, 6, 0, 9, 10  ),  nrow = 3,  ncol = 7,  byrow = TRUE ) occupied_indices <- (1:7)[-5] dispersal_function(r = 2, tm = 6, carrying_capacity, stage_abundance,                    occupied_indices) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    7   13    0   26    0   39   47 #> [2,]    5    0    4    8    2    9   13 #> [3,]    1    3    4    5    1    8   10"},{"path":"https://globalecologylab.github.io/poems/reference/population_env_stoch.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested functions for population environmental stochasticity. — population_env_stoch","title":"Nested functions for population environmental stochasticity. — population_env_stoch","text":"Modular functions population simulator performing correlated environmentally stochastic adjustments transition rates.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_env_stoch.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested functions for population environmental stochasticity. — population_env_stoch","text":"","code":"population_env_stoch(   populations,   fecundity_matrix,   fecundity_max,   survival_matrix,   standard_deviation,   correlation )"},{"path":"https://globalecologylab.github.io/poems/reference/population_env_stoch.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested functions for population environmental stochasticity. — population_env_stoch","text":"populations Number populations. fecundity_matrix Matrix transition fecundity rates (Leslie/Lefkovitch matrix non-zero fecundities ). fecundity_max Maximum transition fecundity rate (Leslie/Lefkovitch matrix). survival_matrix Matrix transition survival rates (Leslie/Lefkovitch matrix non-zero survivals ). standard_deviation Standard deviation matrix applying environmental stochasticity transition rates. correlation List containing either environmental correlation matrix (correlation_matrix), pre-calculated transposed (Cholesky) decomposition matrix (t_decomposition_matrix), compact transposed (Cholesky) decomposition matrix (t_decomposition_compact_matrix) corresponding map population indices (t_decomposition_compact_map), per SpatialCorrelation class attributes.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_env_stoch.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested functions for population environmental stochasticity. — population_env_stoch","text":"Environmental stochasticity calculation function: function(fecundity_array, survival_array, occupied_indices), : fecundity_array 3D array fecundity rates (stages rows stages columns populations deep). survival_array 3D array survival rates (stages rows stages columns populations deep). occupied_indices Array indices populations occupied. returns List containing stochastically varied fecundity survival arrays.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_env_stoch.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested functions for population environmental stochasticity. — population_env_stoch","text":"","code":"fecundity_matrix <- array(c(0, 0, 0, 3, 0, 0, 4, 0, 0), c(3, 3)) survival_matrix <- array(c(0, 0.5, 0, 0, 0, 0.7, 0, 0, 0.8), c(3, 3)) standard_deviation <- (fecundity_matrix + survival_matrix) * 0.3 variation_array <- array(rep(seq(0.85, 1.15, 0.05), each = 9), c(3, 3, 7)) fecundity_array <- array(fecundity_matrix, c(3, 3, 7)) * variation_array survival_array <- array(survival_matrix, c(3, 3, 7)) * variation_array stage_abundance <- matrix(c(    7, 13, 0, 26, 0, 39, 47,    2, 0, 6, 8, 0, 12, 13,    0, 3, 4, 6, 0, 9, 10 ), nrow = 3, ncol = 7, byrow = TRUE) occupied_indices <- (1:7)[-5] env_stoch_function <- population_env_stoch(   populations = 7, fecundity_matrix, fecundity_max = NULL, survival_matrix,   standard_deviation, correlation = NULL ) env_stoch_function(fecundity_array, survival_array, occupied_indices) #> $fecundity_array #> , , 1 #>  #>      [,1]     [,2]     [,3] #> [1,]    0 2.186898 2.915864 #> [2,]    0 0.000000 0.000000 #> [3,]    0 0.000000 0.000000 #>  #> , , 2 #>  #>      [,1]     [,2]    [,3] #> [1,]    0 2.257598 3.01013 #> [2,]    0 0.000000 0.00000 #> [3,]    0 0.000000 0.00000 #>  #> , , 3 #>  #>      [,1]     [,2]     [,3] #> [1,]    0 3.947067 5.262756 #> [2,]    0 0.000000 0.000000 #> [3,]    0 0.000000 0.000000 #>  #> , , 4 #>  #>      [,1]     [,2]     [,3] #> [1,]    0 3.078633 4.104844 #> [2,]    0 0.000000 0.000000 #> [3,]    0 0.000000 0.000000 #>  #> , , 5 #>  #>      [,1] [,2] [,3] #> [1,]    0 3.15  4.2 #> [2,]    0 0.00  0.0 #> [3,]    0 0.00  0.0 #>  #> , , 6 #>  #>      [,1]     [,2]     [,3] #> [1,]    0 2.167926 2.890569 #> [2,]    0 0.000000 0.000000 #> [3,]    0 0.000000 0.000000 #>  #> , , 7 #>  #>      [,1]     [,2]     [,3] #> [1,]    0 2.635184 3.513578 #> [2,]    0 0.000000 0.000000 #> [3,]    0 0.000000 0.000000 #>  #>  #> $survival_array #> , , 1 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 0.0000000 0.0000000 #> [2,] 0.3756352 0.0000000 0.0000000 #> [3,] 0.0000000 0.5416915 0.6429154 #>  #> , , 2 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 0.0000000 0.0000000 #> [2,] 0.3846685 0.0000000 0.0000000 #> [3,] 0.0000000 0.5540691 0.6619634 #>  #> , , 3 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 0.0000000 0.0000000 #> [2,] 0.6637317 0.0000000 0.0000000 #> [3,] 0.0000000 0.9140909 0.9915572 #>  #> , , 4 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 0.0000000 0.0000000 #> [2,] 0.5378074 0.0000000 0.0000000 #> [3,] 0.0000000 0.7912284 0.9481373 #>  #> , , 5 #>  #>       [,1]  [,2] [,3] #> [1,] 0.000 0.000 0.00 #> [2,] 0.525 0.000 0.00 #> [3,] 0.000 0.735 0.84 #>  #> , , 6 #>  #>           [,1]      [,2]      [,3] #> [1,] 0.0000000 0.0000000 0.0000000 #> [2,] 0.3269199 0.0000000 0.0000000 #> [3,] 0.0000000 0.4023555 0.3788834 #>  #> , , 7 #>  #>          [,1]      [,2]      [,3] #> [1,] 0.000000 0.0000000 0.0000000 #> [2,] 0.430251 0.0000000 0.0000000 #> [3,] 0.000000 0.6112181 0.9956671 #>  #>"},{"path":"https://globalecologylab.github.io/poems/reference/population_results.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested functions for initializing, calculating and collecting population simulator results. — population_results","title":"Nested functions for initializing, calculating and collecting population simulator results. — population_results","text":"Modular functions population simulator initializing, calculating collecting simulator results.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_results.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested functions for initializing, calculating and collecting population simulator results. — population_results","text":"","code":"population_results(   replicates,   time_steps,   coordinates,   initial_abundance,   results_selection = NULL,   result_stages = NULL )"},{"path":"https://globalecologylab.github.io/poems/reference/population_results.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested functions for initializing, calculating and collecting population simulator results. — population_results","text":"replicates Number replicate simulation runs. time_steps Number simulation time steps. coordinates Data frame (matrix) X-Y population coordinates. initial_abundance Matrix initial abundances stage (rows) population (columns). results_selection List results selection : \"abundance\" (default), \"ema\", \"extirpation\", \"extinction_location\", \"harvested\", \"occupancy\"; \"summarize\" (default) \"replicate\". result_stages Array booleans numeric (0, 1, 2, ...) stage indicate stages included/combined (unique digit > 0; optionally named) results (default 1 stages).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_results.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested functions for initializing, calculating and collecting population simulator results. — population_results","text":"List result functions: initialize_attributes = function()) Constructs returns initialized nested list selected result attributes. initialize_replicate = function(results) Initializes returns nested result attributes start replicate. calculate_at_timestep = function(r, tm, stage_abundance, harvested, results) Appends calculates (non-NULL) results returns nested result attributes end time step (tm) within replicate (r). finalize_attributes = function(results) Finalizes result calculations end simulation.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_results.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested functions for initializing, calculating and collecting population simulator results. — population_results","text":"","code":"coordinates <- array(c(1:4, 4:1), c(7, 2)) initial_abundance <- matrix(c(   7, 13, 0, 26, 0, 39, 47,   2, 0, 6, 8, 0, 12, 13,   0, 3, 4, 6, 0, 9, 10 ), nrow = 3, ncol = 7, byrow = TRUE) results_selection <- c(\"abundance\", \"ema\", \"extirpation\",                          \"extinction_location\", \"harvested\", \"occupancy\") result_functions <- population_results(   replicates = 1, time_steps = 10, coordinates, initial_abundance,   results_selection = results_selection, result_stages = c(0, 1, 1) ) result_functions$initialize_attributes() #> $all #> $all$abundance #>  [1] 0 0 0 0 0 0 0 0 0 0 #>  #> $all$ema #>  [1] 0 0 0 0 0 0 0 0 0 0 #>  #> $all$extirpation #> [1] NA #>  #> $all$extinction_location #>       x  y #> [1,] NA NA #>  #> $all$harvested #>  [1] 0 0 0 0 0 0 0 0 0 0 #>  #> $all$occupancy #>  [1] 0 0 0 0 0 0 0 0 0 0 #>  #>  #> $abundance #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    0    0    0    0    0    0    0    0    0     0 #> [2,]    0    0    0    0    0    0    0    0    0     0 #> [3,]    0    0    0    0    0    0    0    0    0     0 #> [4,]    0    0    0    0    0    0    0    0    0     0 #> [5,]    0    0    0    0    0    0    0    0    0     0 #> [6,]    0    0    0    0    0    0    0    0    0     0 #> [7,]    0    0    0    0    0    0    0    0    0     0 #>  #> $extirpation #> [1] NA NA NA NA  0 NA NA #>  #> $last_occupied_abundance_count #> [1]  2  3 10 14  0 21 23 #>  #> $harvested #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    0    0    0    0    0    0    0    0    0     0 #> [2,]    0    0    0    0    0    0    0    0    0     0 #> [3,]    0    0    0    0    0    0    0    0    0     0 #> [4,]    0    0    0    0    0    0    0    0    0     0 #> [5,]    0    0    0    0    0    0    0    0    0     0 #> [6,]    0    0    0    0    0    0    0    0    0     0 #> [7,]    0    0    0    0    0    0    0    0    0     0 #>"},{"path":"https://globalecologylab.github.io/poems/reference/population_simulator.html","id":null,"dir":"Reference","previous_headings":"","what":"Runs a stage-based demographic population model simulation. — population_simulator","title":"Runs a stage-based demographic population model simulation. — population_simulator","text":"Simulates stage-based demographic population model returns simulation results across multiple replicate runs. Processes run simulation time-step include: Density dependence calculations (ceiling, logistic, user-defined) Environmental stochasticity calculations Stage transition (stochastic) calculations Translocation calculations (user-defined) Harvest calculations (user-defined) Mortality calculations (user-defined) Dispersal calculations (default user-defined) Results collection","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_simulator.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Runs a stage-based demographic population model simulation. — population_simulator","text":"","code":"population_simulator(inputs)"},{"path":"https://globalecologylab.github.io/poems/reference/population_simulator.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Runs a stage-based demographic population model simulation. — population_simulator","text":"inputs Nested list/object named elements: random_seed Number seed random number generation stochasticity. replicates Number replicate simulation runs (default 1). time_steps Number simulation time steps. Required input. years_per_step Number years per time step (default 1). populations Number populations. Required input. coordinates Data frame (matrix) X-Y population coordinates. stages Number life cycle stages. region Region object defining study region. initial_abundance Array (matrix) initial abundances (stage rows) population (columns). one stage region object attached, initial abundance may provided form raster specs region raster. vector can provided forced matrix. Required input. stage_matrix Matrix transition (fecundity & survival) rates stages time step (Leslie/Lefkovitch matrix). Required input. fecundity_mask Matrix 0-1 indicate (proportions) transition rates refer fecundity. fecundity_max Maximum transition fecundity rate (Leslie/Lefkovitch matrix). demographic_stochasticity Boolean choosing demographic stochasticity transition, dispersal, harvest /processes (default TRUE). standard_deviation Standard deviation matrix (single value) applying environmental stochasticity transition rates. correlation List containing either environmental correlation matrix (correlation_matrix), pre-calculated transposed (Cholesky) decomposition matrix (t_decomposition_matrix), compact transposed (Cholesky) decomposition matrix (t_decomposition_compact_matrix) corresponding map population indices (t_decomposition_compact_map), per SpatialCorrelation class attributes. carrying_capacity Array (matrix) carrying capacity values population cell (populations rows time_steps columns across time). Required input. density_dependence Density dependence can \"ceiling\" (default), \"logistic\" (Ricker), user-defined function (optionally nested list additional attributes) adjusting transition rates: function(params), params list passed function containing: transition_array 3D array transition rates: stages stages populations. fecundity_mask Matrix 0-1 indicate (proportions) transition rates refer fecundity. fecundity_max Maximum transition fecundity rate (Leslie/Lefkovitch matrix). carrying_capacity Array carrying capacity values population. stage_abundance Matrix abundances stage (rows) population (columns). population_abundance Array summed population abundances stages. density_abundance Array summed population abundances stages affected density. growth_rate_max Maximum growth rate value array populations. occupied_indices Array indices populations occupied (current) time step. calculate_multipliers Function (function(growth_rates)) finding multipliers (stages > 1) apply affected transitions result target growth rates (dominant eigenvalues). apply_multipliers Function (function(transition_array, multipliers) applying multipliers (stages > 1) affected transition rates within transition array (returns multiplied array). simulator SimulatorReference object dynamically accessible attached results lists. optional attributes Additional numeric attributes density dependence optionally nested list. returns transformed transition 3D array growth_rate_max Maximum growth rate (utilized density dependence processes). density_affects Matrix booleans numeric (0-1) indicating transition vital rates affected density (default ). density_stages Array booleans numeric (0,1) stage indicate stages affected density (default ). density_precision Numeric precision calculated multipliers (used stages > 1) applied affected transition rates (default 3 decimal places). translocation optional user-defined function (optionally nested list additional attributes) applying translocation spatio-temporal management (abundances): function(params), params list passed function containing: replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. populations Number populations. stages Number lifecycle stages. demographic_stochasticity Boolean optionally choosing demographic stochasticity transformation. density_stages Array booleans numeric (0,1) stage indicate stages affected density. r Simulation replicate. tm Simulation time step. carrying_capacity Array carrying capacity values population time step. stage_abundance Matrix (current) abundance stage (rows) population (columns) time step. occupied_indices Array indices populations occupied (current) time step. simulator SimulatorReference object dynamically accessible attached results lists. additional attributes Additional attributes transformation optionally nested list. returns transformed stage abundance matrix (list stage abundance carrying capacity) harvest optional user-defined function (optionally nested list additional attributes) applying harvesting (abundances): function(params) per translocation. mortality optional user-defined function (optionally nested list additional attributes) applying mortality (abundances): function(params) per translocation. dispersal Either matrix dispersal rates populations (source columns target rows) list data frames non-zero dispersal rates indices constructing compact dispersal matrix, optional changing rates time (per class DispersalGenerator dispersal_data attribute). Alternatively user-defined function (optionally nested list additional attributes) may used: function(params), params list passed function containing: replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. populations Number populations. demographic_stochasticity Boolean optionally choosing demographic stochasticity transformation. density_stages Array booleans numeric (0,1) stage indicate stages affected density. dispersal_stages Array relative dispersal (0-1) stage indicate degree stage participates dispersal. r Simulation replicate. tm Simulation time step. carrying_capacity Array carrying capacity values population time step. stage_abundance Matrix abundance stage (rows) population (columns) time step. occupied_indices Array indices populations occupied time step. simulator SimulatorReference object dynamically accessible attached results lists. additional attributes Additional attributes transformation optionally nested list. returns post-dispersal abundance matrix dispersal_stages Array relative dispersal (0-1) stage indicate degree stage participates dispersal (default 1 stages). dispersal_source_n_k Dispersal proportion (p) density dependence via source population abundance divided carrying capacity (n/k), p reduced via linear slope (defined two list items) n/k <= cutoff (p = 0) n/k >= threshold (aliases: dispersal_n_k_cutoff & dispersal_n_k_threshold). dispersal_target_k Dispersal rate (r) density dependence via target population carrying capacity (k), r reduced via linear slope (origin) k <= threshold (alias: dispersal_k_threshold). dispersal_target_n Dispersal rate (r) density dependence via target population abundance (n), r reduced via linear slope (defined two list items) n >= threshold n <= cutoff (r = 0) vice versa (aliases: dispersal_n_threshold & dispersal_n_cutoff). dispersal_target_n_k Dispersal rate (r) density dependence via target population abundance divided carrying capacity (n/k), r reduced via linear slope (defined two list items) n/k >= threshold n/k <= cutoff (r = 0) vica versa. abundance_threshold Abundance threshold (needs exceeded) population persist. simulation_order vector simulation process names configured order execution (default \"transition\", \"translocation\", \"harvest\" (plus harvested results), \"mortality\", \"dispersal\", \"results\" (except harvested). additional transformation functions Additional user-defined abundance transformation functions (optionally nested lists additional attributes) utilised listed simulation_order (function per translocation). results_selection List results selection : \"abundance\" (default), \"ema\", \"extirpation\", \"extinction_location\", \"harvested\", \"occupancy\"; \"summarize\" (default) \"replicate\". result_stages Array booleans numeric (0, 1, 2, ...) stage indicate stages included/combined (unique digit > 0; optionally named) results (default 1 stages).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_simulator.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Runs a stage-based demographic population model simulation. — population_simulator","text":"Selected simulation results nested list summarized (mean, sd, min, max) across multiple replicates (default), 2-3D arrays including results replicate: abundance Matrix 3D array simulation abundance: populations rows time_steps columns (replicates deep). abundance_stages List matrices 3D arrays simulation abundance unique stage combinations present: populations rows time_steps columns (replicates deep). $abundance Array matrix total abundance across populations: time_steps (rows replicates columns). $abundance_stages List arrays matrices total abundance across populations unique stage combinations present: time_steps (rows replicates columns). $ema Array expected minimum abundance time step (averaged across replicates). extirpation Array matrix extirpation times: populations (rows replicates columns). $extirpation Array extirpation time across populations replicate. $extinction_location weighted centroid cells occupied time-step prior extirpation populations (occurred) replicate. harvested Matrix 3D array individuals harvested: populations rows time_steps columns (replicates deep). harvested_stages List matrices 3D arrays individuals harvested unique stage combinations present: populations rows time_steps columns (replicates deep). $harvested Array matrix individuals harvested across populations: time_steps (rows replicates columns). $harvested_stages List arrays matrices individuals harvested across populations unique stage combinations present: time_steps (rows replicates columns). $occupancy Array matrix number populations occupied time-step: time_steps (rows replicates columns). additional results Additional results may attached via user-defined functions (using params$simulator$results).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_simulator.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Runs a stage-based demographic population model simulation. — population_simulator","text":"","code":"# U Island example region coordinates <- data.frame(   x = rep(seq(177.01, 177.05, 0.01), 5),   y = rep(seq(-18.01, -18.05, -0.01), each = 5) ) template_raster <- Region$new(coordinates = coordinates)$region_raster # full extent template_raster[][-c(7, 9, 12, 14, 17:19)] <- NA # make U Island region <- Region$new(template_raster = template_raster) # Harvest function harvest <- list(   rate = 0.3,   function(params) round(params$stage_abundance * (1 - params$rate)) ) # Population model stage_matrix <- matrix(c(   0, 2.5, # Leslie/Lefkovitch matrix   0.8, 0.5 ), nrow = 2, ncol = 2, byrow = TRUE) pop_model <- PopulationModel$new(   region = region,   time_steps = 10, # years   populations = region$region_cells, # 7   stage_matrix = stage_matrix,   initial_abundance = rep(10, 7),   carrying_capacity = array(70:1, c(7, 10)),   harvest = harvest,   results_selection = c(\"abundance\", \"harvested\") ) # Simulations population_simulator(pop_model) # model #> $all #> $all$abundance #>  [1]  79  91 102 122 132 145 119  88  55  18 #>  #> $all$harvested #>  [1] 35 38 43 54 59 64 52 38 22 10 #>  #>  #> $abundance #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    9    9   14   15   18   24   17   14   10     5 #> [2,]    9   15   12   21   19   24   19   14    9     4 #> [3,]   12   12   10   14   16   23   18   13    8     3 #> [4,]   13   15   20   19   27   22   18   13    8     2 #> [5,]   13   19   24   29   26   22   16   12    8     2 #> [6,]   13   13   12   14   11   16   16   11    6     1 #> [7,]   10    8   10   10   15   14   15   11    6     1 #>  #> $harvested #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    3    3    5    7    7   11    8    7    4     2 #> [2,]    4    6    5   10    9   10    8    6    4     2 #> [3,]    6    5    5    6    8   10    8    6    4     2 #> [4,]    6    6    9    9   12   10    7    5    3     2 #> [5,]    6    8   11   13   12    9    7    5    2     1 #> [6,]    5    6    4    5    5    7    7    5    3     1 #> [7,]    5    4    4    4    6    7    7    4    2     0 #>  inputs <- pop_model$get_attributes() population_simulator(inputs) # list #> $all #> $all$abundance #>  [1]  85 117 123 126 126 131 110  84  56  20 #>  #> $all$harvested #>  [1] 36 48 53 55 55 54 48 34 21  8 #>  #>  #> $abundance #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]   11   19   18   20   18   25   19   14   10     5 #> [2,]    9   12   12   13   14   10    7    9   10     4 #> [3,]   13   25   28   28   28   23   18   13    9     3 #> [4,]   14   16   17   17   13   22   17   13    8     3 #> [5,]   12   15   15   15   15   14   17   12    7     2 #> [6,]   12   15   15   12   18   16   16   12    6     2 #> [7,]   14   15   18   21   20   21   16   11    6     1 #>  #> $harvested #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] [,8] [,9] [,10] #> [1,]    5    7    8    9    7   10    9    7    4     2 #> [2,]    4    4    5    6    6    4    3    4    3     2 #> [3,]    6   10   12   13   12   10    8    5    3     2 #> [4,]    6    7    8    7    5   10    8    5    3     1 #> [5,]    5    6    6    6    7    5    7    5    3     1 #> [6,]    5    7    6    4    8    7    7    4    3     0 #> [7,]    5    7    8   10   10    8    6    4    2     0 #>"},{"path":"https://globalecologylab.github.io/poems/reference/population_transformation.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested functions for a user-defined population abundance (and capacity) transformation. — population_transformation","title":"Nested functions for a user-defined population abundance (and capacity) transformation. — population_transformation","text":"Modular functions population simulator performing transformation stage abundance (optionally carrying capacity) specified time step via user-defined function.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_transformation.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested functions for a user-defined population abundance (and capacity) transformation. — population_transformation","text":"","code":"population_transformation(   replicates,   time_steps,   years_per_step,   populations,   demographic_stochasticity,   density_stages,   transformation,   simulator,   name = \"transformation\" )"},{"path":"https://globalecologylab.github.io/poems/reference/population_transformation.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested functions for a user-defined population abundance (and capacity) transformation. — population_transformation","text":"replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. populations Number populations. demographic_stochasticity Boolean optionally choosing demographic stochasticity transformation. density_stages Array booleans numeric (0,1) stage indicate stages affected density. transformation user-defined function (optionally nested list additional attributes) performing transformation: function(params), params list passed function containing: replicates Number replicate simulation runs. time_steps Number simulation time steps. years_per_step Number years per time step. populations Number populations. stages Number life cycle stages. demographic_stochasticity Boolean optionally choosing demographic stochasticity transformation. density_stages Array booleans numeric (0,1) stage indicate stages affected density. r Simulation replicate. tm Simulation time step. carrying_capacity Array carrying capacity values population time step. stage_abundance Matrix (current) abundance stage (rows) population (columns) time step. occupied_indices Array indices populations occupied (current) time step. simulator SimulatorReference object dynamically accessible attached results lists. additional attributes Additional attributes transformation optionally nested list. returns transformed stage abundance matrix (list stage abundance carrying capacity) simulator SimulatorReference object dynamically accessible attached results lists. name Optional name transformation (default \"transformation\").","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_transformation.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested functions for a user-defined population abundance (and capacity) transformation. — population_transformation","text":"Abundance (capacity) transformation function: function(r, tm, carrying_capacity, stage_abundance, occupied_indices), : r Simulation replicate. tm Simulation time step. carrying_capacity Array carrying capacity values population time step. stage_abundance Matrix abundance stage (rows) population (columns) time step. occupied_indices Array indices populations occupied time step. returns List transformed stage abundance matrix (optionally carrying capacity).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_transformation.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested functions for a user-defined population abundance (and capacity) transformation. — population_transformation","text":"","code":"simulator <- SimulatorReference$new() # Example transformation: a random population is chosen for a severe disturbance event # (only life cycle stage 3 individuals survive) disturbance_function <- function(params) {   params$simulator$attached$params <- params # attach to reference object   random_population <- sample(params$occupied_indices, 1)   new_stage_abundance <- params$stage_abundance   new_stage_abundance[1:2, random_population] <- 0   return(new_stage_abundance) } transformation_function <- population_transformation(   replicates = 4, time_steps = 10, years_per_step = 1,   populations = 7, demographic_stochasticity = TRUE,   density_stages = c(0, 1, 1), transformation = disturbance_function,   simulator ) carrying_capacity <- rep(10, 7) carrying_capacity <- rep(10, 7) stage_abundance <- matrix(c(  7, 13, 0, 26, 0, 39, 47,  2, 0, 6, 8, 0, 12, 13,  0, 3, 4, 6, 0, 9, 10 ), nrow = 3, ncol = 7, byrow = TRUE) occupied_indices <- (1:7)[-5] transformation_function(r = 2, tm = 6, carrying_capacity, stage_abundance,                         occupied_indices) #> $stage_abundance #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    7   13    0    0    0   39   47 #> [2,]    2    0    6    0    0   12   13 #> [3,]    0    3    4    6    0    9   10 #>"},{"path":"https://globalecologylab.github.io/poems/reference/population_transitions.html","id":null,"dir":"Reference","previous_headings":"","what":"Nested functions for stage-based population transitions. — population_transitions","title":"Nested functions for stage-based population transitions. — population_transitions","text":"Modular functions population simulator performing staged-based (Leslie/Lefkovitch matrix) transitions via 3D survival fecundity arrays.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_transitions.html","id":"ref-usage","dir":"Reference","previous_headings":"","what":"Usage","title":"Nested functions for stage-based population transitions. — population_transitions","text":"","code":"population_transitions(   populations,   demographic_stochasticity,   fecundity_matrix,   fecundity_max,   survival_matrix )"},{"path":"https://globalecologylab.github.io/poems/reference/population_transitions.html","id":"arguments","dir":"Reference","previous_headings":"","what":"Arguments","title":"Nested functions for stage-based population transitions. — population_transitions","text":"populations Number populations. demographic_stochasticity Boolean choosing demographic stochasticity transitions. fecundity_matrix Matrix transition fecundity rates (Leslie/Lefkovitch matrix non-zero fecundities ). fecundity_max Maximum transition fecundity rate (Leslie/Lefkovitch matrix). survival_matrix Matrix transition survival rates (Leslie/Lefkovitch matrix non-zero survivals ).","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_transitions.html","id":"value","dir":"Reference","previous_headings":"","what":"Value","title":"Nested functions for stage-based population transitions. — population_transitions","text":"Transition calculation function: function(fecundity_array, survival_array, stage_abundance, occupied_indices), : fecundity_array 3D array fecundity rates (stages rows stages columns populations deep). survival_array 3D array survival rates (stages rows stages columns populations deep). stage_abundance Matrix stage abundances population time step (stages rows populations columns). occupied_indices Array indices populations occupied. returns Transitioned stage abundances.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/population_transitions.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Nested functions for stage-based population transitions. — population_transitions","text":"","code":"# Deterministic transition (no stochasticity) fecundity_matrix <- array(c(0, 0, 0, 3, 0, 0, 4, 0, 0), c(3, 3)) survival_matrix <- array(c(0, 0.5, 0, 0, 0, 0.7, 0, 0, 0.8), c(3, 3)) variation_array <- array(rep(seq(0.85, 1.15, 0.05), each = 9), c(3, 3, 7)) fecundity_array <- array(fecundity_matrix, c(3, 3, 7)) * variation_array survival_array <- array(survival_matrix, c(3, 3, 7)) * variation_array stage_abundance <- matrix(c(   7, 13, 0, 26, 0, 39, 47,   2, 0, 6, 8, 0, 12, 13,  0, 3, 4, 6, 0, 9, 10 ), nrow = 3, ncol = 7, byrow = TRUE) occupied_indices <- (1:7)[-5] transition_function <- population_transitions(   populations = 7, demographic_stochasticity = FALSE,   fecundity_matrix = fecundity_matrix, fecundity_max = NULL,   survival_matrix = survival_matrix ) transition_function(fecundity_array, survival_array, stage_abundance,                      occupied_indices) #>      [,1] [,2] [,3] [,4] [,5] [,6] [,7] #> [1,]    5   11   32   48    0   80   91 #> [2,]    3    6    0   13    0   21   27 #> [3,]    1    2    7   11    0   17   19"},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_data.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette Tasmania IBRA data — tasmania_ibra_data","title":"Thylacine vignette Tasmania IBRA data — tasmania_ibra_data","text":"dataset describing nine Interim Bioregionalisation Australia (IBRA) bioregions Tasmanian study region Thylacine example vignette.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_data.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette Tasmania IBRA data — tasmania_ibra_data","text":"data frame 9 rows 4 variables: index Cross-reference index bioregion key Additional alphabetical cross-reference bioregion abbr Abbreviated name bioregion name Full name bioregion","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_data.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette Tasmania IBRA data — tasmania_ibra_data","text":"https://doi.org/10.1111/2041-210X.13720","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_data.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette Tasmania IBRA data — tasmania_ibra_data","text":"","code":"data(tasmania_ibra_data) data(tasmania_ibra_raster) raster::values(tasmania_ibra_raster)[!is.na(raster::values(tasmania_ibra_raster))] |>   table() |> as.data.frame() |>   merge(tasmania_ibra_data, by.x = \"Var1\", by.y = \"index\") #>   Var1 Freq key abbr                        name #> 1    1   46   A  FUR                    Furneaux #> 2    2   76   B  BEN                  Ben Lomond #> 3    3   40   C  TNM Tasmanian Northern Midlands #> 4    4  147   D  TSE        Tasmanian South East #> 5    5  188   E   TW              Tasmanian West #> 6    6   72   F  TNS   Tasmanian Northern Slopes #> 7    7   93   G  TSR   Tasmanian Southern Ranges #> 8    8   86   H  TCH Tasmanian Central Highlands #> 9    9   47   I  KIN                        King"},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette Tasmania IBRA raster — tasmania_ibra_raster","title":"Thylacine vignette Tasmania IBRA raster — tasmania_ibra_raster","text":"raster dataset defining grid cells nine Interim Bioregionalisation Australia (IBRA) bioregions Tasmanian study region Thylacine example vignette.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_raster.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette Tasmania IBRA raster — tasmania_ibra_raster","text":"raster::RasterLayer object: dimensions 32 rows 40 columns grid resolution 0.1 0.1 degree grid cells extent longitude 144.5 148.5 degrees; latitude -43.8025 -40.6025 degrees CRS WGS84 longitude-latitude values IBRA bioregions defined cells values 1 9 (per index tasmania_ibra_data)","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_raster.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette Tasmania IBRA raster — tasmania_ibra_raster","text":"https://doi.org/10.1111/2041-210X.13720","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_ibra_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette Tasmania IBRA raster — tasmania_ibra_raster","text":"","code":"data(tasmania_ibra_raster) data(tasmania_raster) tasmania_region <- Region$new(   template_raster = tasmania_raster ) tasmania_region$raster_is_consistent(tasmania_ibra_raster) #> [1] TRUE raster::plot(tasmania_ibra_raster)"},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_modifier.html","id":null,"dir":"Reference","previous_headings":"","what":"Tasmania land-use modifier raster — tasmania_modifier","title":"Tasmania land-use modifier raster — tasmania_modifier","text":"raster dataset (11 timesteps) defining intensity land-use cover grid-cell Tasmania study region. NB. dataset projected natively overlay raster datasets contained poems.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_modifier.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Tasmania land-use modifier raster — tasmania_modifier","text":"raster::RasterBrick object: dimensions 36 rows, 34 columns, 11 layers resolution 10km 10km grid cells extent -211571.8, 128428.2, -182583.2, 177416.8  (xmin, xmax, ymin, ymax) CRS +proj=laea +lat_0=-42.2 +lon_0=147 +x_0=0 +y_0=0 +datum=WGS84 +units=m +no_defs values region defined 1224 cells values 0-1. Values 1 indicate extensive land use modification)","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_modifier.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Tasmania land-use modifier raster — tasmania_modifier","text":"https://doi.org/10.1111/2041-210X.13720","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_modifier.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Tasmania land-use modifier raster — tasmania_modifier","text":"","code":"data(tasmania_raster) data(tasmania_modifier) tasmania_region <- Region$new(   template_raster = tasmania_modifier[[1]] ) tasmania_region$raster_is_consistent(tasmania_raster) #> [1] FALSE raster::plot(tasmania_modifier)"},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette Tasmania raster — tasmania_raster","title":"Thylacine vignette Tasmania raster — tasmania_raster","text":"raster dataset defining grid cells Tasmanian study region Thylacine example vignette.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_raster.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette Tasmania raster — tasmania_raster","text":"raster::RasterLayer object: dimensions 32 rows 40 columns grid resolution 0.1 0.1 degree grid cells extent longitude 144.5 148.5 degrees; latitude -43.8025 -40.6025 degrees CRS WGS84 longitude-latitude values region defined 795 cells value 1 (surrounded non-region NA values)","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_raster.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette Tasmania raster — tasmania_raster","text":"https://doi.org/10.1111/2041-210X.13720","code":""},{"path":"https://globalecologylab.github.io/poems/reference/tasmania_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette Tasmania raster — tasmania_raster","text":"","code":"data(tasmania_raster) tasmania_region <- Region$new(   template_raster = tasmania_raster ) raster::plot(tasmania_region$region_raster)"},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_bounty_record.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette bounty record — thylacine_bounty_record","title":"Thylacine vignette bounty record — thylacine_bounty_record","text":"dataset containing historical record Thylacine bounty numbers submitted across Tasmanian study region, nine Interim Bioregionalisation Australia (IBRA) bioregions Thylacine example vignette.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_bounty_record.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette bounty record — thylacine_bounty_record","text":"data frame 22 rows 11 variables: Year Year bounty period 1888 1909 Total Total Tasmania-wide bounty submitted FUR Bounty submitted IBRA bioregion: Furneaux BEN Bounty submitted IBRA bioregion: Ben Lomond TNM Bounty submitted IBRA bioregion: Tasmanian Northern Midlands TSE Bounty submitted IBRA bioregion: Tasmanian South East TW Bounty submitted IBRA bioregion: Tasmanian West TNS Bounty submitted IBRA bioregion: Tasmanian Northern Slopes TSR Bounty submitted IBRA bioregion: Tasmanian Southern Ranges TCH Bounty submitted IBRA bioregion: Tasmanian Central Highlands KIN Bounty submitted IBRA bioregion: King","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_bounty_record.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette bounty record — thylacine_bounty_record","text":"https://doi.org/10.1111/2041-210X.13720","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_bounty_record.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette bounty record — thylacine_bounty_record","text":"","code":"data(thylacine_bounty_record) summary(thylacine_bounty_record) #>       Year          Total             FUR              BEN        #>  Min.   :1888   Min.   :  4.00   Min.   : 0.000   Min.   : 0.00   #>  1st Qu.:1893   1st Qu.: 80.25   1st Qu.: 2.000   1st Qu.: 6.25   #>  Median :1898   Median :106.50   Median : 3.000   Median :12.50   #>  Mean   :1898   Mean   : 92.77   Mean   : 4.318   Mean   :12.32   #>  3rd Qu.:1904   3rd Qu.:117.50   3rd Qu.: 6.500   3rd Qu.:17.75   #>  Max.   :1909   Max.   :136.00   Max.   :13.000   Max.   :28.00   #>       TNM             TSE              TW           TNS             TSR        #>  Min.   : 0.00   Min.   : 0.00   Min.   :0.0   Min.   : 0.00   Min.   : 0.00   #>  1st Qu.: 7.25   1st Qu.:15.25   1st Qu.:0.0   1st Qu.: 4.25   1st Qu.: 8.75   #>  Median :18.00   Median :27.50   Median :0.0   Median :10.00   Median :12.50   #>  Mean   :14.82   Mean   :25.18   Mean   :0.5   Mean   :11.09   Mean   :14.05   #>  3rd Qu.:21.00   3rd Qu.:32.75   3rd Qu.:0.0   3rd Qu.:17.75   3rd Qu.:19.75   #>  Max.   :35.00   Max.   :48.00   Max.   :4.0   Max.   :26.00   Max.   :34.00   #>       TCH             KIN         #>  Min.   :0.000   Min.   : 0.000   #>  1st Qu.:0.250   1st Qu.: 4.000   #>  Median :1.000   Median : 7.000   #>  Mean   :1.773   Mean   : 8.727   #>  3rd Qu.:2.750   3rd Qu.:12.000   #>  Max.   :7.000   Max.   :31.000   # Assuming your data frame is named thylacine_bounty_record plot(thylacine_bounty_record$Year, thylacine_bounty_record$Total, type=\"l\",      main=\"Change in Total Bounties Over Time\",      xlab=\"Year\",      ylab=\"Total Bounties\")"},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette demonstration example matrices — thylacine_example_matrices","title":"Thylacine vignette demonstration example matrices — thylacine_example_matrices","text":"dataset containing precalculated summary matrices use running Thylacine example vignette demonstration mode. values obtained running vignette code 20,000 model simulations DEMONSTRATION = FALSE. Note matrices stored selected 'best' 200 models.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette demonstration example matrices — thylacine_example_matrices","text":"list containing following matrices: extirpation 200 row 795 column matrix cell extirpation dates 'best' 200 models total_bounty 200 row 80 column matrix bounty submitted year 'best' 200 models ibra_bounty 200 row 9 column matrix total bounty submitted IBRA bioregion 'best' 200 models bounty_slope 20,000 row 3 column matrix calculated slope total bounty submitted across 3 intervals sample simulation ibra_extirpation 20,000 row 9 column matrix extirpation dates IBRA bioregion sample simulation","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette demonstration example matrices — thylacine_example_matrices","text":"Precalculated demonstration via example simulation runs.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette demonstration example matrices — thylacine_example_matrices","text":"","code":"data(thylacine_example_matrices) data(tasmania_raster) region <- Region$new(template_raster = tasmania_raster) region$raster_from_values(thylacine_example_matrices$extirpation[1,]) |>  raster::plot(colNA = \"blue\")"},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices_rerun.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette demonstration example (re-run) matrices — thylacine_example_matrices_rerun","title":"Thylacine vignette demonstration example (re-run) matrices — thylacine_example_matrices_rerun","text":"dataset containing precalculated (re-run) summary matrices use running Thylacine example vignette demonstration mode. values obtained running vignette code 10 replicate re-runs selected 'best' 200 model simulations DEMONSTRATION = FALSE.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices_rerun.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette demonstration example (re-run) matrices — thylacine_example_matrices_rerun","text":"list containing following matrices: bounty_slope 2,000 row 3 column matrix calculated slope total bounty submitted across 3 intervals sample simulation ibra_extirpation 2,000 row 9 column matrix extirpation dates IBRA bioregion sample simulation","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices_rerun.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette demonstration example (re-run) matrices — thylacine_example_matrices_rerun","text":"Precalculated demonstration via example simulation re-runs.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_matrices_rerun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette demonstration example (re-run) matrices — thylacine_example_matrices_rerun","text":"","code":"data(thylacine_example_matrices_rerun) rowMeans(thylacine_example_matrices_rerun$bounty_slope) #>    [1] -6.633333 -6.283333 -5.533333 -5.616667 -6.000000 -6.633333 -5.968254 #>    [8] -5.888889 -6.077778 -6.000000 -6.138889 -6.000000 -6.722222 -6.361111 #>   [15] -6.031746 -6.622222 -6.577778 -7.472222 -7.566667 -6.285714 -3.055556 #>   [22] -2.773810 -2.416667 -2.250000 -3.133333 -2.877778 -2.383333 -2.908333 #>   [29] -2.450000 -2.611111 -2.300000 -1.963889 -3.027778 -2.605556 -2.544444 #>   [36] -2.166667 -2.583333 -1.800000 -2.666667 -2.166667 -2.880159 -3.222222 #>   [43] -2.543651 -2.700000 -3.333333 -2.833333 -3.022222 -2.666667 -3.611111 #>   [50] -2.890476 -2.811111 -2.422222 -2.666667 -2.571429 -2.277778 -2.555556 #>   [57] -2.349206 -2.666667 -2.111111 -2.277778 -4.466667 -4.361111 -4.367460 #>   [64] -4.711905 -4.916667 -4.800000 -3.938889 -4.366667 -4.322222 -4.222222 #>   [71] -3.444444 -2.833333 -3.526190 -3.416667 -3.207143 -3.138889 -3.444444 #>   [78] -3.255556 -2.972222 -3.325397 -4.761905 -4.777778 -4.811111 -4.865079 #>   [85] -5.043651 -5.250000 -4.527778 -5.083333 -4.777778 -4.766667 -2.833333 #>   [92] -2.866667 -2.788889 -2.694444 -2.611111 -2.972222 -2.402778 -2.708333 #>   [99] -2.971429 -2.763889 -2.416667 -2.369444 -2.166667 -2.616667 -2.563889 #>  [106] -2.722222 -2.694444 -2.322222 -2.833333 -2.288889 -6.372222 -6.033333 #>  [113] -6.280159 -6.277778 -5.294444 -5.944444 -5.638889 -5.500000 -6.285714 #>  [120] -5.866667 -2.750000 -3.592857 -2.916667 -2.972222 -2.942857 -3.166667 #>  [127] -3.126984 -2.900000 -3.416667 -2.991270 -1.383333 -1.088889 -1.133333 #>  [134] -1.402778 -1.311111 -1.194444 -1.083333 -1.496032 -1.333333 -1.333333 #>  [141] -5.077778 -4.500000 -4.944444 -4.861111 -4.155556 -4.369048 -4.466667 #>  [148] -4.925000 -4.944444 -4.416667 -6.344444 -6.292857 -5.750000 -5.634921 #>  [155] -5.922222 -6.333333 -5.444444 -5.816667 -5.611111 -6.333333 -4.061111 #>  [162] -5.222222 -4.650000 -4.805556 -4.776984 -5.044444 -4.666667 -4.700397 #>  [169] -4.375000 -4.111111 -2.372222 -3.366667 -3.428571 -2.766667 -2.655556 #>  [176] -2.872222 -2.638889 -3.734127 -3.166667 -2.333333 -4.491667 -3.955556 #>  [183] -3.861111 -4.233333 -4.250000 -3.861111 -3.421429 -4.011111 -4.383333 #>  [190] -3.972222 -4.625000 -5.388889 -5.877778 -4.833333 -5.611111 -4.750000 #>  [197] -5.166667 -5.195238 -4.833333 -5.072222 -4.869048 -4.363492 -4.785714 #>  [204] -3.577778 -3.438889 -4.233333 -4.450000 -3.183333 -3.844444 -2.833333 #>  [211] -4.027778 -5.083333 -4.255556 -5.000000 -4.233333 -4.466667 -4.957143 #>  [218] -5.144444 -4.266667 -5.111111 -1.233333 -1.505556 -1.516667 -1.611111 #>  [225] -1.372222 -1.138889 -1.157143 -1.411111 -1.250000 -1.250000 -3.055556 #>  [232] -3.250000 -3.166667 -3.066667 -3.500000 -3.088889 -3.233333 -3.194444 #>  [239] -2.833333 -3.054762 -4.138889 -3.611111 -3.566667 -3.205556 -2.972222 #>  [246] -3.302778 -3.266667 -3.630159 -3.305556 -3.400000 -4.388889 -4.557143 #>  [253] -4.666667 -4.353175 -4.411111 -4.250000 -4.392063 -4.416667 -4.265079 #>  [260] -4.650000 -7.583333 -6.944444 -7.533333 -6.758333 -6.844444 -7.011111 #>  [267] -7.700000 -7.138889 -7.261111 -7.000000 -2.777778 -3.116667 -3.166667 #>  [274] -3.166667 -3.277778 -3.521825 -3.111111 -2.833333 -3.294444 -2.871429 #>  [281] -6.527778 -6.433333 -6.722222 -7.075000 -6.261905 -7.894444 -6.722222 #>  [288] -7.133333 -7.522222 -8.000000 -2.733333 -3.416667 -3.620635 -3.430556 #>  [295] -3.125000 -3.527778 -3.125000 -3.122222 -2.800000 -2.544444 -2.940476 #>  [302] -3.055556 -2.944444 -2.888889 -2.822222 -2.855556 -2.911111 -3.125000 #>  [309] -2.813889 -2.972222 -4.500000 -5.372222 -4.175000 -4.866667 -4.988889 #>  [316] -5.111111 -4.888889 -4.833333 -4.483333 -4.277778 -3.250000 -3.177778 #>  [323] -2.958333 -3.000000 -3.361111 -3.714286 -3.838889 -3.444444 -3.153968 #>  [330] -3.316667 -2.605556 -2.555556 -2.733333 -2.527778 -2.488889 -2.222222 #>  [337] -2.783333 -2.833333 -2.646429 -2.455556 -4.480556 -4.500000 -4.083333 #>  [344] -4.527778 -4.688889 -4.444444 -4.016667 -4.205556 -2.522222 -4.000000 #>  [351] -6.000000 -5.436111 -5.722222 -5.222222 -5.800000 -5.666667 -6.441667 #>  [358] -5.583333 -6.000000 -5.227778 -7.125000 -7.150000 -6.916667 -7.058333 #>  [365] -6.375000 -7.084127 -8.227778 -6.877778 -7.688889 -7.447222 -4.080952 #>  [372] -3.944444 -3.783333 -4.000000 -3.844444 -3.744444 -3.616667 -4.122222 #>  [379] -3.666667 -3.722222 -5.388889 -6.038095 -5.988889 -5.811111 -5.566667 #>  [386] -5.222222 -5.097222 -5.950000 -5.027778 -5.033333 -2.694444 -3.069444 #>  [393] -3.416667 -3.194444 -3.019048 -3.161111 -2.827778 -2.799206 -3.066667 #>  [400] -3.000000 -6.666667 -5.816667 -6.533333 -6.444444 -6.366667 -6.305556 #>  [407] -5.888889 -6.250000 -6.708333 -5.677778 -3.190476 -3.000000 -2.666667 #>  [414] -3.317460 -3.277778 -2.733333 -2.922222 -3.322222 -3.857143 -3.233333 #>  [421] -2.488889 -2.577778 -2.333333 -2.555556 -2.727778 -2.750794 -2.422222 #>  [428] -2.777778 -2.444444 -2.611111 -4.634921 -4.350000 -4.144444 -4.238889 #>  [435] -4.166667 -4.625000 -4.541667 -4.333333 -4.416667 -3.916667 -3.972222 #>  [442] -4.233333 -3.634921 -3.968254 -3.805556 -4.655556 -3.702381 -4.263889 #>  [449] -3.750000 -3.805556 -4.944444 -4.928571 -5.555556 -5.377778 -5.666667 #>  [456] -5.705556 -5.516667 -5.477778 -5.733333 -5.222222 -5.744444 -5.486111 #>  [463] -5.833333 -5.519841 -5.841667 -4.994444 -5.822222 -6.277778 -5.625000 #>  [470] -5.875000 -3.511905 -3.289683 -4.055556 -3.722222 -3.694444 -3.138889 #>  [477] -3.440476 -3.162698 -3.627778 -3.750000 -3.072222 -2.694444 -3.208333 #>  [484] -3.444444 -3.000000 -3.022222 -3.355556 -3.069444 -3.333333 -3.158333 #>  [491] -5.722222 -6.338889 -6.255556 -6.611111 -6.972222 -5.833333 -6.222222 #>  [498] -6.616667 -5.583333 -6.666667 -3.555556 -2.753968 -3.866667 -3.388889 #>  [505] -3.305556 -3.238889 -4.280952 -3.811111 -2.950000 -3.461111 -5.527778 #>  [512] -5.694444 -4.916667 -5.111111 -4.666667 -5.055556 -5.595238 -4.952381 #>  [519] -5.611111 -3.872222 -6.088889 -5.750000 -5.516667 -6.444444 -6.050000 #>  [526] -6.111111 -6.888889 -5.677778 -5.622222 -5.888889 -5.424603 -5.722222 #>  [533] -4.622222 -5.194444 -4.388889 -5.011111 -4.416667 -6.055556 -5.095238 #>  [540] -4.872222 -4.472222 -4.333333 -4.922222 -4.250000 -4.283333 -5.069444 #>  [547] -4.200000 -4.690476 -4.530952 -4.727778 -2.655556 -3.266667 -3.361111 #>  [554] -2.544444 -2.726190 -3.111111 -2.211111 -2.666667 -2.572222 -2.583333 #>  [561] -4.250000 -4.530159 -4.333333 -5.077778 -4.444444 -4.333333 -4.413889 #>  [568] -4.052778 -4.650000 -4.666667 -3.205556 -3.666667 -3.727778 -3.683333 #>  [575] -3.591667 -3.555556 -2.944444 -3.727778 -3.305556 -3.861111 -5.350000 #>  [582] -5.777778 -4.750000 -5.458333 -5.333333 -6.050000 -5.733333 -4.684127 #>  [589] -6.023810 -4.861111 -4.293651 -3.698413 -3.700000 -4.194444 -3.827778 #>  [596] -4.154762 -3.694444 -4.338889 -4.194444 -3.894444 -2.666667 -2.523810 #>  [603] -1.750000 -2.272222 -2.027778 -2.031746 -2.122222 -2.250000 -2.531746 #>  [610] -2.241667 -6.211111 -7.055556 -5.600000 -6.273810 -6.361111 -5.716667 #>  [617] -5.309524 -6.188889 -5.980159 -6.544444 -3.077778 -3.000000 -2.666667 #>  [624] -2.666667 -3.433333 -2.736111 -2.583333 -2.633333 -2.750000 -2.872222 #>  [631] -4.044444 -3.600000 -4.394444 -3.822222 -3.861111 -3.638889 -3.544444 #>  [638] -4.255556 -4.500000 -4.142857 -2.333333 -2.361111 -2.055556 -2.258333 #>  [645] -2.272222 -2.277778 -2.221429 -2.169444 -2.483333 -2.111111 -2.763889 #>  [652] -2.849206 -2.944444 -3.150000 -2.968254 -2.833333 -3.000000 -3.315079 #>  [659] -3.194444 -3.211111 -2.672222 -2.422222 -2.425000 -2.911111 -2.456349 #>  [666] -2.291667 -3.171429 -1.916667 -1.600000 -2.527778 -1.972222 -2.166667 #>  [673] -2.194444 -1.932540 -2.250000 -2.455556 -1.888889 -2.222222 -2.333333 #>  [680] -2.300000 -5.583333 -5.866667 -5.561111 -5.575000 -5.777778 -5.666667 #>  [687] -5.483333 -6.055556 -6.716667 -5.458333 -2.166667 -2.194444 -1.861111 #>  [694] -2.361111 -2.345238 -2.166667 -2.488889 -2.372222 -2.505556 -2.277778 #>  [701] -1.831746 -2.266667 -1.833333 -2.253968 -1.921429 -1.888889 -1.652778 #>  [708] -2.222222 -1.922222 -2.000000 -2.838889 -3.055556 -3.027778 -3.000000 #>  [715] -3.050000 -2.630556 -2.861111 -2.250000 -3.111111 -2.972222 -4.977778 #>  [722] -5.288889 -5.494444 -5.071429 -5.875000 -5.805556 -4.750000 -5.819444 #>  [729] -5.466667 -5.316667 -5.555556 -5.733333 -6.472222 -5.588889 -6.130159 #>  [736] -6.777778 -5.700000 -6.551587 -6.333333 -5.488889 -8.694444 -6.694444 #>  [743] -8.321429 -8.138889 -7.416667 -7.361111 -8.394444 -8.105556 -7.911111 #>  [750] -6.805556 -3.583333 -3.261111 -3.819444 -4.133333 -3.750000 -3.750000 #>  [757] -3.857143 -4.183333 -3.638889 -3.822222 -4.563889 -4.250000 -4.638889 #>  [764] -3.791667 -3.911111 -4.722222 -4.261905 -4.433333 -4.166667 -4.377778 #>  [771] -4.250000 -4.744444 -4.111111 -4.527778 -4.433333 -4.892857 -4.152778 #>  [778] -4.726190 -4.976190 -4.722222 -2.744048 -2.180556 -2.519841 -2.507937 #>  [785] -3.061111 -2.947222 -2.966667 -2.477778 -2.711111 -2.634921 -3.083333 #>  [792] -2.333333 -2.444444 -2.622222 -2.468254 -2.905556 -3.000000 -2.627778 #>  [799] -2.972222 -3.305556 -4.533333 -4.611111 -4.650000 -3.977778 -4.547619 #>  [806] -4.363492 -4.472222 -4.372222 -4.333333 -4.787698 -4.347222 -4.310714 #>  [813] -4.366667 -4.455556 -4.605556 -4.539683 -4.866667 -4.988095 -3.829365 #>  [820] -4.300000 -3.591270 -3.055556 -3.214286 -3.433333 -3.380952 -2.583333 #>  [827] -2.877778 -4.579365 -3.817460 -3.777778 -3.730556 -3.361111 -3.777778 #>  [834] -4.357143 -4.000000 -3.672222 -3.833333 -3.333333 -4.309524 -2.433333 #>  [841] -3.238889 -2.963889 -2.600000 -3.283333 -3.200000 -3.477778 -3.280159 #>  [848] -3.275000 -3.461111 -3.478968 -5.644444 -5.594444 -5.250000 -5.238889 #>  [855] -5.611111 -4.483333 -5.277778 -6.327778 -5.722222 -5.055556 -5.694444 #>  [862] -5.950000 -5.777778 -5.955556 -5.800000 -5.666667 -5.666667 -5.316667 #>  [869] -5.777778 -5.922222 -4.833333 -5.166667 -3.888889 -4.438889 -4.500000 #>  [876] -4.166667 -4.666667 -4.583333 -4.133333 -4.500000 -4.611111 -4.722222 #>  [883] -4.694444 -5.716667 -4.450000 -4.822222 -4.316667 -5.377778 -5.033333 #>  [890] -5.777778 -4.555556 -4.750000 -3.975000 -4.611111 -4.294444 -4.833333 #>  [897] -4.411111 -4.166667 -4.666667 -4.466667 -4.711111 -5.013889 -5.223810 #>  [904] -5.976984 -5.766667 -5.230952 -5.142857 -5.166667 -5.750000 -4.976190 #>  [911] -3.497222 -3.666667 -3.838095 -3.880952 -3.277778 -3.255556 -3.416667 #>  [918] -3.788889 -3.402778 -3.750000 -3.966667 -2.805556 -3.544444 -4.490476 #>  [925] -2.900000 -3.638889 -3.905556 -3.805556 -3.600000 -3.561111 -4.216667 #>  [932] -3.986111 -4.494444 -4.416667 -4.472222 -4.333333 -4.650000 -4.466667 #>  [939] -4.833333 -4.277778 -2.877778 -3.650000 -2.955556 -3.644444 -2.722222 #>  [946] -2.777778 -3.177778 -2.755556 -2.750000 -2.944444 -3.680556 -3.528571 #>  [953] -3.455556 -3.091667 -3.316667 -3.478175 -3.230159 -3.777778 -3.233333 #>  [960] -3.483333 -4.361111 -5.894444 -5.638889 -4.777778 -5.266667 -4.588889 #>  [967] -5.083333 -6.166667 -5.333333 -4.500000 -5.105556 -6.105556 -5.679365 #>  [974] -5.255556 -5.394444 -6.333333 -4.650000 -5.638889 -5.511111 -5.388889 #>  [981] -3.944444 -2.902778 -3.755556 -3.933333 -3.983333 -4.050000 -4.111111 #>  [988] -3.777778 -3.665873 -3.791667 -2.855556 -2.558333 -3.027778 -3.000000 #>  [995] -3.583333 -3.111111 -3.211111 -3.055556 -2.927778 -3.550000 -4.530556 #> [1002] -3.885714 -4.578571 -4.408333 -4.600000 -4.505556 -4.533333 -5.111111 #> [1009] -4.416667 -4.876984 -2.611111 -2.022222 -2.166667 -2.344444 -2.522222 #> [1016] -2.380952 -2.227778 -2.766667 -2.723016 -2.861111 -4.174603 -3.122222 #> [1023] -3.711111 -3.680556 -3.794444 -3.847222 -3.375000 -3.961111 -3.111111 #> [1030] -3.625000 -6.388889 -5.877778 -6.416667 -6.555556 -6.165476 -6.611111 #> [1037] -5.900000 -5.805556 -5.805556 -6.726984 -3.755159 -3.500000 -3.888889 #> [1044] -3.992063 -3.857143 -3.605556 -3.377778 -4.000000 -3.966667 -3.316667 #> [1051] -4.752381 -4.527778 -4.986111 -4.161111 -4.222222 -4.341667 -4.936508 #> [1058] -4.733333 -4.583333 -4.750000 -2.555556 -2.166667 -2.605556 -2.916667 #> [1065] -3.444444 -2.377778 -2.499206 -1.966667 -2.166667 -2.395238 -3.500000 #> [1072] -3.716667 -3.722222 -3.134921 -3.405556 -3.277778 -3.277778 -3.716667 #> [1079] -3.402381 -3.458333 -3.177778 -2.933333 -3.722222 -3.072222 -3.388889 #> [1086] -3.538889 -3.250000 -3.338889 -3.166667 -3.555556 -4.833333 -5.105556 #> [1093] -4.666667 -4.305556 -4.694444 -4.444444 -4.600000 -4.472222 -5.066667 #> [1100] -4.236111 -3.838889 -4.166667 -4.033333 -3.866667 -3.983333 -3.111111 #> [1107] -4.472222 -4.222222 -4.416667 -4.797619 -3.033333 -3.555556 -3.375000 #> [1114] -3.166667 -3.433333 -3.458333 -3.361111 -3.227778 -3.638889 -3.555556 #> [1121] -3.996032 -4.533333 -4.190476 -4.066667 -3.279365 -4.694444 -4.000000 #> [1128] -3.944444 -3.983333 -4.211111 -3.822222 -3.498413 -4.069444 -3.883333 #> [1135] -3.666667 -4.116667 -3.336111 -3.977778 -3.733333 -3.666667 -2.927778 #> [1142] -2.877778 -2.894444 -3.088889 -2.944444 -3.227778 -3.083333 -2.333333 #> [1149] -3.388889 -3.000000 -3.855556 -3.722222 -4.077778 -3.805556 -3.666667 #> [1156] -3.911111 -4.311111 -4.344444 -4.000000 -4.200000 -1.833333 -1.750000 #> [1163] -2.019841 -1.866667 -1.883333 -1.972222 -1.611111 -1.822222 -1.976190 #> [1170] -1.690476 -3.888889 -4.277778 -3.833333 -4.250000 -3.722222 -4.222222 #> [1177] -3.638889 -3.488095 -3.991667 -3.866667 -4.750000 -5.055556 -4.916667 #> [1184] -5.183333 -4.905556 -4.916667 -4.377778 -4.138889 -5.377778 -4.861111 #> [1191] -2.555556 -2.420635 -2.500000 -2.488889 -2.666667 -3.205556 -2.584127 #> [1198] -2.866667 -2.726190 -2.422222 -4.861111 -5.718254 -4.927778 -5.916667 #> [1205] -4.605556 -5.305556 -6.700000 -4.694444 -5.571429 -6.000000 -3.788889 #> [1212] -4.372222 -4.055556 -4.027778 -4.022222 -3.566667 -4.416667 -4.216667 #> [1219] -4.088889 -4.222222 -3.777778 -4.083333 -4.361111 -4.294444 -3.088889 #> [1226] -3.388889 -3.750000 -4.000000 -3.788889 -3.750000 -3.772222 -3.377778 #> [1233] -3.333333 -3.527778 -2.733333 -3.600000 -3.088889 -3.263889 -2.777778 #> [1240] -3.027778 -3.166667 -2.711111 -3.086111 -3.016667 -2.866667 -2.788889 #> [1247] -2.972222 -2.777778 -2.716667 -3.000000 -3.800000 -3.833333 -3.753175 #> [1254] -3.777778 -3.361111 -4.166667 -3.377778 -3.827778 -3.888889 -3.655556 #> [1261] -5.811111 -6.233333 -5.305556 -5.628571 -5.277778 -5.000000 -5.277778 #> [1268] -5.875000 -5.857143 -5.250000 -2.041667 -2.794444 -3.144444 -2.527778 #> [1275] -2.894444 -3.011111 -2.527778 -2.166667 -1.555556 -2.602778 -4.841270 #> [1282] -4.694444 -4.416667 -4.333333 -4.769841 -4.666667 -4.388889 -4.366667 #> [1289] -3.344444 -4.111111 -1.555556 -1.561905 -1.711111 -1.750000 -1.543651 #> [1296] -1.888889 -1.825000 -1.755556 -1.633333 -1.333333 -4.436111 -4.666667 #> [1303] -4.133333 -4.333333 -5.133333 -4.430556 -4.569444 -3.716667 -5.103175 #> [1310] -4.094444 -2.983333 -2.622222 -2.822222 -3.472222 -3.050000 -3.011111 #> [1317] -2.916667 -3.000000 -3.250000 -3.000000 -2.755556 -3.277778 -2.666667 #> [1324] -3.376190 -3.206349 -2.633333 -2.833333 -2.873016 -3.144444 -3.000000 #> [1331] -4.755556 -5.233333 -4.833333 -4.723810 -4.466667 -4.444444 -4.883333 #> [1338] -4.700000 -4.333333 -4.777778 -4.288095 -4.222222 -4.255952 -3.889286 #> [1345] -3.750000 -4.877778 -4.027778 -3.972222 -4.083333 -3.905556 -3.033333 #> [1352] -3.436508 -3.138889 -3.583333 -3.444444 -3.866667 -3.500000 -3.577778 #> [1359] -3.355556 -3.300000 -2.788889 -3.052381 -2.988889 -2.944444 -2.911111 #> [1366] -3.055556 -3.022222 -3.472222 -3.227778 -3.400000 -2.045238 -2.555556 #> [1373] -2.055556 -2.088889 -2.361111 -2.366667 -2.100000 -2.388889 -2.513889 #> [1380] -2.538889 -2.333333 -3.638889 -2.915873 -3.250000 -3.888889 -4.061111 #> [1387] -3.533333 -3.861111 -3.011905 -3.458333 -6.458333 -6.111111 -5.555556 #> [1394] -6.530556 -6.122619 -5.880952 -6.154762 -5.375000 -6.146825 -5.341270 #> [1401] -4.741667 -5.138889 -4.541667 -4.513889 -5.263889 -4.738095 -5.500000 #> [1408] -4.633333 -5.263889 -4.527778 -4.500000 -4.566667 -4.444444 -4.158730 #> [1415] -4.222222 -4.555556 -4.433333 -4.644444 -4.416667 -4.208333 -7.583333 #> [1422] -7.444444 -7.000000 -7.525397 -7.500000 -6.963492 -6.666667 -7.678571 #> [1429] -7.583333 -7.763492 -2.776984 -2.733333 -2.669841 -2.394444 -2.680556 #> [1436] -2.772222 -3.038889 -2.916667 -2.940476 -2.861111 -5.096825 -5.033333 #> [1443] -4.500000 -4.539683 -4.480159 -4.261111 -4.527778 -4.444444 -4.547619 #> [1450] -4.722222 -4.566667 -4.572222 -4.250000 -4.716667 -5.305556 -4.283333 #> [1457] -4.861111 -3.994444 -5.383333 -4.305556 -5.458333 -5.944444 -4.833333 #> [1464] -5.305556 -5.666667 -4.694444 -6.108333 -4.905556 -5.277778 -5.597222 #> [1471] -3.855556 -3.777778 -4.144444 -3.527778 -3.488889 -4.000000 -3.722222 #> [1478] -3.577778 -3.866667 -3.000000 -6.964286 -7.180556 -6.750000 -6.511905 #> [1485] -7.391667 -6.166667 -6.527778 -7.016667 -6.908730 -6.666667 -4.250000 #> [1492] -3.865079 -3.983333 -3.905556 -3.550000 -4.277778 -4.218254 -4.388889 #> [1499] -4.722222 -4.300000 -6.666667 -5.666667 -6.783333 -5.833333 -5.777778 #> [1506] -6.309524 -6.105556 -6.067460 -4.794444 -7.083333 -4.622222 -5.644444 #> [1513] -4.936508 -4.555556 -4.688889 -4.583333 -4.488889 -4.961111 -4.950000 #> [1520] -3.416667 -6.672222 -6.944444 -6.941667 -6.496032 -6.398413 -6.611111 #> [1527] -7.277778 -6.888889 -6.777778 -6.666667 -2.984127 -3.672222 -3.201190 #> [1534] -3.408333 -2.744444 -3.455556 -3.063492 -3.155556 -3.063492 -2.722222 #> [1541] -3.388889 -2.583333 -2.333333 -3.000000 -3.472222 -2.444444 -2.611111 #> [1548] -3.166667 -3.000000 -2.416667 -3.738095 -2.933333 -4.322222 -3.722222 #> [1555] -3.750000 -3.411111 -2.916667 -3.450000 -3.027778 -3.388889 -8.280556 #> [1562] -8.511111 -7.822222 -8.794444 -8.444444 -8.794444 -8.422222 -8.194444 #> [1569] -9.233333 -8.294444 -3.952381 -4.688889 -3.630952 -5.055556 -4.761111 #> [1576] -4.666667 -4.855556 -4.438889 -4.800000 -4.744444 -1.847222 -1.500000 #> [1583] -2.111111 -1.858730 -1.755556 -1.833333 -1.950000 -2.166667 -2.100000 #> [1590] -1.825000 -5.083333 -4.583333 -4.027778 -5.157143 -5.388889 -4.966667 #> [1597] -5.000000 -4.359524 -4.791667 -4.472222 -4.950000 -4.800000 -4.603175 #> [1604] -5.495238 -3.944444 -5.527778 -4.900000 -4.900000 -5.361111 -4.709524 #> [1611] -6.333333 -6.472222 -6.769841 -5.857143 -6.099206 -5.861111 -5.706349 #> [1618] -6.177778 -6.205556 -6.144444 -4.111111 -4.072222 -3.583333 -3.688889 #> [1625] -4.666667 -3.944444 -4.083333 -3.861111 -3.722222 -3.555556 -5.527778 #> [1632] -6.083333 -5.500000 -5.838889 -6.222222 -5.972222 -6.377778 -5.533333 #> [1639] -7.072222 -5.766667 -5.102778 -4.716667 -4.686508 -4.793651 -4.263889 #> [1646] -4.611111 -4.858333 -4.905556 -4.327778 -5.150000 -4.844444 -4.375000 #> [1653] -4.738889 -5.461111 -4.244444 -5.363492 -5.027778 -4.583333 -4.333333 #> [1660] -5.538095 -3.772222 -2.500000 -4.022222 -3.833333 -4.066667 -4.291667 #> [1667] -3.746032 -4.138889 -3.761905 -3.944444 -2.916667 -2.638889 -3.000000 #> [1674] -2.444444 -2.872222 -2.988889 -2.638889 -2.500000 -3.027778 -3.033333 #> [1681] -7.672222 -7.333333 -7.972222 -7.293651 -7.238095 -7.674603 -7.666667 #> [1688] -7.430556 -7.122222 -7.677778 -4.726190 -4.809524 -4.692857 -3.988095 #> [1695] -4.694444 -5.044444 -4.000000 -4.861905 -4.861111 -4.833333 -4.094444 #> [1702] -3.833333 -4.777778 -4.192063 -3.966667 -4.494444 -4.094444 -4.288889 #> [1709] -4.269841 -3.650000 -3.916667 -3.861111 -3.833333 -3.872222 -3.666667 #> [1716] -4.052778 -4.000000 -3.766667 -4.166667 -4.341270 -5.688095 -5.433333 #> [1723] -5.678571 -4.888889 -5.101190 -5.005556 -5.809524 -4.430556 -5.666667 #> [1730] -4.750000 -4.484127 -4.777778 -4.932540 -4.388889 -4.567460 -5.023810 #> [1737] -4.277778 -4.902778 -5.544444 -4.519048 -3.200000 -2.666667 -3.322222 #> [1744] -2.855556 -2.763889 -3.000000 -2.861905 -2.305556 -2.833333 -2.166667 #> [1751] -3.783333 -3.500000 -4.083333 -3.694444 -3.666667 -3.444444 -3.820635 #> [1758] -3.591667 -4.430556 -3.583333 -2.788889 -4.333333 -3.486111 -3.397222 #> [1765] -2.583333 -3.406349 -4.055556 -3.333333 -3.605556 -3.550000 -5.571429 #> [1772] -5.544444 -5.779365 -5.305556 -5.559524 -5.333333 -5.600000 -5.900794 #> [1779] -5.710317 -5.880952 -3.876190 -3.666667 -3.930556 -4.172222 -4.376984 #> [1786] -4.447619 -4.166667 -4.196825 -3.972222 -3.511111 -4.000000 -5.416667 #> [1793] -4.494444 -4.438889 -4.388889 -4.444444 -4.376190 -4.750000 -4.633333 #> [1800] -4.777778 -5.728571 -5.288889 -5.309524 -5.345238 -5.722222 -5.250000 #> [1807] -5.816667 -5.546032 -5.583333 -6.111111 -3.833333 -4.329365 -4.111111 #> [1814] -3.694444 -4.666667 -4.321429 -3.916667 -4.405556 -4.642857 -4.083333 #> [1821] -2.166667 -2.174603 -1.833333 -2.222222 -2.000000 -1.977778 -2.150000 #> [1828] -2.250000 -2.055556 -2.138889 -3.988889 -4.125000 -4.588889 -5.166667 #> [1835] -4.888889 -5.044444 -4.609127 -4.069444 -4.666667 -4.127778 -5.002778 #> [1842] -5.194444 -5.000000 -4.194444 -4.566667 -4.579365 -4.722222 -5.166667 #> [1849] -5.261111 -5.388889 -6.904762 -7.313492 -7.757937 -7.100000 -6.670635 #> [1856] -7.055556 -6.175000 -7.869048 -7.634921 -6.277778 -5.305556 -6.611111 #> [1863] -5.763889 -5.500000 -5.000000 -5.583333 -6.333333 -5.444444 -5.166667 #> [1870] -5.777778 -4.061111 -3.861111 -3.766667 -3.682540 -3.547619 -4.375000 #> [1877] -4.305556 -3.694444 -4.138889 -3.805556 -3.166667 -3.638889 -3.333333 #> [1884] -3.416667 -3.372222 -3.212698 -3.700000 -3.400000 -3.061111 -3.305556 #> [1891] -4.480952 -4.750000 -4.519444 -4.777778 -4.666667 -5.166667 -4.805556 #> [1898] -4.930159 -5.166667 -4.916667 -6.725397 -6.166667 -6.861111 -5.833333 #> [1905] -6.027778 -6.777778 -6.380952 -7.158730 -7.250000 -6.583333 -4.097222 #> [1912] -3.244048 -3.544444 -4.083333 -3.620635 -3.333333 -3.355556 -3.500000 #> [1919] -3.155556 -4.305556 -1.563492 -1.600000 -1.722222 -1.533333 -1.239683 #> [1926] -1.795238 -1.600000 -1.444444 -1.533333 -1.544444 -4.677778 -5.083333 #> [1933] -3.958333 -4.666667 -4.500000 -4.555556 -4.144444 -4.516667 -4.338889 #> [1940] -4.402778 -5.011111 -5.305556 -4.876984 -5.477778 -4.944444 -5.111111 #> [1947] -5.666667 -4.698413 -4.924603 -5.654762 -3.333333 -3.111111 -2.622222 #> [1954] -3.527778 -2.777778 -3.133333 -2.876190 -2.837302 -3.216667 -2.861111 #> [1961] -5.349206 -4.916667 -5.847222 -5.597222 -5.533333 -4.679365 -5.738889 #> [1968] -5.416667 -4.452381 -5.500000 -3.433333 -3.488095 -3.233333 -3.555556 #> [1975] -3.555556 -3.477778 -3.297222 -3.641667 -3.523810 -3.900000 -3.172222 #> [1982] -3.458333 -3.402778 -3.155556 -3.266667 -2.863492 -3.261905 -3.252381 #> [1989] -3.166667 -2.541667 -4.016667 -4.561111 -4.166667 -4.930556 -3.741667 #> [1996] -3.916667 -3.666667 -4.444444 -4.155556 -4.444444 rowMeans(thylacine_example_matrices_rerun$ibra_extirpation) #>    [1] 1926.333 1929.444 1929.667 1933.667 1926.889 1928.333 1926.222 1929.333 #>    [9] 1927.222 1929.556 1943.889 1947.778 1941.333 1940.000 1935.889 1949.222 #>   [17] 1945.000 1940.889 1934.000 1935.667 1934.556 1936.889 1937.444 1933.889 #>   [25] 1933.000 1934.556 1934.778 1937.889 1936.333 1935.000 1938.444 1936.444 #>   [33] 1939.222 1933.667 1937.778 1934.000 1939.000 1931.000 1936.444 1940.333 #>   [41] 1932.444 1931.444 1934.000 1933.444 1934.444 1930.778 1932.000 1935.444 #>   [49] 1934.667 1936.333 1931.667 1936.778 1929.333 1930.667 1933.333 1931.000 #>   [57] 1927.556 1930.111 1931.000 1933.889 1926.222 1923.111 1921.889 1923.667 #>   [65] 1922.000 1929.556 1926.222 1924.333 1925.333 1921.444 1941.000 1936.889 #>   [73] 1935.000 1933.889 1933.778 1937.000 1938.333 1935.111 1938.222 1940.889 #>   [81] 1929.667 1934.444 1932.333 1933.111 1938.889 1931.333 1933.222 1932.333 #>   [89] 1933.667 1934.222 1934.333 1933.556 1932.222 1931.778 1934.667 1936.667 #>   [97] 1932.889 1933.778 1933.556 1935.889 1929.556 1935.222 1934.444 1930.000 #>  [105] 1928.667 1932.444 1931.667 1933.000 1931.667 1932.333 1928.667 1927.778 #>  [113] 1932.889 1923.667 1926.889 1925.667 1925.111 1930.889 1925.444 1926.111 #>  [121] 1936.222 1936.778 1931.111 1935.667 1939.667 1936.222 1939.222 1938.222 #>  [129] 1936.333 1932.000 1933.333 1936.222 1932.333 1939.778 1935.000 1932.444 #>  [137] 1930.889 1933.000 1933.222 1931.222 1927.778 1930.222 1925.556 1923.000 #>  [145] 1930.000 1928.444 1929.111 1923.333 1925.444 1925.222 1931.333 1926.778 #>  [153] 1937.222 1927.667 1931.556 1929.444 1935.889 1931.222 1932.556 1929.667 #>  [161] 1938.333 1935.778 1941.222 1938.889 1938.889 1938.222 1940.889 1940.222 #>  [169] 1931.000 1939.889 1929.667 1928.222 1928.778 1930.333 1930.778 1929.667 #>  [177] 1933.222 1929.444 1921.444 1928.889 1932.889 1937.778 1938.111 1938.111 #>  [185] 1940.444 1938.667 1934.000 1932.667 1936.000 1934.889 1940.889 1942.111 #>  [193] 1940.111 1941.889 1941.000 1937.778 1941.444 1947.556 1941.444 1939.556 #>  [201] 1928.000 1925.222 1932.333 1929.556 1932.889 1929.556 1928.778 1932.222 #>  [209] 1934.333 1932.444 1937.333 1932.778 1941.556 1931.333 1933.556 1928.444 #>  [217] 1934.333 1929.333 1934.000 1931.333 1941.444 1937.556 1937.556 1938.000 #>  [225] 1937.778 1937.667 1938.889 1937.556 1936.444 1937.333 1930.222 1933.111 #>  [233] 1931.444 1925.889 1929.444 1929.556 1931.556 1928.000 1928.778 1927.000 #>  [241] 1940.444 1935.444 1935.000 1938.778 1936.222 1939.222 1941.111 1937.222 #>  [249] 1936.000 1938.667 1931.444 1934.000 1932.222 1933.889 1933.333 1935.667 #>  [257] 1934.111 1932.667 1932.889 1931.667 1925.667 1923.444 1919.333 1923.333 #>  [265] 1927.556 1927.333 1923.111 1924.000 1923.111 1920.667 1930.444 1930.111 #>  [273] 1933.333 1927.444 1931.556 1929.222 1930.222 1934.333 1931.333 1928.444 #>  [281] 1942.222 1944.889 1955.778       NA 1936.444 1924.556 1956.333 1953.444 #>  [289] 1922.222 1956.444 1934.667 1932.111 1931.111 1931.556 1936.111 1933.444 #>  [297] 1932.889 1935.333 1934.111 1934.111 1931.556 1929.000 1931.333 1931.333 #>  [305] 1930.889 1933.889 1931.111 1928.889 1933.444 1930.889 1933.667 1934.444 #>  [313] 1935.111 1939.000 1937.889 1933.778 1933.111 1931.444 1938.111 1932.444 #>  [321] 1936.444 1934.444 1933.556 1931.889 1934.778 1929.889 1932.111 1936.222 #>  [329] 1930.556 1936.222 1931.444 1932.889 1931.333 1933.444 1930.444 1932.000 #>  [337] 1934.222 1933.889 1932.444 1931.889 1931.667 1934.333 1937.111 1936.000 #>  [345] 1938.000 1937.111 1932.222 1932.889 1939.556 1940.444 1935.333 1935.222 #>  [353] 1932.667 1934.333 1932.222 1930.000 1932.333 1934.889 1933.667 1932.222 #>  [361] 1942.444 1938.889 1942.000 1939.667 1958.889 1939.889 1943.111 1951.889 #>  [369] 1942.222 1937.222 1936.667 1933.444 1932.889 1931.000 1938.333 1928.222 #>  [377] 1935.333 1932.556 1935.556 1933.556 1930.556 1924.000 1929.778 1929.889 #>  [385] 1935.444 1927.333 1930.889 1928.667 1926.556 1928.889 1930.111 1930.667 #>  [393] 1932.889 1932.000 1938.333 1935.444 1934.556 1933.778 1928.222 1933.444 #>  [401] 1928.111 1931.778 1934.556 1939.444 1933.222 1933.222 1935.222 1937.333 #>  [409] 1930.333 1932.000 1931.444 1928.778 1931.000 1932.111 1932.889 1927.000 #>  [417] 1930.333 1927.222 1926.111 1925.667 1935.000 1933.556 1934.556 1933.444 #>  [425] 1934.556 1935.667 1935.111 1936.556 1936.111 1932.556 1931.556 1927.778 #>  [433] 1928.444 1931.667 1926.444 1930.778 1927.889 1932.889 1925.222 1929.444 #>  [441] 1937.111 1924.444 1928.778 1934.333 1931.556 1932.889 1936.222 1934.000 #>  [449] 1932.556 1934.778 1951.111 1941.000 1947.667 1948.333 1952.000 1947.333 #>  [457] 1941.889 1946.556 1940.222 1943.000 1950.444       NA 1951.667 1929.444 #>  [465] 1932.333       NA 1938.333 1929.778 1928.333       NA 1933.889 1940.000 #>  [473] 1932.778 1939.000 1927.889 1937.889 1933.222 1939.111 1933.778 1933.778 #>  [481] 1935.556 1931.889 1936.444 1933.889 1935.667 1931.778 1937.111 1931.222 #>  [489] 1934.889 1935.444 1930.222 1927.000 1928.444 1920.667 1926.000 1936.778 #>  [497] 1929.444 1923.111 1926.667 1926.111 1932.111 1935.667 1930.111 1932.667 #>  [505] 1932.444 1930.444 1934.333 1927.222 1936.667 1932.000 1954.778 1940.000 #>  [513] 1951.222 1949.667 1949.222 1952.333 1945.556 1945.667 1951.000 1943.778 #>  [521] 1931.000 1930.778 1930.333 1931.444 1929.111 1929.111 1927.111 1934.333 #>  [529] 1928.444 1928.444 1942.222 1935.333 1936.667 1949.111 1936.222 1949.333 #>  [537] 1939.667 1935.333 1942.333 1942.111 1925.222 1932.444 1926.111 1930.333 #>  [545] 1930.444 1921.889 1923.444 1926.778 1929.667 1925.111 1929.000 1924.667 #>  [553] 1930.333 1931.889 1931.778 1929.444 1932.889 1927.667 1934.444 1925.667 #>  [561] 1934.556 1934.000 1934.222 1931.778 1935.333 1932.000 1935.667 1934.444 #>  [569] 1936.778 1932.111 1921.444 1919.222 1920.444 1925.444 1919.556 1921.444 #>  [577] 1923.778 1926.000 1922.556 1921.889 1940.333 1953.667 1939.889 1947.000 #>  [585] 1941.556 1947.889 1947.222 1944.000 1948.111 1945.000 1933.222 1931.667 #>  [593] 1936.111 1930.556 1934.556 1930.778 1936.111 1933.000 1940.667 1935.667 #>  [601] 1936.111 1946.333 1939.667 1944.333 1946.556 1937.778 1939.444 1944.000 #>  [609] 1940.778 1944.889 1929.889 1925.333 1934.667 1930.000 1933.222 1925.222 #>  [617] 1935.444 1933.111 1932.556 1929.222 1943.111 1942.889 1946.778 1948.000 #>  [625] 1940.000 1933.000 1941.556 1942.111 1937.667 1941.222 1932.444 1934.000 #>  [633] 1928.778 1937.222 1925.667 1934.333 1929.222 1934.889 1933.889 1937.444 #>  [641] 1940.222 1938.000 1936.111 1934.778 1940.000 1939.333 1938.000 1938.667 #>  [649] 1939.556 1943.222 1926.333 1931.000 1928.778 1932.111 1928.111 1932.333 #>  [657] 1928.333 1931.778 1931.000 1932.444 1929.556 1930.000 1935.556 1931.444 #>  [665] 1931.222 1931.556 1928.222 1931.222 1932.333 1935.333 1933.778 1931.889 #>  [673] 1934.222 1933.111 1933.778 1933.889 1931.778 1935.889 1933.111 1932.333 #>  [681] 1935.444 1936.556 1942.889 1938.222 1937.333 1944.444 1938.111 1940.778 #>  [689] 1934.889 1942.111 1942.667 1944.000 1952.111 1943.556 1942.667 1943.333 #>  [697] 1943.556 1944.778 1943.778 1945.667 1936.444 1936.333 1939.333 1936.111 #>  [705] 1937.000 1943.222 1935.000 1932.778 1938.889 1941.556 1942.000 1934.778 #>  [713] 1934.778 1937.889 1935.000 1935.000 1931.444 1938.556 1932.222 1937.333 #>  [721] 1939.333 1935.889 1938.333 1942.111 1931.333 1933.556 1938.111 1934.444 #>  [729] 1930.556 1934.889 1933.222 1935.889 1941.333 1932.889 1927.556 1927.000 #>  [737] 1936.778 1932.889 1929.333 1930.778 1932.333 1932.000 1928.444 1936.444 #>  [745] 1931.667 1932.667 1931.444 1933.889 1934.222 1933.667 1933.333 1942.444 #>  [753] 1933.667 1937.778 1934.556 1941.556 1940.556 1933.889 1932.222 1931.778 #>  [761] 1935.333 1936.778 1934.667 1938.111 1937.556 1935.222 1936.889 1933.556 #>  [769] 1937.556 1935.333 1940.889 1936.000 1940.000 1935.333 1941.444 1935.222 #>  [777] 1933.667 1932.889 1937.667 1936.222 1931.111 1931.111 1935.889 1932.556 #>  [785] 1931.778 1932.333 1933.111 1934.111 1930.111 1929.111 1930.778 1934.000 #>  [793] 1937.111 1933.444 1936.333 1932.333 1931.444 1933.556 1935.111 1929.556 #>  [801] 1928.778 1928.778 1931.667 1931.000 1926.889 1927.111 1926.556 1927.111 #>  [809] 1927.444 1930.222 1928.556 1927.222 1930.000 1931.556 1928.111 1933.667 #>  [817] 1927.000 1926.222 1931.333 1929.778 1933.556 1937.222 1937.889 1942.444 #>  [825] 1938.556 1943.111 1933.667 1930.889 1937.778 1938.889 1931.778 1925.889 #>  [833] 1927.444 1925.222 1927.556 1931.667 1928.000 1924.889 1930.889 1933.889 #>  [841] 1929.444 1935.000 1934.556 1935.556 1934.556 1931.556 1937.222 1934.778 #>  [849] 1934.444 1934.667 1947.222 1942.444 1941.111 1936.556 1937.333 1943.444 #>  [857] 1938.556 1939.000 1939.889 1943.667 1930.333 1927.000 1924.889 1927.222 #>  [865] 1923.333 1928.000 1927.778 1928.000 1927.222 1928.333 1924.667 1934.111 #>  [873] 1936.000 1932.667 1927.889 1930.111 1929.000 1932.222 1940.111 1933.667 #>  [881] 1932.556 1942.556 1939.556 1937.778 1939.000 1938.111 1938.111 1933.222 #>  [889] 1939.889 1933.667 1947.889 1937.111 1944.667 1946.222 1935.556 1943.667 #>  [897] 1946.333 1937.889 1934.556 1953.111 1935.778 1937.667 1939.778 1935.667 #>  [905] 1934.333 1935.000 1937.333 1933.778 1937.778 1937.778 1931.444 1936.667 #>  [913] 1926.667 1927.778 1929.778 1931.222 1927.778 1928.556 1936.444 1934.444 #>  [921] 1926.889 1928.444 1934.444 1927.889 1926.111 1925.111 1932.889 1925.778 #>  [929] 1929.667 1930.000 1931.667 1934.222 1933.000 1933.556 1930.222 1931.889 #>  [937] 1929.667 1934.889 1932.556 1928.889 1949.556 1941.333 1948.111 1948.556 #>  [945] 1951.667 1943.000 1939.444 1936.667 1944.333 1942.778 1935.556 1937.111 #>  [953] 1936.667 1934.556 1931.222 1937.889 1933.889 1937.778 1937.778 1933.556 #>  [961] 1919.222 1935.000 1921.444 1930.667 1922.333 1948.222 1932.667 1933.667 #>  [969] 1942.889 1920.222 1936.000 1927.889 1932.000 1930.111 1934.444 1930.444 #>  [977] 1929.778 1930.222 1933.444 1933.889 1930.333 1926.556 1928.333 1927.889 #>  [985] 1929.556 1928.000 1927.000 1926.444 1927.111 1928.333 1941.444 1946.111 #>  [993] 1944.778 1940.333 1945.889 1937.667 1943.778 1940.222 1936.889 1942.333 #> [1001] 1936.889 1938.889 1935.111 1932.333 1935.889 1935.556 1932.889 1932.111 #> [1009] 1936.222 1934.111 1940.000 1940.222 1944.556 1939.667 1945.667 1941.444 #> [1017] 1947.556 1946.444 1944.889 1942.222 1943.000 1945.444 1943.889 1949.000 #> [1025] 1942.000 1940.000 1941.889 1939.222 1943.444 1945.444 1928.444 1928.222 #> [1033] 1934.333 1939.111 1935.444 1934.667 1936.000 1936.333 1937.444 1935.111 #> [1041] 1937.333 1936.222 1936.333 1938.444 1936.222 1938.000 1939.222 1938.000 #> [1049] 1933.000 1935.444 1938.000 1930.333 1933.444 1932.222 1932.889 1929.778 #> [1057] 1932.333 1930.444 1935.333 1929.778 1940.889 1940.222 1938.222 1940.556 #> [1065] 1938.333 1942.333 1940.556 1941.222 1945.889 1940.444 1946.222 1937.333 #> [1073] 1937.889 1941.444 1942.889 1936.333 1943.111 1941.000 1930.333 1942.444 #> [1081] 1930.556 1934.667 1930.111 1933.667 1932.444 1929.222 1933.778 1935.333 #> [1089] 1932.222 1931.889 1942.778 1947.444 1941.889 1942.667 1943.111 1952.556 #> [1097] 1940.556 1950.444 1941.778 1948.889 1924.333 1922.444 1921.222 1920.889 #> [1105] 1923.889 1920.556 1922.333 1926.667 1918.222 1921.333 1929.667 1930.778 #> [1113] 1934.556 1934.000 1935.778 1936.111 1934.000 1932.667 1932.222 1936.667 #> [1121] 1932.778 1925.000 1927.222 1930.111 1926.889 1927.000 1927.333 1930.556 #> [1129] 1929.222 1927.556 1928.333 1930.333 1929.889 1929.444 1933.889 1928.778 #> [1137] 1930.444 1929.889 1928.333 1926.333 1934.111 1940.556 1938.111 1936.778 #> [1145] 1938.778 1937.111 1938.778 1933.444 1935.222 1944.111 1928.667 1929.889 #> [1153] 1932.778 1928.667 1928.667 1930.222 1928.444 1930.889 1932.222 1930.111 #> [1161] 1938.778 1938.889 1938.444 1937.556 1934.778 1935.778 1940.889 1941.111 #> [1169] 1936.778 1933.778 1942.778 1940.667 1940.222 1938.778 1940.000 1936.444 #> [1177] 1941.000 1938.889 1938.667 1938.333 1939.778 1945.667 1945.556 1939.222 #> [1185] 1935.556 1938.889 1942.000 1947.556 1941.111 1940.222 1938.889 1937.667 #> [1193] 1942.000 1936.778 1939.333 1939.111 1933.889 1941.556 1937.889 1937.667 #> [1201] 1928.000 1923.889 1921.333 1923.667 1920.667 1927.778 1928.556 1925.556 #> [1209] 1923.556 1928.000 1956.444 1938.556 1948.000 1949.556 1951.000 1959.111 #> [1217] 1956.667 1945.000 1958.889 1943.667 1940.000 1936.333 1940.444 1934.889 #> [1225] 1941.667 1940.111 1942.556 1943.889 1937.222 1939.667 1935.556 1936.667 #> [1233] 1938.333 1935.222 1940.556 1939.333 1942.444 1938.222 1940.444 1945.556 #> [1241] 1930.667 1934.333 1934.667 1932.333 1933.778 1936.778 1930.222 1929.667 #> [1249] 1936.556 1932.556 1930.444 1926.444 1929.889 1930.000 1930.222 1928.111 #> [1257] 1931.222 1926.778 1936.222 1927.111 1920.444 1923.889 1926.111 1925.333 #> [1265] 1924.444 1923.333 1924.667 1922.444 1919.444 1923.444 1953.333 1944.000 #> [1273] 1943.556 1953.444 1945.889 1950.444 1956.556 1952.000 1950.000 1946.556 #> [1281] 1942.444 1942.889 1936.889 1936.444 1935.556 1937.444 1936.222 1932.222 #> [1289] 1938.333 1940.111 1932.667 1933.000 1934.111 1930.111 1933.000 1933.111 #> [1297] 1931.111 1932.222 1931.000 1936.333 1928.222 1933.222 1931.889 1933.000 #> [1305] 1934.556 1932.222 1930.667 1932.556 1934.222 1929.444 1931.556 1928.778 #> [1313] 1931.111 1932.000 1933.111 1932.111 1930.222 1928.778 1930.556 1932.556 #> [1321] 1944.111 1940.333 1945.111 1945.889 1940.000 1947.111 1941.667 1943.000 #> [1329] 1941.222 1940.222 1941.222 1939.444 1939.889 1929.222 1938.444 1934.778 #> [1337] 1937.222 1942.222 1938.444 1940.222 1936.333 1931.667 1933.778 1934.333 #> [1345] 1933.778 1937.556 1932.000 1938.000 1932.556 1935.333 1936.667 1930.556 #> [1353] 1931.444 1932.222 1933.222 1933.111 1934.333 1932.778 1933.444 1936.778 #> [1361] 1930.000 1930.778 1931.444 1929.889 1930.556 1928.111 1933.444 1929.556 #> [1369] 1928.222 1929.222 1932.444 1936.222 1933.333 1933.111 1930.778 1932.333 #> [1377] 1931.222 1932.222 1934.444 1933.778 1948.222 1947.222 1952.556 1942.889 #> [1385] 1943.444 1943.667 1950.222 1947.111 1953.556 1947.778 1931.222 1929.444 #> [1393] 1928.333 1927.667 1926.111 1926.444 1929.222 1930.333 1931.444 1928.667 #> [1401] 1940.667 1941.889 1943.556 1943.333 1944.556 1940.556 1945.333 1947.000 #> [1409] 1941.000 1942.667 1943.667 1938.333 1939.000 1934.444 1945.444 1934.889 #> [1417] 1932.556 1932.444 1933.667 1935.333 1933.000 1936.000 1933.333 1929.111 #> [1425] 1927.333 1934.222 1933.000 1930.000 1932.667 1930.556 1939.444 1932.222 #> [1433] 1937.667 1938.889 1939.556 1929.333 1935.222 1933.333 1932.333 1934.333 #> [1441] 1939.889 1938.222 1944.889 1938.778 1943.778 1937.778 1941.000 1937.889 #> [1449] 1938.333 1935.444 1929.889 1930.333 1930.667 1924.556 1930.667 1928.667 #> [1457] 1928.556 1928.222 1930.000 1933.778 1933.444 1931.667 1935.111 1929.778 #> [1465] 1932.333 1933.444 1928.889 1932.111 1934.778 1933.889 1931.444 1934.222 #> [1473] 1928.333 1929.778 1927.444 1931.778 1940.889 1932.667 1940.111 1937.444 #> [1481] 1938.778 1938.778 1937.778 1937.444 1934.889 1936.333 1934.444 1938.000 #> [1489] 1935.444 1932.333 1928.444 1933.222 1934.667 1928.000 1933.222 1940.667 #> [1497] 1936.000 1929.667 1928.556 1932.222 1935.778 1936.222 1928.000 1934.444 #> [1505] 1932.889 1936.111 1935.444 1938.556 1932.556 1932.000 1929.444 1924.333 #> [1513] 1930.000 1927.889 1927.778 1930.778 1930.667 1928.111 1921.444 1926.889 #> [1521] 1936.000 1931.444 1929.222 1935.889 1934.444 1932.778 1931.222 1933.333 #> [1529] 1931.333 1935.333 1935.889 1936.889 1932.889 1938.556 1937.778 1942.222 #> [1537] 1940.000 1939.556 1934.111 1936.556 1939.556 1937.000 1942.111 1942.444 #> [1545] 1939.111 1939.667 1946.222 1940.889 1936.222 1938.556 1948.333 1947.222 #> [1553] 1937.000 1954.000 1946.556 1939.333 1946.222 1941.778 1945.556 1943.444 #> [1561] 1931.556 1935.889 1931.667 1931.667 1930.333 1927.333 1929.889 1925.889 #> [1569] 1929.667 1933.333 1934.222 1936.222 1935.000 1934.111 1940.667 1940.444 #> [1577] 1942.000 1935.778 1939.778 1929.111 1939.000 1939.556 1930.000 1938.778 #> [1585] 1942.667 1936.889 1934.444 1931.444 1935.222 1935.778 1921.444 1922.778 #> [1593] 1925.556 1920.556 1921.667 1925.556 1920.333 1924.889 1923.111 1922.889 #> [1601] 1927.333 1930.444 1927.889 1924.889 1933.000 1930.778 1927.667 1936.778 #> [1609] 1929.778 1932.444 1938.444 1927.111 1930.222 1935.111 1935.222 1936.111 #> [1617] 1940.222 1928.556 1942.889 1934.889 1934.000 1931.667 1934.333 1936.667 #> [1625] 1934.444 1937.000 1934.889 1931.667 1939.556 1936.333 1942.889 1940.667 #> [1633] 1941.111 1928.667 1927.000 1932.000 1932.444 1937.556 1929.444 1930.667 #> [1641] 1937.000 1933.667 1936.889 1936.222 1940.778 1937.778 1938.778 1939.333 #> [1649] 1934.889 1934.333 1927.111 1927.111 1929.889 1925.444 1926.111 1924.889 #> [1657] 1923.000 1923.889 1929.444 1929.222 1946.889 1942.444 1937.667 1934.000 #> [1665] 1932.778 1927.778 1943.222 1944.222 1932.111 1947.111 1938.333 1938.778 #> [1673] 1943.000 1940.556 1941.111 1942.444 1944.444 1946.333 1942.222 1940.778 #> [1681] 1940.222 1938.000 1940.222 1938.444 1934.222 1935.778 1936.778 1934.889 #> [1689] 1941.444 1935.111 1936.000 1932.333 1934.889 1932.556 1939.000 1932.000 #> [1697] 1935.444 1932.222 1935.889 1934.000 1942.889 1932.333 1937.444 1934.000 #> [1705] 1936.778 1937.667 1935.000 1932.333 1932.889 1937.667 1932.667 1933.111 #> [1713] 1933.667 1933.667 1930.556 1938.111 1933.333 1928.667 1929.667 1930.444 #> [1721] 1935.889 1931.556 1930.889 1932.667 1933.889 1928.667 1936.222 1931.444 #> [1729] 1935.111 1930.556 1942.667 1934.000 1938.778 1941.444 1944.444 1936.222 #> [1737] 1940.222 1943.111 1940.556 1941.444 1928.111 1929.111 1929.333 1930.000 #> [1745] 1933.222 1928.000 1933.111 1931.889 1935.111 1930.667 1934.778 1937.556 #> [1753] 1935.333 1934.333 1935.667 1933.667 1936.667 1936.889 1937.444 1933.111 #> [1761] 1939.889 1936.889 1939.778 1944.111 1939.667 1941.778 1934.667 1940.444 #> [1769] 1933.778 1938.222 1924.556 1925.000 1926.333 1923.778 1924.444 1925.333 #> [1777] 1924.333 1922.222 1925.444 1924.111 1939.333 1937.222 1937.000 1935.333 #> [1785] 1934.000 1935.556 1932.111 1932.444 1935.000 1933.667 1950.444 1951.778 #> [1793] 1951.444 1951.222 1950.667 1948.000 1955.000 1942.667 1958.889 1950.333 #> [1801] 1929.111 1932.778 1930.889 1945.111 1935.444 1925.889 1929.556 1934.889 #> [1809] 1926.667 1942.333 1939.889 1945.778 1943.222 1944.778 1945.000 1945.333 #> [1817] 1939.333 1945.556 1946.778 1945.000 1936.222 1937.444 1934.556 1935.556 #> [1825] 1934.000 1938.444 1937.000 1934.778 1935.889 1934.889 1930.111 1935.000 #> [1833] 1927.667 1922.444 1926.556 1930.667 1925.556 1928.667 1928.556 1929.556 #> [1841] 1931.556 1927.222 1929.667 1933.444 1929.667 1932.222 1927.889 1935.111 #> [1849] 1928.556 1933.222 1928.333 1932.556 1926.111 1929.000 1926.556 1931.667 #> [1857] 1931.556 1924.444 1920.333 1929.000 1925.000 1925.556 1934.222 1925.778 #> [1865] 1926.000 1927.333 1924.778 1928.000 1929.556 1927.333 1938.111 1930.889 #> [1873] 1939.444 1945.111 1939.444 1938.333 1942.889 1941.778 1938.444 1940.889 #> [1881] 1933.000 1934.778 1929.222 1930.000 1928.000 1932.000 1931.111 1932.778 #> [1889] 1930.000 1931.556 1940.111 1938.667 1942.222 1941.889 1937.111 1944.111 #> [1897] 1932.667 1938.556 1939.667 1934.000 1941.667 1937.444 1939.111 1951.444 #> [1905] 1943.444 1937.333 1938.444 1936.222 1939.667 1947.556 1923.778 1931.222 #> [1913] 1928.889 1926.333 1928.111 1928.667 1930.556 1930.000 1931.000 1929.556 #> [1921] 1939.667 1940.333 1936.444 1936.667 1936.667 1937.111 1938.556 1937.556 #> [1929] 1935.667 1941.000 1937.444 1935.000 1945.778 1944.222 1943.889 1948.778 #> [1937] 1938.333 1944.889 1947.667 1945.444 1939.778 1941.556 1942.111 1933.556 #> [1945] 1939.444 1945.222 1945.778 1941.556 1944.111 1942.222 1937.000 1935.778 #> [1953] 1938.222 1938.778 1939.333 1935.556 1936.111 1937.000 1933.444 1935.778 #> [1961] 1942.889 1947.667 1932.222 1939.111 1943.444 1947.889 1941.667 1951.111 #> [1969] 1945.889 1940.556 1932.889 1929.444 1932.000 1927.667 1930.222 1930.444 #> [1977] 1930.222 1931.444 1930.778 1929.889 1924.556 1925.000 1925.778 1927.889 #> [1985] 1926.222 1925.000 1924.333 1924.000 1925.000 1930.667 1942.778 1937.556 #> [1993] 1940.111 1936.556 1944.778 1939.000 1948.444 1941.778 1941.778 1941.333"},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette demonstration example metrics — thylacine_example_metrics","title":"Thylacine vignette demonstration example metrics — thylacine_example_metrics","text":"dataset containing precalculated summary metrics use running Thylacine example vignette demonstration mode. values obtained running vignette code 20,000 model simulations DEMONSTRATION = FALSE.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette demonstration example metrics — thylacine_example_metrics","text":"data frame 20,000 rows 4 variables: index Example simulation number 1 20,000 bounty_slope_error Root mean squared error (RMSE) estimated total bounty submitted across three intervals (see vignette) ibra_extirpation_error RMSE estimated extirpation date IBRA bioregion (see vignette) total_extinction Total extinction date example simulation (NA persistent beyond 1967)","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette demonstration example metrics — thylacine_example_metrics","text":"Precalculated demonstration via example simulation runs.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette demonstration example metrics — thylacine_example_metrics","text":"","code":"data(thylacine_example_metrics) hist(thylacine_example_metrics$bounty_slope_error)  hist(thylacine_example_metrics$ibra_extirpation_error)  hist(thylacine_example_metrics$total_extinction)"},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics_rerun.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette demonstration example (re-run) metrics — thylacine_example_metrics_rerun","title":"Thylacine vignette demonstration example (re-run) metrics — thylacine_example_metrics_rerun","text":"dataset containing precalculated (re-run) summary metrics use running Thylacine example vignette demonstration mode. values obtained running vignette code 10 replicate re-runs selected 'best' 200 model simulations DEMONSTRATION = FALSE.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics_rerun.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette demonstration example (re-run) metrics — thylacine_example_metrics_rerun","text":"data frame 2,000 rows 4 variables: index Example simulation number 1 2,000 bounty_slope_error Root mean squared error (RMSE) estimated total bounty submitted across three intervals (see vignette) ibra_extirpation_error RMSE estimated extirpation date IBRA bioregion (see vignette) total_extinction Total extinction date example simulation (NA persistent beyond 1967)","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics_rerun.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette demonstration example (re-run) metrics — thylacine_example_metrics_rerun","text":"Precalculated demonstration via example simulation re-runs.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_example_metrics_rerun.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette demonstration example (re-run) metrics — thylacine_example_metrics_rerun","text":"","code":"data(thylacine_example_metrics_rerun) hist(thylacine_example_metrics_rerun$bounty_slope_error)  hist(thylacine_example_metrics_rerun$ibra_extirpation_error)  hist(thylacine_example_metrics_rerun$total_extinction)"},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_hs_raster.html","id":null,"dir":"Reference","previous_headings":"","what":"Thylacine vignette habitat suitability raster — thylacine_hs_raster","title":"Thylacine vignette habitat suitability raster — thylacine_hs_raster","text":"raster dataset defining estimated habitat suitability values grid cells Tasmanian study region Thylacine example vignette.","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_hs_raster.html","id":"format","dir":"Reference","previous_headings":"","what":"Format","title":"Thylacine vignette habitat suitability raster — thylacine_hs_raster","text":"raster::RasterLayer object: dimensions 32 rows 40 columns grid resolution 0.1 0.1 degree grid cells extent longitude 144.5 148.5 degrees; latitude -43.8025 -40.6025 degrees CRS WGS84 longitude-latitude values Estimated habitat suitability values 0 1","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_hs_raster.html","id":"source","dir":"Reference","previous_headings":"","what":"Source","title":"Thylacine vignette habitat suitability raster — thylacine_hs_raster","text":"https://doi.org/10.1111/2041-210X.13720","code":""},{"path":"https://globalecologylab.github.io/poems/reference/thylacine_hs_raster.html","id":"ref-examples","dir":"Reference","previous_headings":"","what":"Examples","title":"Thylacine vignette habitat suitability raster — thylacine_hs_raster","text":"","code":"data(thylacine_hs_raster) raster::plot(thylacine_hs_raster, colNA = \"blue\")"},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"version-130","dir":"Changelog","previous_headings":"","what":"version 1.3.0","title":"version 1.3.0","text":"Every update enhancement time around: Changed two vignettes HTML vignettes. vignettes now run much faster CRAN servers. Added CONTRIBUTING.md file. Added examples functions, classes, data objects package. Added logo README. poems now documented compliant srr standards G1.0 G1.6.","code":""},{"path":[]},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"bug-fixes-1-2-0","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"version 1.2.0","text":"CRS tasmania_modifier raster dataset /data changed NA appropriate equal area projection. vignettes now handle objects /data appropriately.","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"enhancements-1-2-0","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"version 1.2.0","text":"Test coverage increased LatinHypercubeSampler.R, SimulationManager.R, PopulationModel.R. CITATION file added.  added. Code style improved across R files documentation. dataset documentation updated keep latest roxygen2 style. Imports gdistance package now explicit.","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"version-111","dir":"Changelog","previous_headings":"","what":"version 1.1.1","title":"version 1.1.1","text":"Adjusted tests work correctly certain Apple Silicon systems","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"version-110","dir":"Changelog","previous_headings":"","what":"version 1.1.0","title":"version 1.1.0","text":"CRAN release: 2023-10-07 Added density dependent dispersal, via density dependence source population target population Added Poisson distributions possible parameter distribution Latin hypercube sampler","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"version-106","dir":"Changelog","previous_headings":"","what":"version 1.0.6","title":"version 1.0.6","text":"Patched errors notes came tests generator object spatial correlation object","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"version-105","dir":"Changelog","previous_headings":"","what":"version 1.0.5","title":"version 1.0.5","text":"added vignette translocation/introduction new populations","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"version-102","dir":"Changelog","previous_headings":"","what":"version 1.0.2","title":"version 1.0.2","text":"CRAN release: 2022-01-17","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"bug-fixes-1-0-2","dir":"Changelog","previous_headings":"","what":"Bug fixes","title":"version 1.0.2","text":"updated raster CRS strings tests avoid anticipated PROJ 8 errors #1","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"enhancements-1-0-2","dir":"Changelog","previous_headings":"","what":"Enhancements","title":"version 1.0.2","text":"added method references description","code":""},{"path":"https://globalecologylab.github.io/poems/news/index.html","id":"version-101","dir":"Changelog","previous_headings":"","what":"version 1.0.1","title":"version 1.0.1","text":"CRAN release: 2021-03-29 Initial public release","code":""}]
